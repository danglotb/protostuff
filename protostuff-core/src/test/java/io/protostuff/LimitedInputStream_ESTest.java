/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 20 09:47:28 GMT 2017
 */

package io.protostuff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import io.protostuff.LimitedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LimitedInputStream_ESTest extends LimitedInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      LimitedInputStream limitedInputStream0 = new LimitedInputStream(byteArrayInputStream0, (byte)63);
      LimitedInputStream limitedInputStream1 = limitedInputStream0.limit(1);
      limitedInputStream0.read();
      limitedInputStream1.skip((-681L));
      int int0 = limitedInputStream1.read();
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      LimitedInputStream limitedInputStream0 = new LimitedInputStream(dataInputStream0);
      LimitedInputStream limitedInputStream1 = limitedInputStream0.limit(893);
      long long0 = limitedInputStream0.skip(2289L);
      assertEquals(0L, long0);
      
      int int0 = limitedInputStream1.available();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)1, (byte)1);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      LimitedInputStream limitedInputStream0 = new LimitedInputStream(dataInputStream0, (byte)1);
      long long0 = limitedInputStream0.skip((byte)1);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      LimitedInputStream limitedInputStream0 = new LimitedInputStream(byteArrayInputStream0, (byte) (-75));
      LimitedInputStream limitedInputStream1 = limitedInputStream0.limit(1);
      limitedInputStream1.skip((-681L));
      int int0 = limitedInputStream1.read();
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      LimitedInputStream limitedInputStream0 = new LimitedInputStream(dataInputStream0);
      LimitedInputStream limitedInputStream1 = limitedInputStream0.limit(893);
      byte[] byteArray0 = new byte[0];
      int int0 = limitedInputStream1.read(byteArray0, 0, 1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      LimitedInputStream limitedInputStream0 = new LimitedInputStream(pipedInputStream0, (-2100));
      byte[] byteArray0 = new byte[2];
      int int0 = limitedInputStream0.read(byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)1, (byte)1);
      LimitedInputStream limitedInputStream0 = new LimitedInputStream(byteArrayInputStream0, (-1847));
      limitedInputStream0.limit((byte)1);
      int int0 = limitedInputStream0.read(byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      LimitedInputStream limitedInputStream0 = new LimitedInputStream(byteArrayInputStream0, 1180);
      int int0 = limitedInputStream0.read(byteArray0, (int) (byte)0, (int) (byte)0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)75;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      LimitedInputStream limitedInputStream0 = new LimitedInputStream(byteArrayInputStream0, (byte)63);
      int int0 = limitedInputStream0.read();
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(75, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      LimitedInputStream limitedInputStream0 = new LimitedInputStream(byteArrayInputStream0, (byte)63);
      LimitedInputStream limitedInputStream1 = limitedInputStream0.limit(1);
      limitedInputStream0.read();
      int int0 = limitedInputStream1.available();
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      LimitedInputStream limitedInputStream0 = new LimitedInputStream(byteArrayInputStream0, (byte)63);
      limitedInputStream0.read();
      int int0 = limitedInputStream0.read();
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      LimitedInputStream limitedInputStream0 = new LimitedInputStream(byteArrayInputStream0, (byte)63);
      limitedInputStream0.limit((byte) (-81));
      int int0 = limitedInputStream0.read();
      assertEquals((-1), int0);
  }
}
