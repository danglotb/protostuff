/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 13 14:58:25 GMT 2017
 */

package io.protostuff;

import org.junit.Test;
import static org.junit.Assert.*;
import io.protostuff.LimitedInputStream;
import java.io.ByteArrayInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LimitedInputStream_ESTest extends LimitedInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      LimitedInputStream limitedInputStream0 = new LimitedInputStream(byteArrayInputStream0, 216);
      long long0 = limitedInputStream0.skip(735L);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(3L, long0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      LimitedInputStream limitedInputStream0 = new LimitedInputStream(byteArrayInputStream0, 216);
      byteArrayInputStream0.read();
      int int0 = limitedInputStream0.read(byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      LimitedInputStream limitedInputStream0 = new LimitedInputStream(byteArrayInputStream0);
      int int0 = limitedInputStream0.read(byteArray0, (int) (byte)0, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      LimitedInputStream limitedInputStream0 = new LimitedInputStream(byteArrayInputStream0, 216);
      int int0 = limitedInputStream0.read(byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-7);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      LimitedInputStream limitedInputStream0 = new LimitedInputStream(byteArrayInputStream0, 216);
      byteArrayInputStream0.read();
      int int0 = limitedInputStream0.read();
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(249, int0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      LimitedInputStream limitedInputStream0 = new LimitedInputStream(byteArrayInputStream0);
      int int0 = limitedInputStream0.read();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      LimitedInputStream limitedInputStream0 = new LimitedInputStream(byteArrayInputStream0, 216);
      limitedInputStream0.read();
      int int0 = limitedInputStream0.available();
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      LimitedInputStream limitedInputStream0 = new LimitedInputStream(byteArrayInputStream0, 216);
      limitedInputStream0.limit(216);
      int int0 = limitedInputStream0.available();
      assertEquals(3, int0);
  }
}
