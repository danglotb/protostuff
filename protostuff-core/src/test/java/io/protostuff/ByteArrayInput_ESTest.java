/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 20 09:35:31 GMT 2017
 */

package io.protostuff;

import org.evosuite.shaded.org.mockito.Matchers;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.protostuff.ByteArrayInput;
import io.protostuff.CodedInput;
import io.protostuff.GraphByteArrayInput;
import io.protostuff.GraphProtostuffOutput;
import io.protostuff.LinkBuffer;
import io.protostuff.LinkedBuffer;
import io.protostuff.LowCopyProtobufOutput;
import io.protostuff.LowCopyProtostuffOutput;
import io.protostuff.ProtobufOutput;
import io.protostuff.ProtostuffOutput;
import io.protostuff.Schema;
import io.protostuff.WriteSession;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectStreamConstants;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ByteArrayInput_ESTest extends ByteArrayInput_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[24];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte) (-74);
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte)30;
      byteArray0[6] = (byte)6;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, false);
      Schema<GraphByteArrayInput> schema0 = (Schema<GraphByteArrayInput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      byteArrayInput0.readFieldNumber(schema0);
      byteArrayInput0.readTag();
      byteArrayInput0.readByteArray();
      LowCopyProtostuffOutput lowCopyProtostuffOutput0 = new LowCopyProtostuffOutput();
      Schema<LowCopyProtostuffOutput> schema1 = (Schema<LowCopyProtostuffOutput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(schema1).isInitialized(Matchers.<LowCopyProtostuffOutput>any());
      // Undeclared exception!
      try { 
        byteArrayInput0.mergeObject(lowCopyProtostuffOutput0, schema1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.ByteArrayInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-36);
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte)24;
      byteArray0[4] = (byte) (-36);
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, false);
      Schema<GraphByteArrayInput> schema0 = (Schema<GraphByteArrayInput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(schema0).isInitialized(Matchers.<GraphByteArrayInput>any());
      doReturn((Object) null).when(schema0).newMessage();
      // Undeclared exception!
      try { 
        byteArrayInput0.mergeObject((GraphByteArrayInput) null, schema0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.ByteArrayInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte) (-67);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-67);
      byteArray0[6] = (byte) (-125);
      byteArray0[7] = (byte) (-1);
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, true);
      ByteArrayInput byteArrayInput1 = byteArrayInput0.setBounds((byte)0, (-247));
      byteArrayInput1.skipField((byte) (-79));
      byteArrayInput1.setBounds(7, 32);
      byteArrayInput1.readFieldNumber((Schema<Object>) null);
      // Undeclared exception!
      try { 
        byteArrayInput1.readSInt64();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("io.protostuff.ByteArrayInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte) (-11);
      byteArray0[2] = (byte)0;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, true);
      byteArrayInput0.readString();
      byteArrayInput0.skipMessage();
      byteArrayInput0.readByteArray();
      boolean boolean0 = byteArrayInput0.skipField(34);
      assertEquals(4, byteArrayInput0.currentOffset());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      int int0 = ObjectStreamConstants.baseWireHandle;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, true);
      byteArrayInput0.readByteArray();
      assertEquals(1, byteArrayInput0.currentOffset());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte) (-95);
      byteArray0[4] = (byte) (-19);
      byteArray0[5] = (byte)70;
      byteArray0[6] = (byte)40;
      byteArray0[7] = (byte) (-11);
      byteArray0[8] = (byte) (-88);
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, true);
      // Undeclared exception!
      try { 
        byteArrayInput0.skipMessage();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("io.protostuff.ByteArrayInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte) (-29);
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)80;
      byteArray0[6] = (byte)13;
      byteArray0[7] = (byte)25;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, false);
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(40);
      LinkedBuffer linkedBuffer1 = new LinkedBuffer((byte)14, linkedBuffer0);
      ProtobufOutput protobufOutput0 = new ProtobufOutput(linkedBuffer1);
      byteArrayInput0.transferByteRangeTo(protobufOutput0, true, 37, true);
      assertEquals(10095, protobufOutput0.getSize());
      assertEquals(10093, byteArrayInput0.currentOffset());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte) (-76);
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte)30;
      byteArray0[6] = (byte)6;
      byteArray0[7] = (byte)112;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, false);
      byteArrayInput0.readInt32();
      Schema<GraphByteArrayInput> schema0 = (Schema<GraphByteArrayInput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      byteArrayInput0.readFieldNumber(schema0);
      byteArrayInput0.readTag();
      try { 
        byteArrayInput0.readByteArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // CodedInput encountered an embedded string or bytes that misreported its size.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-30);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-23);
      byteArray0[6] = (byte) (-41);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)52;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, false);
      byteArrayInput0.readString();
      assertEquals(9, byteArrayInput0.currentOffset());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)113;
      byteArray0[8] = (byte) (-14);
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, true);
      byteArrayInput0.readRawVarint32();
      int int0 = ObjectStreamConstants.baseWireHandle;
      Schema<InputStream> schema0 = (Schema<InputStream>) mock(Schema.class, new ViolatedAssumptionAnswer());
      byteArrayInput0.readFieldNumber(schema0);
      byteArrayInput0.readSInt32();
      byteArrayInput0.readByteArray();
      assertEquals(32, byteArrayInput0.getLastTag());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte)94;
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte) (-128);
      byteArray0[7] = (byte) (-86);
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, false);
      ByteArrayInput byteArrayInput1 = byteArrayInput0.reset(2, 93);
      LinkedBuffer linkedBuffer0 = new LinkedBuffer((byte)12);
      LinkedBuffer linkedBuffer1 = new LinkedBuffer(0, linkedBuffer0);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer1);
      // Undeclared exception!
      try { 
        byteArrayInput1.transferByteRangeTo(protostuffOutput0, true, 2373, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, true);
      // Undeclared exception!
      try { 
        byteArrayInput0.skipField((-887));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("io.protostuff.ByteArrayInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)35;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, 0, (-3041), true);
      // Undeclared exception!
      try { 
        byteArrayInput0.skipMessage();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("io.protostuff.ByteArrayInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, (-1), 0, false);
      byteArrayInput0.skipMessage();
      Schema<ByteArrayInput> schema0 = (Schema<ByteArrayInput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      byteArrayInput0.readFieldNumber(schema0);
      // Undeclared exception!
      try { 
        byteArrayInput0.readEnum();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("io.protostuff.ByteArrayInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-100);
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, (byte)1, (byte)1, false);
      ByteArrayInput byteArrayInput1 = byteArrayInput0.reset((-360), (byte)1);
      ByteArrayInput byteArrayInput2 = byteArrayInput1.setBounds((-65), (byte) (-100));
      try { 
        byteArrayInput2.checkLastTagWas(2001);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Protocol message end-group tag did not match expected tag.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte) (-3);
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, false);
      try { 
        byteArrayInput0.checkLastTagWas((byte) (-3));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Protocol message end-group tag did not match expected tag.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte) (-70);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-45);
      byteArray0[7] = (byte)5;
      byteArray0[8] = (byte) (-72);
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, false);
      int int0 = byteArrayInput0.readInt32();
      assertEquals(3, byteArrayInput0.currentOffset());
      assertEquals(3999, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)49;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, (byte)0, (byte)49, false);
      ByteArrayInput byteArrayInput1 = byteArrayInput0.reset((byte)0, (byte)0);
      try { 
        byteArrayInput1.readString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // CodedInput encountered an embedded string or bytes that misreported its size.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-18);
      byteArray0[3] = (byte)56;
      byteArray0[4] = (byte)55;
      byteArray0[5] = (byte)0;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, false);
      long long0 = byteArrayInput0.readInt64();
      assertEquals(2, byteArrayInput0.currentOffset());
      assertEquals(734L, long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-76);
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, false);
      // Undeclared exception!
      try { 
        byteArrayInput0.readSInt64();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("io.protostuff.ByteArrayInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte) (-128);
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, true);
      ByteArrayInput byteArrayInput1 = byteArrayInput0.setBounds(48, 2111);
      // Undeclared exception!
      try { 
        byteArrayInput1.skipField(93);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 48
         //
         verifyException("io.protostuff.ByteArrayInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, true);
      byteArrayInput0.readInt32();
      GraphByteArrayInput graphByteArrayInput0 = new GraphByteArrayInput(byteArrayInput0);
      ByteArrayInput byteArrayInput1 = byteArrayInput0.setBounds((byte)0, (byte)0);
      byteArrayInput1.readInt64();
      byteArrayInput1.getLastTag();
      // Undeclared exception!
      try { 
        byteArrayInput1.readSInt64();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("io.protostuff.ByteArrayInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-103);
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, (byte) (-70), 2097152, false);
      ByteArrayInput byteArrayInput1 = byteArrayInput0.reset(0, 2097152);
      LinkBuffer linkBuffer0 = new LinkBuffer(2934);
      LinkBuffer linkBuffer1 = linkBuffer0.writeFloat((byte) (-70));
      LinkBuffer linkBuffer2 = linkBuffer1.writeInt16((-1));
      LowCopyProtobufOutput lowCopyProtobufOutput0 = new LowCopyProtobufOutput(linkBuffer2);
      // Undeclared exception!
      try { 
        byteArrayInput1.transferByteRangeTo(lowCopyProtobufOutput0, true, (-959), true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, (byte)0, (byte) (-55), false);
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, (byte)0, (byte) (-55));
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("length cannot be negative.");
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0, mockFileOutputStream0);
      // Undeclared exception!
      try { 
        byteArrayInput0.transferByteRangeTo(protostuffOutput0, false, (byte)94, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -55
         //
         verifyException("io.protostuff.WriteSink$2", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, true);
      LowCopyProtobufOutput lowCopyProtobufOutput0 = new LowCopyProtobufOutput();
      byteArrayInput0.transferByteRangeTo(lowCopyProtobufOutput0, true, 22, true);
      // Undeclared exception!
      try { 
        byteArrayInput0.readRawVarint32();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("io.protostuff.ByteArrayInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)56;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, (byte)0, (byte)0, true);
      Schema<CodedInput> schema0 = (Schema<CodedInput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(schema0).isInitialized(Matchers.<CodedInput>any());
      doReturn((Object) null).when(schema0).newMessage();
      // Undeclared exception!
      try { 
        byteArrayInput0.mergeObject((CodedInput) null, schema0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.ByteArrayInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)0;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, false);
      int int0 = byteArrayInput0.currentLimit();
      assertFalse(byteArrayInput0.decodeNestedMessageAsGroup);
      assertFalse(byteArrayInput0.isCurrentFieldPacked());
      assertEquals(4, int0);
      assertEquals(0, byteArrayInput0.currentOffset());
      assertEquals(0, byteArrayInput0.getLastTag());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)43;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)68;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, true);
      ByteArrayInput byteArrayInput1 = byteArrayInput0.setBounds((byte)0, 63);
      Schema<String> schema0 = (Schema<String>) mock(Schema.class, new ViolatedAssumptionAnswer());
      byteArrayInput1.handleUnknownField(2961, schema0);
      byteArrayInput0.readBool();
      // Undeclared exception!
      try { 
        byteArrayInput1.readString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-22);
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)34;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, true);
      byteArrayInput0.readBool();
      byteArrayInput0.readSInt32();
      try { 
        byteArrayInput0.readTag();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Protocol message contained an invalid tag (zero).
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)121;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, (byte)0, (byte)0, false);
      boolean boolean0 = byteArrayInput0.skipField(1460);
      assertEquals(0, byteArrayInput0.getLastTag());
      assertEquals(0, byteArrayInput0.currentLimit());
      assertFalse(byteArrayInput0.isCurrentFieldPacked());
      assertFalse(boolean0);
      assertFalse(byteArrayInput0.decodeNestedMessageAsGroup);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte)15;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, true);
      int int0 = byteArrayInput0.currentOffset();
      assertEquals(0, int0);
      assertEquals(0, byteArrayInput0.getLastTag());
      assertEquals(6, byteArrayInput0.currentLimit());
      assertFalse(byteArrayInput0.isCurrentFieldPacked());
      assertTrue(byteArrayInput0.decodeNestedMessageAsGroup);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)0;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, true);
      byteArrayInput0.readString();
      // Undeclared exception!
      try { 
        byteArrayInput0.skipMessage();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("io.protostuff.ByteArrayInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-47);
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte) (-6);
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte)111;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, true);
      LinkedBuffer linkedBuffer0 = new LinkedBuffer((byte)111);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream((byte)1);
      ProtobufOutput protobufOutput0 = new ProtobufOutput(linkedBuffer0, 224);
      WriteSession.FlushHandler writeSession_FlushHandler0 = protobufOutput0.flushHandler;
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0, byteArrayOutputStream0, (WriteSession.FlushHandler) null, (-7));
      GraphProtostuffOutput graphProtostuffOutput0 = new GraphProtostuffOutput(protostuffOutput0);
      try { 
        byteArrayInput0.transferByteRangeTo(graphProtostuffOutput0, true, (byte) (-3), true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // CodedInput encountered an embedded string or message which claimed to have negative size.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte) (-36);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)25;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-107);
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, true);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, (-1436));
      ProtobufOutput protobufOutput0 = new ProtobufOutput(linkedBuffer0);
      ProtobufOutput protobufOutput1 = protobufOutput0.clear();
      try { 
        byteArrayInput0.transferByteRangeTo(protobufOutput1, true, (-831), true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // CodedInput encountered an embedded string or message which claimed to have negative size.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)107;
      byteArray0[5] = (byte) (-87);
      byteArray0[6] = (byte)14;
      byteArray0[7] = (byte) (-52);
      byteArray0[8] = (byte)62;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, true);
      byteArrayInput0.readSFixed64();
      try { 
        byteArrayInput0.skipMessage();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Protocol message tag had invalid wire type.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte)94;
      byteArray0[4] = (byte) (-128);
      byte byte0 = (byte)12;
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte) (-128);
      byteArray0[7] = (byte) (-86);
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, false);
      try { 
        byteArrayInput0.readBytes();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // CodedInput encountered an embedded string or bytes that misreported its size.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte) (-16);
      byteArray0[4] = (byte)73;
      byteArray0[5] = (byte)97;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, true);
      byteArrayInput0.readSFixed32();
      ByteArrayInput byteArrayInput1 = byteArrayInput0.reset((byte)2, 1907);
      Schema<ProtostuffOutput> schema0 = (Schema<ProtostuffOutput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      byteArrayInput0.handleUnknownField(910, schema0);
      byteArrayInput0.readSInt64();
      // Undeclared exception!
      try { 
        byteArrayInput1.reset((byte)73, (byte) (-34));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length cannot be negative.
         //
         verifyException("io.protostuff.ByteArrayInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)110;
      byteArray0[5] = (byte)54;
      byteArray0[6] = (byte) (-125);
      byteArray0[7] = (byte) (-11);
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, true);
      ByteArrayInput byteArrayInput1 = byteArrayInput0.setBounds((byte)0, (byte) (-11));
      byteArrayInput0.readFixed64();
      LowCopyProtostuffOutput lowCopyProtostuffOutput0 = new LowCopyProtostuffOutput();
      Schema<LowCopyProtostuffOutput> schema0 = (Schema<LowCopyProtostuffOutput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(schema0).isInitialized(Matchers.<LowCopyProtostuffOutput>any());
      byteArrayInput0.mergeObject(lowCopyProtostuffOutput0, schema0);
      try { 
        byteArrayInput1.readFieldNumber((Schema<Object>) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Protocol message contained an invalid tag (zero).
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte) (-88);
      byte byte0 = (byte) (-95);
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte) (-88);
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, true);
      byteArrayInput0.readFloat();
      ByteArrayInput byteArrayInput1 = byteArrayInput0.setBounds(16, 1263);
      // Undeclared exception!
      try { 
        byteArrayInput1.readSFixed32();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("io.protostuff.ByteArrayInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[24];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte) (-76);
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte)30;
      byteArray0[6] = (byte)6;
      byteArray0[7] = (byte)112;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, false);
      byteArrayInput0.readInt32();
      byteArrayInput0.readRawVarint64();
      Schema<GraphByteArrayInput> schema0 = (Schema<GraphByteArrayInput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      try { 
        byteArrayInput0.readFieldNumber(schema0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Protocol message contained an invalid tag (zero).
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[24];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte)30;
      byteArray0[6] = (byte)6;
      byteArray0[7] = (byte)112;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, false);
      byteArrayInput0.readInt32();
      Schema<GraphByteArrayInput> schema0 = (Schema<GraphByteArrayInput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      byteArrayInput0.readFieldNumber(schema0);
      byteArrayInput0.readTag();
      byteArrayInput0.readByteArray();
      LowCopyProtostuffOutput lowCopyProtostuffOutput0 = new LowCopyProtostuffOutput();
      Schema<LowCopyProtostuffOutput> schema1 = (Schema<LowCopyProtostuffOutput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      byteArrayInput0.skipField(40);
      ByteArrayInput byteArrayInput1 = byteArrayInput0.setBounds(14, (-455));
      Schema<ByteArrayInput> schema2 = (Schema<ByteArrayInput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(schema2).isInitialized(Matchers.<ByteArrayInput>any());
      // Undeclared exception!
      try { 
        byteArrayInput0.mergeObject(byteArrayInput1, schema2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.ByteArrayInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)107;
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte)0;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, true);
      byteArrayInput0.readByteBuffer();
      byteArrayInput0.readEnum();
      // Undeclared exception!
      try { 
        byteArrayInput0.readDouble();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("io.protostuff.ByteArrayInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte)78;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, true);
      Schema<ByteArrayInput> schema0 = (Schema<ByteArrayInput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      byteArrayInput0.readFieldNumber(schema0);
      boolean boolean0 = byteArrayInput0.isCurrentFieldPacked();
      assertEquals(1, byteArrayInput0.currentOffset());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = 0;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput((byte[]) null, 0, 0, false);
      byteArrayInput0.skipMessage();
      GraphByteArrayInput graphByteArrayInput0 = null;
      Schema<GraphByteArrayInput> schema0 = (Schema<GraphByteArrayInput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      LowCopyProtostuffOutput lowCopyProtostuffOutput0 = new LowCopyProtostuffOutput();
      lowCopyProtostuffOutput0.writeEnum(0, 0, false);
      // Undeclared exception!
      try { 
        byteArrayInput0.transferByteRangeTo(lowCopyProtostuffOutput0, false, 0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.ByteArrayInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte)60;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, true);
      ByteArrayInput byteArrayInput1 = byteArrayInput0.reset((byte)0, (byte)0);
      byteArrayInput0.readBool();
      byteArrayInput0.readInt32();
      byteArrayInput1.readUInt64();
      ByteArrayInput byteArrayInput2 = byteArrayInput1.setBounds((byte)0, (byte)26);
      byteArrayInput2.readFixed32();
      byteArrayInput1.readUInt32();
      // Undeclared exception!
      try { 
        byteArrayInput2.readDouble();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("io.protostuff.ByteArrayInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte) (-15);
      byteArray0[2] = (byte)0;
      Schema<ByteArrayInput> schema0 = (Schema<ByteArrayInput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, true);
      byteArrayInput0.readString();
      try { 
        byteArrayInput0.skipMessage();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Protocol message contained an invalid tag (zero).
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte) (-15);
      byteArray0[2] = (byte)0;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, true);
      byteArrayInput0.readString();
      try { 
        byteArrayInput0.skipMessage();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Protocol message contained an invalid tag (zero).
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)71;
      byteArray0[1] = (byte)71;
      byte byte0 = (byte)16;
      byteArray0[3] = (byte)16;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, true);
      Schema<LowCopyProtobufOutput> schema0 = (Schema<LowCopyProtobufOutput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      Schema<LowCopyProtobufOutput> schema1 = (Schema<LowCopyProtobufOutput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      byteArrayInput0.handleUnknownField((int) 118, schema1);
      byteArrayInput0.readFieldNumber(schema0);
      int int0 = (-1004);
      Schema<GraphProtostuffOutput> schema2 = (Schema<GraphProtostuffOutput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      try { 
        byteArrayInput0.readFieldNumber(schema2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Protocol message contained an invalid tag (zero).
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, true);
      GraphByteArrayInput graphByteArrayInput0 = new GraphByteArrayInput(byteArrayInput0);
      Schema<GraphByteArrayInput> schema0 = (Schema<GraphByteArrayInput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(schema0).isInitialized(Matchers.<GraphByteArrayInput>any());
      GraphByteArrayInput graphByteArrayInput1 = byteArrayInput0.mergeObject(graphByteArrayInput0, schema0);
      ByteArrayInput byteArrayInput1 = byteArrayInput0.setBounds((byte)0, (byte)0);
      byteArrayInput1.readInt64();
      int int0 = ObjectStreamConstants.baseWireHandle;
      // Undeclared exception!
      try { 
        byteArrayInput0.readFieldNumber((Schema<Object>) graphByteArrayInput1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("io.protostuff.ByteArrayInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte) (-39);
      byteArray0[6] = (byte)116;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, (-159), (-731), true);
      // Undeclared exception!
      try { 
        byteArrayInput0.readSInt32();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -159
         //
         verifyException("io.protostuff.ByteArrayInput", e);
      }
  }
}
