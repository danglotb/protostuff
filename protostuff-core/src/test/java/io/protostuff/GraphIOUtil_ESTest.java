/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 20 09:42:35 GMT 2017
 */

package io.protostuff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.protostuff.CodedInput;
import io.protostuff.GraphCodedInput;
import io.protostuff.GraphIOUtil;
import io.protostuff.GraphProtostuffOutput;
import io.protostuff.LinkedBuffer;
import io.protostuff.ProtobufOutput;
import io.protostuff.ProtostuffOutput;
import io.protostuff.Schema;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.FileDescriptor;
import java.io.FilterInputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GraphIOUtil_ESTest extends GraphIOUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Serializing to a LinkedBuffer threw an IOException (should never happen).", "Serializing to a LinkedBuffer threw an IOException (should never happen).");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      byte[] byteArray0 = new byte[1];
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0, 64, 4096);
      Schema<CodedInput> schema0 = (Schema<CodedInput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, (-2378), (-2378));
      LinkedBuffer linkedBuffer1 = new LinkedBuffer(512, linkedBuffer0);
      int int0 = GraphIOUtil.optWriteDelimitedTo((OutputStream) mockFileOutputStream0, codedInput0, schema0, linkedBuffer1);
      assertEquals(1L, mockFile0.length());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Serializing to a LinkedBuffer threw an IOException (should never happen).", "Serializing to a LinkedBuffer threw an IOException (should never happen).");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      byte[] byteArray0 = new byte[1];
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0, 64, 4096);
      Schema<CodedInput> schema0 = (Schema<CodedInput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, (-2378), 0);
      // Undeclared exception!
      try { 
        GraphIOUtil.optWriteDelimitedTo((OutputStream) mockFileOutputStream0, codedInput0, schema0, linkedBuffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer previously used and had not been reset.
         //
         verifyException("io.protostuff.GraphIOUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Serializing to a LinkedBuffer threw an IOException (should never happen).", "Serializing to a LinkedBuffer threw an IOException (should never happen).");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      byte[] byteArray0 = new byte[1];
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0, 64, 4096);
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, (-2378), (-2378));
      Schema<CodedInput> schema0 = (Schema<CodedInput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      int int0 = GraphIOUtil.writeDelimitedTo((OutputStream) mockFileOutputStream0, codedInput0, schema0, linkedBuffer0);
      assertEquals(1L, mockFile0.length());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      MockPrintStream mockPrintStream0 = new MockPrintStream("256 is the minimum buffer size.");
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, (byte) (-7), (-56));
      Schema<Integer> schema0 = (Schema<Integer>) mock(Schema.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        GraphIOUtil.writeDelimitedTo((OutputStream) mockPrintStream0, (Integer) linkedBuffer0.DEFAULT_BUFFER_SIZE, schema0, linkedBuffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer previously used and had not been reset.
         //
         verifyException("io.protostuff.GraphIOUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockFile mockFile0 = new MockFile("R;T|Yy6R$lZ>%");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      byte[] byteArray0 = new byte[4];
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, 1735, (byte)0);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0, mockFileOutputStream0);
      Schema<ProtostuffOutput> schema0 = (Schema<ProtostuffOutput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        GraphIOUtil.writeTo((OutputStream) mockFileOutputStream0, protostuffOutput0, schema0, linkedBuffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer previously used and had not been reset.
         //
         verifyException("io.protostuff.GraphIOUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, (-2286), (byte)121);
      GraphProtostuffOutput graphProtostuffOutput0 = new GraphProtostuffOutput((ProtostuffOutput) null, (byte)121);
      Schema<GraphProtostuffOutput> schema0 = (Schema<GraphProtostuffOutput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        GraphIOUtil.writeTo(linkedBuffer0, graphProtostuffOutput0, schema0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer previously used and had not been reset.
         //
         verifyException("io.protostuff.GraphIOUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)11;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      LinkedBuffer linkedBuffer0 = new LinkedBuffer((byte)0);
      dataInputStream0.readUnsignedByte();
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0);
      CodedInput codedInput0 = new CodedInput(dataInputStream0, true);
      GraphCodedInput graphCodedInput0 = new GraphCodedInput(codedInput0);
      ProtobufOutput protobufOutput0 = new ProtobufOutput(linkedBuffer0);
      Schema<ProtobufOutput> schema0 = (Schema<ProtobufOutput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      GraphIOUtil.mergeDelimitedFrom((InputStream) pushbackInputStream0, protobufOutput0, schema0);
      try { 
        GraphIOUtil.mergeDelimitedFrom((DataInput) dataInputStream0, (Object) protostuffOutput0, (Schema<Object>) graphCodedInput0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      LinkedBuffer linkedBuffer0 = new LinkedBuffer((byte)0);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0);
      ProtobufOutput protobufOutput0 = new ProtobufOutput(protostuffOutput0.head);
      Schema<ProtobufOutput> schema0 = (Schema<ProtobufOutput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      int int0 = GraphIOUtil.mergeDelimitedFrom((InputStream) pushbackInputStream0, protobufOutput0, schema0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, int0);
  }
}
