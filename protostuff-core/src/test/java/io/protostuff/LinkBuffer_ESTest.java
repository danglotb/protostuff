/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 20 09:31:50 GMT 2017
 */

package io.protostuff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.protostuff.LinkBuffer;
import java.nio.ByteBuffer;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LinkBuffer_ESTest extends LinkBuffer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkBuffer linkBuffer0 = new LinkBuffer();
      // Undeclared exception!
      try { 
        linkBuffer0.writeByteBuffer((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.LinkBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinkBuffer linkBuffer0 = new LinkBuffer();
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        linkBuffer0.writeByteArray(byteArray0, 256, (int) (byte)0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LinkBuffer linkBuffer0 = new LinkBuffer();
      LinkBuffer linkBuffer1 = linkBuffer0.writeVarInt64((-124));
      long long0 = linkBuffer1.size();
      assertEquals(256, linkBuffer1.allocSize);
      assertEquals(10L, long0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkBuffer linkBuffer0 = new LinkBuffer();
      linkBuffer0.writeVarInt64(256);
      long long0 = linkBuffer0.size();
      assertEquals(256, linkBuffer0.allocSize);
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LinkBuffer linkBuffer0 = new LinkBuffer();
      linkBuffer0.writeVarInt32(256);
      long long0 = linkBuffer0.size();
      assertEquals(2L, long0);
      assertEquals(256, linkBuffer0.allocSize);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LinkBuffer linkBuffer0 = new LinkBuffer();
      LinkBuffer linkBuffer1 = linkBuffer0.writeInt16(256);
      linkBuffer1.writeVarInt64(256);
      List<ByteBuffer> list0 = linkBuffer1.getBuffers();
      assertEquals(1, list0.size());
      assertEquals(256, linkBuffer1.allocSize);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      LinkBuffer linkBuffer0 = new LinkBuffer(1592);
      LinkBuffer linkBuffer1 = linkBuffer0.writeInt32LE(2);
      LinkBuffer linkBuffer2 = linkBuffer1.writeInt64(1286L);
      List<ByteBuffer> list0 = linkBuffer2.finish();
      assertEquals(1, list0.size());
      assertEquals(1592, linkBuffer2.allocSize);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      LinkBuffer linkBuffer0 = new LinkBuffer();
      LinkBuffer linkBuffer1 = linkBuffer0.writeInt16(256);
      List<ByteBuffer> list0 = linkBuffer1.getBuffers();
      assertEquals(1, list0.size());
      
      long long0 = linkBuffer0.size();
      assertEquals(2L, long0);
      assertEquals(256, linkBuffer0.allocSize);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      LinkBuffer linkBuffer0 = new LinkBuffer();
      LinkBuffer linkBuffer1 = linkBuffer0.writeInt32(256);
      List<ByteBuffer> list0 = linkBuffer1.finish();
      assertEquals(1, list0.size());
      
      long long0 = linkBuffer1.size();
      assertEquals(4L, long0);
      assertEquals(256, linkBuffer1.allocSize);
  }
}
