/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 14 11:27:53 GMT 2017
 */

package io.protostuff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.protostuff.ByteArrayInput;
import io.protostuff.ByteString;
import io.protostuff.CodedInput;
import io.protostuff.GraphByteArrayInput;
import io.protostuff.LinkedBuffer;
import io.protostuff.ProtobufOutput;
import io.protostuff.ProtostuffOutput;
import io.protostuff.Schema;
import io.protostuff.WriteSession;
import io.protostuff.WriteSink;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.nio.ByteBuffer;
import java.nio.ReadOnlyBufferException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ProtobufOutput_ESTest extends ProtobufOutput_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = ProtobufOutput.getRawVarInt32Bytes(4901);
      assertArrayEquals(new byte[] {(byte) (-91), (byte)38}, byteArray0);
      
      long long0 = ProtobufOutput.encodeZigZag64(4901);
      assertEquals(9802L, long0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("+2x7z", false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      ProtobufOutput.writeRawVarInt32Bytes((DataOutput) dataOutputStream0, (-32));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = ProtobufOutput.getRawVarInt32Bytes(0);
      ProtobufOutput.computeRawVarint64Size(0);
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(9);
      ProtobufOutput protobufOutput0 = new ProtobufOutput(linkedBuffer0, 512);
      ProtobufOutput protobufOutput1 = new ProtobufOutput(protobufOutput0.head, 512);
      protobufOutput0.writeFixed32(3903, 67108864, false);
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0, 510, 512);
      Schema<CodedInput> schema0 = (Schema<CodedInput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      protobufOutput1.writeObject(60, codedInput0, schema0, true);
      ProtobufOutput.getTagAndRawVarInt32Bytes(1, 3903);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = ProtobufOutput.getTagAndRawLittleEndian64Bytes(1408, (-2097152L));
      ProtobufOutput.getTagAndRawLittleEndian32Bytes(1408, 2721);
      WriteSink writeSink0 = WriteSink.BUFFERED;
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, 2721, 10);
      LinkedBuffer linkedBuffer1 = new LinkedBuffer(22, linkedBuffer0);
      WriteSession writeSession0 = new WriteSession(linkedBuffer1, 512);
      LinkedBuffer linkedBuffer2 = writeSink0.writeDoubleLE(1408, writeSession0, linkedBuffer1);
      linkedBuffer2.clear();
      linkedBuffer2.clear();
      WriteSession writeSession1 = new WriteSession(linkedBuffer2);
      ProtobufOutput.writeTagAndRawVarInt32(9, (-2383), writeSession0, linkedBuffer0);
      ProtobufOutput.writeTagAndLinkedBuffer(314, linkedBuffer0, writeSession0, linkedBuffer0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ProtobufOutput.getTagAndRawVarInt64Bytes(65536, 65536);
      WriteSink writeSink0 = WriteSink.STREAMED;
      // Undeclared exception!
      try { 
        writeSink0.writeStrUTF8((String) null, (WriteSession) null, (LinkedBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.StreamedStringSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)70;
      byteArray0[5] = (byte)56;
      byteArray0[6] = (byte) (-8);
      byteArray0[7] = (byte)0;
      ProtobufOutput.writeRawVarInt32(1249, byteArray0, 10);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ProtobufOutput.computeRawVarint64Size((-2097152L));
      ProtobufOutput.getTagAndRawVarInt32Bytes(106, (-99));
      WriteSink writeSink0 = WriteSink.STREAMED;
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(10);
      LinkedBuffer linkedBuffer1 = new LinkedBuffer(127, linkedBuffer0);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer1);
      LinkedBuffer linkedBuffer2 = writeSink0.writeStrFromDouble(10, protostuffOutput0, linkedBuffer0);
      WriteSession writeSession0 = new WriteSession(linkedBuffer2, (OutputStream) null);
      LinkedBuffer linkedBuffer3 = ProtobufOutput.writeRawVarInt32(106, writeSession0, linkedBuffer0);
      LinkedBuffer linkedBuffer4 = ProtobufOutput.writeRawVarInt32((-128), writeSession0, linkedBuffer3);
      assertEquals(6, writeSession0.getSize());
      assertSame(linkedBuffer0, linkedBuffer4);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, 10, (-742));
      LinkedBuffer linkedBuffer1 = new LinkedBuffer(byteArray0, 10, 10, linkedBuffer0);
      MockFile mockFile0 = new MockFile("s");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      ProtobufOutput protobufOutput0 = new ProtobufOutput(linkedBuffer1);
      WriteSession.FlushHandler writeSession_FlushHandler0 = protobufOutput0.flushHandler;
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer1, mockPrintStream0, (WriteSession.FlushHandler) null, 512);
      LinkedBuffer linkedBuffer2 = new LinkedBuffer(10, linkedBuffer1);
      // Undeclared exception!
      try { 
        ProtobufOutput.writeTagAndByteArray(1, byteArray0, 1, (-742), protostuffOutput0, linkedBuffer2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = ObjectStreamConstants.baseWireHandle;
      ProtobufOutput.getTagAndRawVarInt32Bytes(8257536, 8257536);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte) (-26);
      LinkedBuffer linkedBuffer0 = null;
      try {
        linkedBuffer0 = new LinkedBuffer((LinkedBuffer) null, (LinkedBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.LinkedBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      objectOutputStream0.writeByte((-48));
      byteArrayOutputStream0.writeTo(objectOutputStream0);
      objectOutputStream0.writeChars("$VALUES");
      ProtobufOutput.writeRawVarInt32Bytes((DataOutput) objectOutputStream0, 1073741824);
      WriteSink writeSink0 = WriteSink.BUFFERED;
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(0);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0, objectOutputStream0);
      LinkedBuffer linkedBuffer1 = writeSink0.writeStrFromLong((-48), protostuffOutput0, protostuffOutput0.head);
      ProtobufOutput protobufOutput0 = new ProtobufOutput(linkedBuffer1, (-1145));
      protobufOutput0.writeSFixed64(256, (-4398046511104L), true);
      ByteString byteString0 = ByteString.EMPTY;
      ByteBuffer byteBuffer0 = byteString0.asReadOnlyByteBuffer();
      // Undeclared exception!
      try { 
        protobufOutput0.writeBytes(7, byteBuffer0, false);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ProtobufOutput.writeRawVarInt32Bytes((OutputStream) byteArrayOutputStream0, (-4199));
      assertEquals("\uFFFD\uFFFD\uFFFD\uFFFD\u000F", byteArrayOutputStream0.toString());
      
      ProtobufOutput.getTagAndRawLittleEndian32Bytes((-4199), (-4199));
      byte[] byteArray0 = ProtobufOutput.getRawVarInt32Bytes(1408);
      assertArrayEquals(new byte[] {(byte) (-128), (byte)11}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        ProtobufOutput.writeRawVarInt32Bytes((OutputStream) pipedOutputStream0, (-160));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      WriteSink writeSink0 = WriteSink.STREAMED;
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(3480);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("o ey=8}v6-k5F");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      ProtobufOutput protobufOutput0 = new ProtobufOutput(linkedBuffer0);
      WriteSession.FlushHandler writeSession_FlushHandler0 = protobufOutput0.flushHandler;
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0, bufferedOutputStream0, (WriteSession.FlushHandler) null, 512);
      LinkedBuffer linkedBuffer1 = writeSink0.writeVarInt64(1015L, protostuffOutput0, linkedBuffer0);
      ProtobufOutput protobufOutput1 = new ProtobufOutput(linkedBuffer1, 4);
      protobufOutput1.writeDouble(968, 0.0, false);
      assertEquals(10, protobufOutput1.getSize());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ProtobufOutput.getTagAndRawVarInt32Bytes((-5228), (-5228));
      ProtobufOutput protobufOutput0 = new ProtobufOutput((LinkedBuffer) null);
      // Undeclared exception!
      try { 
        protobufOutput0.writeUInt32((-5228), (-5228), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.ProtobufOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)0;
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, 0);
      LinkedBuffer linkedBuffer1 = new LinkedBuffer(0, linkedBuffer0);
      ProtobufOutput protobufOutput0 = new ProtobufOutput(linkedBuffer0, 512);
      ProtobufOutput protobufOutput1 = protobufOutput0.clear();
      protobufOutput1.size = 512;
      protobufOutput1.writeInt64((byte)0, 0L, true);
      assertEquals(514, protobufOutput1.getSize());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ProtobufOutput protobufOutput0 = new ProtobufOutput((LinkedBuffer) null);
      // Undeclared exception!
      try { 
        protobufOutput0.writeUInt64(56, 0L, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.ProtobufOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ProtobufOutput.getTagAndRawVarInt32Bytes((-5228), (-268435456));
      ProtobufOutput protobufOutput0 = new ProtobufOutput((LinkedBuffer) null);
      // Undeclared exception!
      try { 
        protobufOutput0.writeString((-5228), "](geT8{f", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.ProtobufOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ProtobufOutput.getTagAndRawVarInt32Bytes((-5228), (-268435456));
      ProtobufOutput protobufOutput0 = new ProtobufOutput((LinkedBuffer) null);
      // Undeclared exception!
      try { 
        protobufOutput0.writeSInt64((-268435456), (-5228), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.ProtobufOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = ProtobufOutput.getTagAndRawLittleEndian32Bytes(101, 101);
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, 97, 101);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0, (OutputStream) null);
      LinkedBuffer linkedBuffer1 = new LinkedBuffer(protostuffOutput0.head, protostuffOutput0.head);
      ProtobufOutput protobufOutput0 = new ProtobufOutput(protostuffOutput0.head);
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, 0, 446, false);
      ByteArrayInput byteArrayInput1 = byteArrayInput0.setBounds(512, 4);
      // Undeclared exception!
      try { 
        protobufOutput0.writeObject(0, byteArrayInput1, (Schema<ByteArrayInput>) null, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 101
         //
         verifyException("io.protostuff.ProtobufOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      WriteSink writeSink0 = WriteSink.BUFFERED;
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(32);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0);
      ProtostuffOutput protostuffOutput1 = protostuffOutput0.clear();
      WriteSink writeSink1 = WriteSink.BUFFERED;
      LinkedBuffer linkedBuffer1 = writeSink1.writeInt16(128, protostuffOutput0, linkedBuffer0);
      LinkedBuffer linkedBuffer2 = writeSink0.writeInt16LE(0, protostuffOutput1, linkedBuffer1);
      ProtobufOutput protobufOutput0 = new ProtobufOutput(linkedBuffer2, 512);
      protobufOutput0.writeEnum((-3366), (-113), false);
      protobufOutput0.writeFixed32(1140, (-302), false);
      ProtobufOutput.writeTagAndRawVarInt32(48, 512, protostuffOutput1, linkedBuffer0);
      // Undeclared exception!
      try { 
        ProtobufOutput.writeRawVarInt32Bytes((OutputStream) null, Integer.MAX_VALUE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.ProtobufOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = ProtobufOutput.getRawVarInt32Bytes(0);
      ProtobufOutput.computeRawVarint64Size(0);
      WriteSink writeSink0 = WriteSink.BUFFERED;
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(0);
      ProtobufOutput protobufOutput0 = new ProtobufOutput(linkedBuffer0, 512);
      ProtobufOutput protobufOutput1 = protobufOutput0.clear();
      protobufOutput1.writeFloat((-268435456), 0, false);
      LinkedBuffer linkedBuffer1 = writeSink0.writeByteArrayB64(byteArray0, 0, 0, (WriteSession) protobufOutput1, linkedBuffer0);
      ProtobufOutput protobufOutput2 = new ProtobufOutput(linkedBuffer1);
      protobufOutput2.writeFixed32(3903, 67108864, false);
      assertEquals(9, protobufOutput1.getSize());
      assertEquals(9, protobufOutput0.getSize());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("Z4KQs;Xkyys{:}E:.H");
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.printf("ISO-8859-1", objectArray0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(printStream0);
      ProtobufOutput.writeRawVarInt32Bytes((DataOutput) dataOutputStream0, 954);
      ProtobufOutput protobufOutput0 = new ProtobufOutput((LinkedBuffer) null);
      // Undeclared exception!
      try { 
        protobufOutput0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.WriteSession", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      WriteSink writeSink0 = WriteSink.BUFFERED;
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0, filterOutputStream0);
      LinkedBuffer linkedBuffer1 = writeSink0.writeStrFromInt(0, protostuffOutput0, protostuffOutput0.head);
      ProtobufOutput protobufOutput0 = new ProtobufOutput(linkedBuffer1, 272);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-45);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)72;
      byteArray0[5] = (byte) (-113);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)108;
      ByteString byteString0 = ByteString.wrap(byteArray0);
      protobufOutput0.writeBytes(56, byteString0, false);
      assertEquals(11, protobufOutput0.getSize());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        ProtobufOutput.writeRawVarInt32Bytes((DataOutput) null, 781);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.ProtobufOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ProtobufOutput.getTagAndRawVarInt64Bytes((-2929), (-2929));
      ProtobufOutput.getTagAndRawVarInt64Bytes(0, (-1270L));
      ProtobufOutput.encodeZigZag32((-2929));
      WriteSink writeSink0 = WriteSink.BUFFERED;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-121);
      LinkedBuffer linkedBuffer0 = new LinkedBuffer((byte)106);
      ProtobufOutput protobufOutput0 = new ProtobufOutput(linkedBuffer0);
      LinkedBuffer.allocate();
      LinkedBuffer linkedBuffer1 = writeSink0.writeByteArrayB64(byteArray0, (int) (byte)82, 0, (WriteSession) protobufOutput0, protobufOutput0.head);
      ProtobufOutput protobufOutput1 = new ProtobufOutput(linkedBuffer1, (-886));
      protobufOutput1.writeSFixed64((byte) (-121), (byte) (-66), false);
      protobufOutput0.writeEnum((byte)0, 0, false);
      assertEquals(2, protobufOutput0.getSize());
      
      ProtobufOutput.getTagAndRawVarInt32Bytes(3521, 256);
      byte[] byteArray1 = ProtobufOutput.getTagAndRawVarInt64Bytes(0, 501L);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-11), (byte)3}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      WriteSink writeSink0 = WriteSink.BUFFERED;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte)0;
      LinkedBuffer linkedBuffer0 = new LinkedBuffer((byte)0);
      WriteSession writeSession0 = new WriteSession(linkedBuffer0, (byte)47);
      WriteSession writeSession1 = writeSession0.clear();
      LinkedBuffer linkedBuffer1 = writeSink0.writeByteArray(byteArray0, writeSession1, writeSession1.head);
      ProtobufOutput protobufOutput0 = new ProtobufOutput(linkedBuffer1, 3062);
      protobufOutput0.writeInt32(0, 0, true);
      assertEquals(2, protobufOutput0.getSize());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ProtobufOutput.getTagAndRawVarInt32Bytes((-5228), (-5228));
      ProtobufOutput protobufOutput0 = new ProtobufOutput((LinkedBuffer) null);
      // Undeclared exception!
      try { 
        protobufOutput0.writeBool((-5228), false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.ProtobufOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte) (-11);
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)0;
      ProtobufOutput.writeRawVarInt32(6, byteArray0, 0);
      WriteSink writeSink0 = WriteSink.BUFFERED;
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, 4);
      ProtobufOutput protobufOutput0 = new ProtobufOutput(linkedBuffer0, 10);
      LinkedBuffer linkedBuffer1 = writeSink0.writeStrAscii("", protobufOutput0, linkedBuffer0);
      ProtobufOutput protobufOutput1 = new ProtobufOutput(linkedBuffer1);
      // Undeclared exception!
      try { 
        protobufOutput1.writeByteRange(true, (byte)127, byteArray0, (-1133), (byte)127, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)106;
      // Undeclared exception!
      try { 
        ProtobufOutput.writeRawLittleEndian32(512, byteArray0, 512);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // buffer capacity not enough.
         //
         verifyException("io.protostuff.ProtobufOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = ProtobufOutput.getTagAndRawVarInt32Bytes(1073741824, 2147);
      WriteSink writeSink0 = WriteSink.BUFFERED;
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, 0, 1073741824);
      WriteSession writeSession0 = new WriteSession(linkedBuffer0);
      LinkedBuffer linkedBuffer1 = writeSink0.writeStrFromLong(0L, writeSession0, writeSession0.head);
      ProtobufOutput protobufOutput0 = new ProtobufOutput(linkedBuffer1, 256);
      ProtobufOutput protobufOutput1 = protobufOutput0.clear();
      protobufOutput1.writeInt32((-2463), 1073741824, true);
      protobufOutput0.writeSInt32(1438, 1438, true);
      assertEquals(14, protobufOutput0.getSize());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ProtobufOutput protobufOutput0 = new ProtobufOutput((LinkedBuffer) null);
      // Undeclared exception!
      try { 
        protobufOutput0.writeSInt32((-842), (-1034), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.ProtobufOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ProtobufOutput.getTagAndRawLittleEndian32Bytes(0, 980);
      ProtobufOutput protobufOutput0 = new ProtobufOutput((LinkedBuffer) null);
      // Undeclared exception!
      try { 
        protobufOutput0.writeSFixed64(0, (-3959), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.ProtobufOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)84;
      // Undeclared exception!
      try { 
        ProtobufOutput.writeRawLittleEndian64(172L, byteArray0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // buffer capacity not enough.
         //
         verifyException("io.protostuff.ProtobufOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ProtobufOutput.getTagAndRawVarInt32Bytes(241, 241);
      byte[] byteArray0 = new byte[0];
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(241);
      ProtobufOutput protobufOutput0 = new ProtobufOutput(linkedBuffer0, 0);
      ProtobufOutput protobufOutput1 = protobufOutput0.clear();
      WriteSession writeSession0 = protobufOutput1.clear();
      ProtobufOutput.writeTagAndByteArray(0, byteArray0, 10, 0, writeSession0, writeSession0.head);
      assertEquals(2, writeSession0.getSize());
      assertEquals(2, protobufOutput0.getSize());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        ProtobufOutput.writeRawVarInt32(512, byteArray0, 512);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 512
         //
         verifyException("io.protostuff.ProtobufOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = ProtobufOutput.getTagAndRawLittleEndian32Bytes((-77), (-77));
      assertArrayEquals(new byte[] {(byte) (-77), (byte) (-1), (byte) (-1), (byte) (-1), (byte)15, (byte) (-77), (byte) (-1), (byte) (-1), (byte) (-1)}, byteArray0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray1 = ProtobufOutput.getRawVarInt32Bytes((-1793));
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-15), (byte) (-1), (byte) (-1), (byte)15}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 2576;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-24);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)82;
      LinkedBuffer linkedBuffer0 = null;
      LinkedBuffer linkedBuffer1 = null;
      try {
        linkedBuffer1 = new LinkedBuffer(byteArray0, (-121), (LinkedBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.LinkedBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream(":;w");
      PrintStream printStream0 = mockPrintStream0.append('[');
      DataOutputStream dataOutputStream0 = new DataOutputStream(printStream0);
      ProtobufOutput.writeRawVarInt32Bytes((DataOutput) dataOutputStream0, 38);
      WriteSink writeSink0 = WriteSink.BUFFERED;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte) (-32);
      byteArray0[4] = (byte) (-60);
      byteArray0[5] = (byte)114;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)16;
      byteArray0[8] = (byte)2;
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, 6);
      LinkedBuffer linkedBuffer1 = new LinkedBuffer(1121, linkedBuffer0);
      LinkedBuffer linkedBuffer2 = new LinkedBuffer(linkedBuffer0, linkedBuffer1);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer2, mockPrintStream0);
      LinkedBuffer linkedBuffer3 = writeSink0.writeByteArrayB64(byteArray0, (WriteSession) protostuffOutput0, protostuffOutput0.head);
      ProtobufOutput protobufOutput0 = new ProtobufOutput(linkedBuffer3);
      ProtobufOutput.writeTagAndRawLittleEndian32(38, 1575, protobufOutput0, linkedBuffer2);
      assertEquals(5, protobufOutput0.getSize());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = ProtobufOutput.getTagAndRawLittleEndian32Bytes((-455), (-455));
      WriteSink writeSink0 = WriteSink.BUFFERED;
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(63);
      WriteSession writeSession0 = new WriteSession(linkedBuffer0, 3);
      LinkedBuffer linkedBuffer1 = writeSink0.writeByteArrayB64(byteArray0, writeSession0, writeSession0.head);
      WriteSession writeSession1 = new WriteSession(linkedBuffer1, (OutputStream) null);
      // Undeclared exception!
      try { 
        ProtobufOutput.writeTagAndByteArray((-455), byteArray0, 224, 224, writeSession1, linkedBuffer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = 101;
      byte[] byteArray0 = ProtobufOutput.getTagAndRawLittleEndian32Bytes(101, 101);
      int int1 = 150;
      WriteSink writeSink0 = WriteSink.STREAMED;
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, 80, 101);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0, (OutputStream) null);
      // Undeclared exception!
      try { 
        writeSink0.writeByteArray(byteArray0, 80, 80, (WriteSession) protostuffOutput0, linkedBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.WriteSession", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Protocol message end-group tag did not match expected tag.");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      ProtobufOutput.writeRawVarInt32Bytes((OutputStream) mockPrintStream0, 128);
      assertEquals(2L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = 2688;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)10;
      byte byte0 = (byte)43;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte) (-35);
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)7;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, 119);
      ProtobufOutput protobufOutput0 = new ProtobufOutput(linkedBuffer0);
      ProtobufOutput.writeTagAndByteArray(2688, byteArray0, (byte)57, 4933, protobufOutput0, linkedBuffer0);
      LinkedBuffer linkedBuffer1 = ProtobufOutput.writeTagAndLinkedBuffer(512, protobufOutput0.head, protobufOutput0, protobufOutput0.head);
      int int1 = 9;
      WriteSink writeSink0 = WriteSink.BUFFERED;
      WriteSink writeSink1 = WriteSink.BUFFERED;
      LinkedBuffer linkedBuffer2 = writeSink1.writeByteArrayB64(byteArray0, (WriteSession) protobufOutput0, linkedBuffer1);
      LinkedBuffer linkedBuffer3 = writeSink0.writeInt16LE((-2097152), protobufOutput0, linkedBuffer2);
      ProtobufOutput.writeRawVarInt32(9, (WriteSession) protobufOutput0, linkedBuffer3);
      // Undeclared exception!
      try { 
        ProtobufOutput.writeRawVarInt32Bytes((OutputStream) null, 2719);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.ProtobufOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = ProtobufOutput.getRawVarInt32Bytes(0);
      ProtobufOutput.computeRawVarint64Size(0);
      WriteSink writeSink0 = WriteSink.BUFFERED;
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(0);
      ProtobufOutput protobufOutput0 = new ProtobufOutput(linkedBuffer0, 512);
      ProtobufOutput protobufOutput1 = protobufOutput0.clear();
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, 1, 1020, false);
      Schema<ByteArrayInput> schema0 = (Schema<ByteArrayInput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      protobufOutput1.writeObject(2146924553, byteArrayInput0, schema0, true);
      LinkedBuffer linkedBuffer1 = writeSink0.writeByteArrayB64(byteArray0, 0, 0, (WriteSession) protobufOutput1, linkedBuffer0);
      ProtobufOutput protobufOutput2 = new ProtobufOutput(linkedBuffer1);
      protobufOutput2.writeFixed32(3903, 67108864, false);
      assertEquals(6, protobufOutput1.getSize());
      assertEquals(7, protobufOutput2.getSize());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ProtobufOutput.computeRawVarint64Size((-2985L));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = ProtobufOutput.getTagAndRawVarInt32Bytes(558, 10);
      MockPrintStream mockPrintStream0 = new MockPrintStream("5Re]SBgvTkh&&{]S*");
      // Undeclared exception!
      try { 
        ProtobufOutput.writeRawVarInt32(10, byteArray0, 558);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 558
         //
         verifyException("io.protostuff.ProtobufOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ProtobufOutput.getTagAndRawLittleEndian64Bytes(1511, 0L);
      ProtobufOutput.computeRawVarint64Size((-1008L));
      ProtobufOutput.getTagAndRawLittleEndian64Bytes(1511, 10);
      int int0 = (-619);
      int int1 = 2;
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        ProtobufOutput.writeRawVarInt32Bytes((DataOutput) dataOutputStream0, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ProtobufOutput.getTagAndRawLittleEndian64Bytes(1511, 0L);
      ProtobufOutput.computeRawVarint64Size((-1008L));
      ProtobufOutput.getTagAndRawLittleEndian64Bytes(1511, 10);
      int int0 = (-579);
      int int1 = 2;
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        ProtobufOutput.writeRawVarInt32Bytes((DataOutput) dataOutputStream0, (-1942));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte) (-35);
      byteArray0[2] = (byte)26;
      byte byte0 = (byte)49;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte) (-117);
      byteArray0[5] = (byte)84;
      byteArray0[6] = (byte)127;
      byteArray0[7] = (byte)106;
      int int0 = (-3357);
      LinkedBuffer linkedBuffer0 = null;
      LinkedBuffer linkedBuffer1 = null;
      try {
        linkedBuffer1 = new LinkedBuffer((byte)49, (LinkedBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.LinkedBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = ProtobufOutput.getTagAndRawLittleEndian64Bytes(1408, (-2097152L));
      ProtobufOutput.getTagAndRawLittleEndian32Bytes(1408, 2721);
      WriteSink writeSink0 = WriteSink.BUFFERED;
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, 2721, 10);
      LinkedBuffer linkedBuffer1 = new LinkedBuffer(22, linkedBuffer0);
      WriteSession writeSession0 = new WriteSession(linkedBuffer1, 512);
      LinkedBuffer linkedBuffer2 = writeSink0.writeDoubleLE(1408, writeSession0, linkedBuffer1);
      linkedBuffer2.clear();
      WriteSession writeSession1 = new WriteSession(linkedBuffer2);
      writeSession0.size = 1408;
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0, (OutputStream) null, (WriteSession.FlushHandler) null, 24);
      LinkedBuffer linkedBuffer3 = writeSink0.writeInt32LE(512, protostuffOutput0, linkedBuffer1);
      ProtobufOutput.writeRawVarInt32(2721, writeSession1, linkedBuffer3);
      // Undeclared exception!
      try { 
        ProtobufOutput.writeRawVarInt32Bytes((OutputStream) null, 256);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.ProtobufOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = ProtobufOutput.getTagAndRawVarInt64Bytes(24, 24);
      ProtobufOutput.getTagAndRawLittleEndian64Bytes(1511, 0L);
      ProtobufOutput.computeRawVarint64Size((-1008L));
      ProtobufOutput.getTagAndRawLittleEndian64Bytes(1511, 10);
      int int0 = (-582);
      // Undeclared exception!
      try { 
        ProtobufOutput.writeRawVarInt32((-582), byteArray0, (-582));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -582
         //
         verifyException("io.protostuff.ProtobufOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      WriteSink writeSink0 = WriteSink.STREAMED;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte) (-71);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-128);
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, (byte) (-70), 0);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0, (OutputStream) null);
      LinkedBuffer linkedBuffer1 = writeSink0.writeStrFromInt(0, protostuffOutput0, linkedBuffer0);
      ProtobufOutput protobufOutput0 = new ProtobufOutput(linkedBuffer1);
      ProtobufOutput.writeTagAndLinkedBuffer((byte)67, protobufOutput0.head, protobufOutput0, linkedBuffer1);
      protobufOutput0.writeBool(2621, true, true);
      protobufOutput0.writeFixed64(63, 63, true);
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, true);
      GraphByteArrayInput graphByteArrayInput0 = new GraphByteArrayInput(byteArrayInput0);
      try { 
        graphByteArrayInput0.readByteBuffer();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // CodedInput encountered an embedded string or bytes that misreported its size.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = (-5228);
      ProtobufOutput.getTagAndRawVarInt32Bytes((-5228), (-268435456));
      ProtobufOutput protobufOutput0 = new ProtobufOutput((LinkedBuffer) null);
      int int1 = 24;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        protobufOutput0.writeSFixed32((-268435456), 31, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.ProtobufOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ProtobufOutput.computeRawVarint64Size((-2097152L));
      ProtobufOutput.getTagAndRawVarInt32Bytes(106, (-99));
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(10);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      LinkedBuffer linkedBuffer1 = new LinkedBuffer(127, linkedBuffer0);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer1);
      LinkedBuffer linkedBuffer2 = new LinkedBuffer(127);
      WriteSession writeSession0 = new WriteSession(linkedBuffer1);
      ProtobufOutput.writeRawVarInt32(106, writeSession0, linkedBuffer0);
      ProtobufOutput.getTagAndRawVarInt64Bytes(127, 759L);
      WriteSink writeSink0 = WriteSink.STREAMED;
      LinkedBuffer linkedBuffer3 = writeSink0.writeStrFromFloat(256, protostuffOutput0, writeSession0.head);
      ProtobufOutput.writeTagAndRawLittleEndian32(512, 512, protostuffOutput0, linkedBuffer3);
      ProtobufOutput.writeTagAndRawVarInt32(676, 512, protostuffOutput0, linkedBuffer3);
      // Undeclared exception!
      try { 
        ProtobufOutput.writeTagAndRawLittleEndian64(512, 512, (WriteSession) null, writeSession0.head);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.ProtobufOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      WriteSink writeSink0 = WriteSink.STREAMED;
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(6);
      ProtobufOutput protobufOutput0 = new ProtobufOutput(linkedBuffer0);
      LinkedBuffer linkedBuffer1 = writeSink0.writeInt16((-51), protobufOutput0, protobufOutput0.head);
      ProtobufOutput protobufOutput1 = protobufOutput0.clear();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)82;
      LinkedBuffer linkedBuffer2 = new LinkedBuffer(byteArray0, 13, linkedBuffer1);
      protobufOutput1.tail = linkedBuffer2;
      protobufOutput1.writeInt32(256, (-144), true);
      protobufOutput1.writeInt64(6, (-144), true);
      protobufOutput1.writeEnum(6, 19, false);
      byte[] byteArray1 = ProtobufOutput.getTagAndRawLittleEndian32Bytes((-51), 512);
      ProtobufOutput.encodeZigZag32(256);
      protobufOutput1.writeByteArray((-144), byteArray1, true);
      linkedBuffer0.next = protobufOutput1.head;
      Schema<CodedInput> schema0 = (Schema<CodedInput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      protobufOutput0.writeObject(8, (CodedInput) null, schema0, true);
      ProtobufOutput.writeTagAndRawLittleEndian64(256, 1L, protobufOutput0, linkedBuffer0);
      assertEquals(52, protobufOutput0.getSize());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte) (-5);
      byteArray0[0] = (byte) (-5);
      byte byte1 = (byte)4;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-7);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[3] = (byte)0;
      byte byte2 = (byte) (-90);
      byteArray0[4] = (byte) (-90);
      byteArray0[5] = (byte) (-128);
      byte byte3 = (byte)4;
      byteArray0[6] = (byte)4;
      byte byte4 = (byte)0;
      byteArray0[7] = (byte)0;
      LinkedBuffer linkedBuffer0 = null;
      try {
        linkedBuffer0 = new LinkedBuffer(byteArray0, (byte) (-128), (LinkedBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.LinkedBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = ProtobufOutput.getTagAndRawLittleEndian64Bytes(0, 0L);
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, 3);
      LinkedBuffer linkedBuffer1 = new LinkedBuffer(byteArray0, 0, linkedBuffer0);
      LinkedBuffer linkedBuffer2 = LinkedBuffer.wrap(byteArray0, 3, 0);
      MockFile mockFile0 = new MockFile("HE");
      ProtobufOutput.getRawVarInt32Bytes(256);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("HE");
      ProtobufOutput.getTagAndRawLittleEndian64Bytes((-9), 2087L);
      ProtobufOutput.getTagAndRawVarInt64Bytes(1319, 256);
      mockFile0.deleteOnExit();
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer1, mockFileOutputStream0, (WriteSession.FlushHandler) null, 31);
      linkedBuffer1.clear();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      ProtobufOutput.writeTagAndRawLittleEndian32(0, 24, protostuffOutput0, linkedBuffer2);
      ProtobufOutput.encodeZigZag64((-1L));
      ProtobufOutput.getRawVarInt32Bytes(512);
      ProtobufOutput.getTagAndRawVarInt64Bytes(24, 1);
      ProtobufOutput.writeTagAndRawLittleEndian64(127, 24, protostuffOutput0, protostuffOutput0.head);
      ProtobufOutput.getRawVarInt32Bytes(31);
      ProtobufOutput.getTagAndRawLittleEndian32Bytes((-2697), 512);
      ProtobufOutput.writeTagAndLinkedBuffer((-2097152), linkedBuffer2, protostuffOutput0, linkedBuffer0);
      assertArrayEquals(new byte[] {(byte)127, (byte)24, (byte)0, (byte) (-128), (byte) (-128), (byte) (-128), (byte) (-1), (byte)15, (byte)5}, byteArray0);
  }
}
