/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 20 09:30:34 GMT 2017
 */

package io.protostuff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.protostuff.ByteArrayInput;
import io.protostuff.ByteBufferInput;
import io.protostuff.ByteString;
import io.protostuff.CodedInput;
import io.protostuff.GraphByteArrayInput;
import io.protostuff.LinkedBuffer;
import io.protostuff.LowCopyProtostuffOutput;
import io.protostuff.ProtobufOutput;
import io.protostuff.ProtostuffOutput;
import io.protostuff.Schema;
import io.protostuff.WriteSession;
import io.protostuff.WriteSink;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.nio.ByteBuffer;
import java.nio.ReadOnlyBufferException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ProtobufOutput_ESTest extends ProtobufOutput_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      byte[] byteArray0 = ProtobufOutput.getRawVarInt32Bytes((-3540));
      assertArrayEquals(new byte[] {(byte) (-84), (byte) (-28), (byte) (-1), (byte) (-1), (byte)15}, byteArray0);
      assertNotNull(byteArray0);
      
      byte[] byteArray1 = ProtobufOutput.getTagAndRawLittleEndian32Bytes((-3540), 89473024);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-84), (byte) (-28), (byte) (-1), (byte) (-1), (byte)15, (byte)0, (byte)64, (byte)85, (byte)5}, byteArray1);
      assertNotNull(byteArray1);
      
      int int0 = ProtobufOutput.computeRawVarint64Size(89473024);
      assertEquals(4, int0);
      
      WriteSink writeSink0 = WriteSink.BUFFERED;
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray1, 89473024, 27);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-84), (byte) (-28), (byte) (-1), (byte) (-1), (byte)15, (byte)0, (byte)64, (byte)85, (byte)5}, byteArray1);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertNotNull(linkedBuffer0);
      
      LinkedBuffer linkedBuffer1 = new LinkedBuffer(89473024, linkedBuffer0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(linkedBuffer1.equals((Object)linkedBuffer0));
      assertArrayEquals(new byte[] {(byte) (-84), (byte) (-28), (byte) (-1), (byte) (-1), (byte)15, (byte)0, (byte)64, (byte)85, (byte)5}, byteArray1);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertNotNull(linkedBuffer1);
      
      WriteSession writeSession0 = new WriteSession(linkedBuffer1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(linkedBuffer0.equals((Object)linkedBuffer1));
      assertFalse(linkedBuffer1.equals((Object)linkedBuffer0));
      assertArrayEquals(new byte[] {(byte) (-84), (byte) (-28), (byte) (-1), (byte) (-1), (byte)15, (byte)0, (byte)64, (byte)85, (byte)5}, byteArray1);
      assertEquals(0, writeSession0.getSize());
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(512, writeSession0.nextBufferSize);
      assertNotNull(writeSession0);
      
      LinkedBuffer linkedBuffer2 = writeSink0.writeStrUTF8("", writeSession0, linkedBuffer0);
      assertNotSame(byteArray1, byteArray0);
      assertSame(linkedBuffer0, linkedBuffer2);
      assertNotSame(linkedBuffer0, linkedBuffer1);
      assertNotSame(linkedBuffer1, linkedBuffer2);
      assertNotSame(linkedBuffer1, linkedBuffer0);
      assertSame(linkedBuffer2, linkedBuffer0);
      assertNotSame(linkedBuffer2, linkedBuffer1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(linkedBuffer0.equals((Object)linkedBuffer1));
      assertFalse(linkedBuffer1.equals((Object)linkedBuffer0));
      assertFalse(linkedBuffer2.equals((Object)linkedBuffer1));
      assertArrayEquals(new byte[] {(byte) (-84), (byte) (-28), (byte) (-1), (byte) (-1), (byte)15, (byte)0, (byte)64, (byte)85, (byte)5}, byteArray1);
      assertEquals(0, writeSession0.getSize());
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(512, writeSession0.nextBufferSize);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertNotNull(linkedBuffer2);
      
      WriteSession writeSession1 = new WriteSession(linkedBuffer2, 89473024);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(linkedBuffer0.equals((Object)linkedBuffer1));
      assertFalse(linkedBuffer1.equals((Object)linkedBuffer2));
      assertFalse(linkedBuffer1.equals((Object)linkedBuffer0));
      assertFalse(linkedBuffer2.equals((Object)linkedBuffer1));
      assertFalse(writeSession1.equals((Object)writeSession0));
      assertArrayEquals(new byte[] {(byte) (-84), (byte) (-28), (byte) (-1), (byte) (-1), (byte)15, (byte)0, (byte)64, (byte)85, (byte)5}, byteArray1);
      assertEquals(0, writeSession0.getSize());
      assertEquals(0, writeSession1.getSize());
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(512, writeSession0.nextBufferSize);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(89473024, writeSession1.nextBufferSize);
      assertNotNull(writeSession1);
      
      LinkedBuffer linkedBuffer3 = ProtobufOutput.writeTagAndRawLittleEndian64(4, (-3540), writeSession1, writeSession0.head);
      assertNotSame(byteArray1, byteArray0);
      assertSame(linkedBuffer0, linkedBuffer2);
      assertNotSame(linkedBuffer0, linkedBuffer3);
      assertNotSame(linkedBuffer0, linkedBuffer1);
      assertNotSame(linkedBuffer1, linkedBuffer2);
      assertSame(linkedBuffer1, linkedBuffer3);
      assertNotSame(linkedBuffer1, linkedBuffer0);
      assertNotSame(writeSession0, writeSession1);
      assertSame(linkedBuffer2, linkedBuffer0);
      assertNotSame(linkedBuffer2, linkedBuffer3);
      assertNotSame(linkedBuffer2, linkedBuffer1);
      assertNotSame(writeSession1, writeSession0);
      assertSame(linkedBuffer3, linkedBuffer1);
      assertNotSame(linkedBuffer3, linkedBuffer0);
      assertNotSame(linkedBuffer3, linkedBuffer2);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(linkedBuffer0.equals((Object)linkedBuffer1));
      assertFalse(linkedBuffer1.equals((Object)linkedBuffer2));
      assertFalse(linkedBuffer1.equals((Object)linkedBuffer0));
      assertFalse(writeSession0.equals((Object)writeSession1));
      assertFalse(linkedBuffer2.equals((Object)linkedBuffer1));
      assertFalse(writeSession1.equals((Object)writeSession0));
      assertFalse(linkedBuffer3.equals((Object)linkedBuffer0));
      assertFalse(linkedBuffer3.equals((Object)linkedBuffer2));
      assertArrayEquals(new byte[] {(byte) (-84), (byte) (-28), (byte) (-1), (byte) (-1), (byte)15, (byte)0, (byte)64, (byte)85, (byte)5}, byteArray1);
      assertEquals(0, writeSession0.getSize());
      assertEquals(9, writeSession1.getSize());
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(512, writeSession0.nextBufferSize);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(89473024, writeSession1.nextBufferSize);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertNotNull(linkedBuffer3);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = ProtobufOutput.getRawVarInt32Bytes((-1242));
      assertArrayEquals(new byte[] {(byte) (-90), (byte) (-10), (byte) (-1), (byte) (-1), (byte)15}, byteArray0);
      assertNotNull(byteArray0);
      
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(16);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertNotNull(linkedBuffer0);
      
      LinkedBuffer linkedBuffer1 = new LinkedBuffer(byteArray0, (-2732), linkedBuffer0);
      assertFalse(linkedBuffer1.equals((Object)linkedBuffer0));
      assertArrayEquals(new byte[] {(byte) (-90), (byte) (-10), (byte) (-1), (byte) (-1), (byte)15}, byteArray0);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertNotNull(linkedBuffer1);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("io.protostuff.ProtostuffException");
      assertNotNull(mockPrintStream0);
      
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer1, mockPrintStream0);
      assertFalse(linkedBuffer0.equals((Object)linkedBuffer1));
      assertFalse(linkedBuffer1.equals((Object)linkedBuffer0));
      assertArrayEquals(new byte[] {(byte) (-90), (byte) (-10), (byte) (-1), (byte) (-1), (byte)15}, byteArray0);
      assertEquals(0, protostuffOutput0.getSize());
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, protostuffOutput0.nextBufferSize);
      assertNotNull(protostuffOutput0);
      
      ProtostuffOutput protostuffOutput1 = protostuffOutput0.clear();
      assertNotSame(linkedBuffer0, linkedBuffer1);
      assertNotSame(linkedBuffer1, linkedBuffer0);
      assertSame(protostuffOutput0, protostuffOutput1);
      assertSame(protostuffOutput1, protostuffOutput0);
      assertFalse(linkedBuffer0.equals((Object)linkedBuffer1));
      assertFalse(linkedBuffer1.equals((Object)linkedBuffer0));
      assertArrayEquals(new byte[] {(byte) (-90), (byte) (-10), (byte) (-1), (byte) (-1), (byte)15}, byteArray0);
      assertEquals(0, protostuffOutput0.getSize());
      assertEquals(0, protostuffOutput1.getSize());
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, protostuffOutput0.nextBufferSize);
      assertEquals(512, protostuffOutput1.nextBufferSize);
      assertNotNull(protostuffOutput1);
      
      // Undeclared exception!
      try { 
        ProtobufOutput.writeTagAndByteArray(107, byteArray0, 494, 256, protostuffOutput1, linkedBuffer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      WriteSink writeSink0 = WriteSink.STREAMED;
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(731);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertNotNull(linkedBuffer0);
      
      ProtobufOutput protobufOutput0 = new ProtobufOutput(linkedBuffer0);
      assertEquals(0, protobufOutput0.getSize());
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(4, ProtobufOutput.LITTLE_ENDIAN_32_SIZE);
      assertEquals(8, ProtobufOutput.LITTLE_ENDIAN_64_SIZE);
      assertEquals(512, protobufOutput0.nextBufferSize);
      assertNotNull(protobufOutput0);
      
      LinkedBuffer linkedBuffer1 = writeSink0.writeInt16((-16384), protobufOutput0, protobufOutput0.head);
      assertSame(linkedBuffer0, linkedBuffer1);
      assertSame(linkedBuffer1, linkedBuffer0);
      assertEquals(2, protobufOutput0.getSize());
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(4, ProtobufOutput.LITTLE_ENDIAN_32_SIZE);
      assertEquals(8, ProtobufOutput.LITTLE_ENDIAN_64_SIZE);
      assertEquals(512, protobufOutput0.nextBufferSize);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertNotNull(linkedBuffer1);
      
      ProtobufOutput protobufOutput1 = new ProtobufOutput(linkedBuffer1, 8);
      assertFalse(protobufOutput1.equals((Object)protobufOutput0));
      assertEquals(2, protobufOutput0.getSize());
      assertEquals(0, protobufOutput1.getSize());
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(4, ProtobufOutput.LITTLE_ENDIAN_32_SIZE);
      assertEquals(8, ProtobufOutput.LITTLE_ENDIAN_64_SIZE);
      assertEquals(512, protobufOutput0.nextBufferSize);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(8, ProtobufOutput.LITTLE_ENDIAN_64_SIZE);
      assertEquals(4, ProtobufOutput.LITTLE_ENDIAN_32_SIZE);
      assertEquals(8, protobufOutput1.nextBufferSize);
      assertNotNull(protobufOutput1);
      
      protobufOutput1.writeInt32(256, (-144), true);
      assertSame(linkedBuffer0, linkedBuffer1);
      assertNotSame(protobufOutput0, protobufOutput1);
      assertSame(linkedBuffer1, linkedBuffer0);
      assertNotSame(protobufOutput1, protobufOutput0);
      assertFalse(protobufOutput0.equals((Object)protobufOutput1));
      assertFalse(protobufOutput1.equals((Object)protobufOutput0));
      assertEquals(2, protobufOutput0.getSize());
      assertEquals(12, protobufOutput1.getSize());
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(4, ProtobufOutput.LITTLE_ENDIAN_32_SIZE);
      assertEquals(8, ProtobufOutput.LITTLE_ENDIAN_64_SIZE);
      assertEquals(512, protobufOutput0.nextBufferSize);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(8, ProtobufOutput.LITTLE_ENDIAN_64_SIZE);
      assertEquals(4, ProtobufOutput.LITTLE_ENDIAN_32_SIZE);
      assertEquals(8, protobufOutput1.nextBufferSize);
      
      protobufOutput1.writeInt64(731, (-144), true);
      assertSame(linkedBuffer0, linkedBuffer1);
      assertNotSame(protobufOutput0, protobufOutput1);
      assertSame(linkedBuffer1, linkedBuffer0);
      assertNotSame(protobufOutput1, protobufOutput0);
      assertFalse(protobufOutput0.equals((Object)protobufOutput1));
      assertFalse(protobufOutput1.equals((Object)protobufOutput0));
      assertEquals(2, protobufOutput0.getSize());
      assertEquals(24, protobufOutput1.getSize());
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(4, ProtobufOutput.LITTLE_ENDIAN_32_SIZE);
      assertEquals(8, ProtobufOutput.LITTLE_ENDIAN_64_SIZE);
      assertEquals(512, protobufOutput0.nextBufferSize);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(8, ProtobufOutput.LITTLE_ENDIAN_64_SIZE);
      assertEquals(4, ProtobufOutput.LITTLE_ENDIAN_32_SIZE);
      assertEquals(8, protobufOutput1.nextBufferSize);
      
      protobufOutput1.writeEnum(731, 56, false);
      assertSame(linkedBuffer0, linkedBuffer1);
      assertNotSame(protobufOutput0, protobufOutput1);
      assertSame(linkedBuffer1, linkedBuffer0);
      assertNotSame(protobufOutput1, protobufOutput0);
      assertFalse(protobufOutput0.equals((Object)protobufOutput1));
      assertFalse(protobufOutput1.equals((Object)protobufOutput0));
      assertEquals(2, protobufOutput0.getSize());
      assertEquals(27, protobufOutput1.getSize());
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(4, ProtobufOutput.LITTLE_ENDIAN_32_SIZE);
      assertEquals(8, ProtobufOutput.LITTLE_ENDIAN_64_SIZE);
      assertEquals(512, protobufOutput0.nextBufferSize);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(8, ProtobufOutput.LITTLE_ENDIAN_64_SIZE);
      assertEquals(4, ProtobufOutput.LITTLE_ENDIAN_32_SIZE);
      assertEquals(8, protobufOutput1.nextBufferSize);
      
      byte[] byteArray0 = ProtobufOutput.getTagAndRawLittleEndian32Bytes((-16384), 512);
      assertArrayEquals(new byte[] {(byte) (-128), (byte) (-128), (byte) (-1), (byte) (-1), (byte)15, (byte)0, (byte)2, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArray0);
      
      int int0 = ProtobufOutput.encodeZigZag32(256);
      assertEquals(512, int0);
      
      protobufOutput1.writeByteArray((-144), byteArray0, true);
      assertSame(linkedBuffer0, linkedBuffer1);
      assertNotSame(protobufOutput0, protobufOutput1);
      assertSame(linkedBuffer1, linkedBuffer0);
      assertNotSame(protobufOutput1, protobufOutput0);
      assertFalse(protobufOutput0.equals((Object)protobufOutput1));
      assertFalse(protobufOutput1.equals((Object)protobufOutput0));
      assertArrayEquals(new byte[] {(byte) (-128), (byte) (-128), (byte) (-1), (byte) (-1), (byte)15, (byte)0, (byte)2, (byte)0, (byte)0}, byteArray0);
      assertEquals(2, protobufOutput0.getSize());
      assertEquals(42, protobufOutput1.getSize());
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(4, ProtobufOutput.LITTLE_ENDIAN_32_SIZE);
      assertEquals(8, ProtobufOutput.LITTLE_ENDIAN_64_SIZE);
      assertEquals(512, protobufOutput0.nextBufferSize);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(8, ProtobufOutput.LITTLE_ENDIAN_64_SIZE);
      assertEquals(4, ProtobufOutput.LITTLE_ENDIAN_32_SIZE);
      assertEquals(8, protobufOutput1.nextBufferSize);
      
      Schema<CodedInput> schema0 = (Schema<CodedInput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      protobufOutput0.writeObject(8, (CodedInput) null, schema0, true);
      assertSame(linkedBuffer0, linkedBuffer1);
      assertNotSame(protobufOutput0, protobufOutput1);
      assertFalse(protobufOutput0.equals((Object)protobufOutput1));
      assertEquals(4, protobufOutput0.getSize());
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(4, ProtobufOutput.LITTLE_ENDIAN_32_SIZE);
      assertEquals(8, ProtobufOutput.LITTLE_ENDIAN_64_SIZE);
      assertEquals(512, protobufOutput0.nextBufferSize);
      
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, true);
      assertArrayEquals(new byte[] {(byte) (-128), (byte) (-128), (byte) (-1), (byte) (-1), (byte)15, (byte)0, (byte)2, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInput0.currentOffset());
      assertFalse(byteArrayInput0.isCurrentFieldPacked());
      assertEquals(0, byteArrayInput0.getLastTag());
      assertEquals(9, byteArrayInput0.currentLimit());
      assertTrue(byteArrayInput0.decodeNestedMessageAsGroup);
      assertNotNull(byteArrayInput0);
      
      ByteArrayInput byteArrayInput1 = byteArrayInput0.setBounds(8, 56);
      assertSame(byteArrayInput0, byteArrayInput1);
      assertSame(byteArrayInput1, byteArrayInput0);
      assertArrayEquals(new byte[] {(byte) (-128), (byte) (-128), (byte) (-1), (byte) (-1), (byte)15, (byte)0, (byte)2, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteArrayInput0.isCurrentFieldPacked());
      assertEquals(0, byteArrayInput0.getLastTag());
      assertEquals(56, byteArrayInput0.currentLimit());
      assertEquals(8, byteArrayInput0.currentOffset());
      assertFalse(byteArrayInput1.isCurrentFieldPacked());
      assertEquals(56, byteArrayInput1.currentLimit());
      assertEquals(0, byteArrayInput1.getLastTag());
      assertEquals(8, byteArrayInput1.currentOffset());
      assertTrue(byteArrayInput0.decodeNestedMessageAsGroup);
      assertTrue(byteArrayInput1.decodeNestedMessageAsGroup);
      assertNotNull(byteArrayInput1);
      
      GraphByteArrayInput graphByteArrayInput0 = new GraphByteArrayInput(byteArrayInput1);
      assertArrayEquals(new byte[] {(byte) (-128), (byte) (-128), (byte) (-1), (byte) (-1), (byte)15, (byte)0, (byte)2, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteArrayInput0.isCurrentFieldPacked());
      assertEquals(0, byteArrayInput0.getLastTag());
      assertEquals(56, byteArrayInput0.currentLimit());
      assertEquals(8, byteArrayInput0.currentOffset());
      assertFalse(byteArrayInput1.isCurrentFieldPacked());
      assertEquals(56, byteArrayInput1.currentLimit());
      assertEquals(0, byteArrayInput1.getLastTag());
      assertEquals(8, byteArrayInput1.currentOffset());
      assertFalse(graphByteArrayInput0.isCurrentMessageReference());
      assertTrue(byteArrayInput0.decodeNestedMessageAsGroup);
      assertTrue(byteArrayInput1.decodeNestedMessageAsGroup);
      assertNotNull(graphByteArrayInput0);
      
      ByteBuffer byteBuffer0 = graphByteArrayInput0.readByteBuffer();
      assertSame(byteArrayInput0, byteArrayInput1);
      assertSame(byteArrayInput1, byteArrayInput0);
      assertArrayEquals(new byte[] {(byte) (-128), (byte) (-128), (byte) (-1), (byte) (-1), (byte)15, (byte)0, (byte)2, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteBuffer0.arrayOffset());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertFalse(byteArrayInput0.isCurrentFieldPacked());
      assertEquals(0, byteArrayInput0.getLastTag());
      assertEquals(56, byteArrayInput0.currentLimit());
      assertEquals(9, byteArrayInput0.currentOffset());
      assertFalse(byteArrayInput1.isCurrentFieldPacked());
      assertEquals(56, byteArrayInput1.currentLimit());
      assertEquals(9, byteArrayInput1.currentOffset());
      assertEquals(0, byteArrayInput1.getLastTag());
      assertFalse(graphByteArrayInput0.isCurrentMessageReference());
      assertTrue(byteArrayInput0.decodeNestedMessageAsGroup);
      assertTrue(byteArrayInput1.decodeNestedMessageAsGroup);
      assertNotNull(byteBuffer0);
      
      protobufOutput1.writeBytes(10, byteBuffer0, true);
      assertSame(linkedBuffer0, linkedBuffer1);
      assertNotSame(protobufOutput0, protobufOutput1);
      assertSame(linkedBuffer1, linkedBuffer0);
      assertNotSame(protobufOutput1, protobufOutput0);
      assertSame(byteArrayInput0, byteArrayInput1);
      assertSame(byteArrayInput1, byteArrayInput0);
      assertFalse(protobufOutput0.equals((Object)protobufOutput1));
      assertFalse(protobufOutput1.equals((Object)protobufOutput0));
      assertArrayEquals(new byte[] {(byte) (-128), (byte) (-128), (byte) (-1), (byte) (-1), (byte)15, (byte)0, (byte)2, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteBuffer0.arrayOffset());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertEquals(4, protobufOutput0.getSize());
      assertEquals(44, protobufOutput1.getSize());
      assertFalse(byteArrayInput0.isCurrentFieldPacked());
      assertEquals(0, byteArrayInput0.getLastTag());
      assertEquals(56, byteArrayInput0.currentLimit());
      assertEquals(9, byteArrayInput0.currentOffset());
      assertFalse(byteArrayInput1.isCurrentFieldPacked());
      assertEquals(56, byteArrayInput1.currentLimit());
      assertEquals(9, byteArrayInput1.currentOffset());
      assertEquals(0, byteArrayInput1.getLastTag());
      assertFalse(graphByteArrayInput0.isCurrentMessageReference());
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(4, ProtobufOutput.LITTLE_ENDIAN_32_SIZE);
      assertEquals(8, ProtobufOutput.LITTLE_ENDIAN_64_SIZE);
      assertEquals(512, protobufOutput0.nextBufferSize);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(8, ProtobufOutput.LITTLE_ENDIAN_64_SIZE);
      assertEquals(4, ProtobufOutput.LITTLE_ENDIAN_32_SIZE);
      assertEquals(8, protobufOutput1.nextBufferSize);
      assertTrue(byteArrayInput0.decodeNestedMessageAsGroup);
      assertTrue(byteArrayInput1.decodeNestedMessageAsGroup);
      
      // Undeclared exception!
      try { 
        ProtobufOutput.writeTagAndRawVarInt32(512, (-1024), (WriteSession) null, linkedBuffer1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.ProtobufOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = ProtobufOutput.getTagAndRawLittleEndian32Bytes((-465), 2846);
      assertArrayEquals(new byte[] {(byte) (-81), (byte) (-4), (byte) (-1), (byte) (-1), (byte)15, (byte)30, (byte)11, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArray0);
      
      byte[] byteArray1 = ProtobufOutput.getTagAndRawLittleEndian64Bytes(472, 2846);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-40), (byte)3, (byte)30, (byte)11, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotNull(byteArray1);
      
      byte[] byteArray2 = new byte[9];
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte)41;
      byteArray2[1] = (byte) (-46);
      byteArray2[2] = (byte)9;
      byteArray2[3] = (byte)59;
      byteArray2[4] = (byte) (-93);
      byteArray2[5] = (byte)9;
      byteArray2[6] = (byte) (-52);
      byteArray2[7] = (byte)104;
      byteArray2[8] = (byte) (-35);
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray2, (-214), (byte)9);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)41, (byte) (-46), (byte)9, (byte)59, (byte) (-93), (byte)9, (byte) (-52), (byte)104, (byte) (-35)}, byteArray2);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertNotNull(linkedBuffer0);
      
      ProtobufOutput protobufOutput0 = new ProtobufOutput(linkedBuffer0, (-1183));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)41, (byte) (-46), (byte)9, (byte)59, (byte) (-93), (byte)9, (byte) (-52), (byte)104, (byte) (-35)}, byteArray2);
      assertEquals(0, protobufOutput0.getSize());
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(4, ProtobufOutput.LITTLE_ENDIAN_32_SIZE);
      assertEquals(8, ProtobufOutput.LITTLE_ENDIAN_64_SIZE);
      assertEquals((-1183), protobufOutput0.nextBufferSize);
      assertNotNull(protobufOutput0);
      
      Schema<LowCopyProtostuffOutput> schema0 = (Schema<LowCopyProtostuffOutput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        protobufOutput0.writeObject((int)  (-46), (LowCopyProtostuffOutput) null, schema0, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.LinkedBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = ProtobufOutput.getTagAndRawVarInt64Bytes((-1152), (-1152));
      assertNotNull(byteArray0);
      
      byte[] byteArray1 = ProtobufOutput.getTagAndRawVarInt64Bytes(5, 5);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)5, (byte)5}, byteArray1);
      assertNotNull(byteArray1);
      
      byte[] byteArray2 = ProtobufOutput.getTagAndRawLittleEndian32Bytes(8, 2048);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)8, (byte)0, (byte)8, (byte)0, (byte)0}, byteArray2);
      assertNotNull(byteArray2);
      
      byte[] byteArray3 = ProtobufOutput.getTagAndRawVarInt64Bytes(8, 5);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertArrayEquals(new byte[] {(byte)8, (byte)5}, byteArray3);
      assertNotNull(byteArray3);
      
      LinkedBuffer linkedBuffer0 = new LinkedBuffer((byte)56);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertNotNull(linkedBuffer0);
      
      ProtobufOutput protobufOutput0 = new ProtobufOutput(linkedBuffer0, 77);
      assertEquals(0, protobufOutput0.getSize());
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(4, ProtobufOutput.LITTLE_ENDIAN_32_SIZE);
      assertEquals(77, protobufOutput0.nextBufferSize);
      assertEquals(8, ProtobufOutput.LITTLE_ENDIAN_64_SIZE);
      assertNotNull(protobufOutput0);
      
      // Undeclared exception!
      try { 
        protobufOutput0.writeObject(16, (ByteArrayInput) null, (Schema<ByteArrayInput>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.ProtobufOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(byteArrayOutputStream0);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      assertEquals("\uFFFD\uFFFD\u0000\u0005", byteArrayOutputStream0.toString());
      assertEquals(4, byteArrayOutputStream0.size());
      assertNotNull(objectOutputStream0);
      
      objectOutputStream0.writeByte((-48));
      assertEquals("\uFFFD\uFFFD\u0000\u0005", byteArrayOutputStream0.toString());
      assertEquals(4, byteArrayOutputStream0.size());
      
      byteArrayOutputStream0.writeTo(objectOutputStream0);
      assertEquals("\uFFFD\uFFFD\u0000\u0005", byteArrayOutputStream0.toString());
      assertEquals(4, byteArrayOutputStream0.size());
      
      ProtobufOutput.writeRawVarInt32Bytes((DataOutput) objectOutputStream0, 1073741824);
      assertEquals("\uFFFD\uFFFD\u0000\u0005", byteArrayOutputStream0.toString());
      assertEquals(4, byteArrayOutputStream0.size());
      
      WriteSink writeSink0 = WriteSink.BUFFERED;
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(0);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertNotNull(linkedBuffer0);
      
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0, objectOutputStream0);
      assertEquals("\uFFFD\uFFFD\u0000\u0005", byteArrayOutputStream0.toString());
      assertEquals(4, byteArrayOutputStream0.size());
      assertEquals(0, protostuffOutput0.getSize());
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, protostuffOutput0.nextBufferSize);
      assertNotNull(protostuffOutput0);
      
      LinkedBuffer linkedBuffer1 = writeSink0.writeStrFromLong((-48), protostuffOutput0, protostuffOutput0.head);
      assertNotSame(linkedBuffer0, linkedBuffer1);
      assertNotSame(linkedBuffer1, linkedBuffer0);
      assertFalse(linkedBuffer1.equals((Object)linkedBuffer0));
      assertEquals("\uFFFD\uFFFD\u0000\u0005", byteArrayOutputStream0.toString());
      assertEquals(4, byteArrayOutputStream0.size());
      assertEquals(3, protostuffOutput0.getSize());
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, protostuffOutput0.nextBufferSize);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertNotNull(linkedBuffer1);
      
      ProtobufOutput protobufOutput0 = new ProtobufOutput(linkedBuffer1, (-1145));
      assertFalse(linkedBuffer0.equals((Object)linkedBuffer1));
      assertFalse(linkedBuffer1.equals((Object)linkedBuffer0));
      assertEquals("\uFFFD\uFFFD\u0000\u0005", byteArrayOutputStream0.toString());
      assertEquals(4, byteArrayOutputStream0.size());
      assertEquals(3, protostuffOutput0.getSize());
      assertEquals(0, protobufOutput0.getSize());
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, protostuffOutput0.nextBufferSize);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(8, ProtobufOutput.LITTLE_ENDIAN_64_SIZE);
      assertEquals(4, ProtobufOutput.LITTLE_ENDIAN_32_SIZE);
      assertEquals((-1145), protobufOutput0.nextBufferSize);
      assertNotNull(protobufOutput0);
      
      protostuffOutput0.size = (-1145);
      assertEquals("\uFFFD\uFFFD\u0000\u0005", byteArrayOutputStream0.toString());
      assertEquals(4, byteArrayOutputStream0.size());
      assertEquals((-1145), protostuffOutput0.getSize());
      
      protobufOutput0.writeSFixed64(256, (-4398046511104L), true);
      assertNotSame(linkedBuffer0, linkedBuffer1);
      assertNotSame(linkedBuffer1, linkedBuffer0);
      assertFalse(linkedBuffer0.equals((Object)linkedBuffer1));
      assertFalse(linkedBuffer1.equals((Object)linkedBuffer0));
      assertEquals("\uFFFD\uFFFD\u0000\u0005", byteArrayOutputStream0.toString());
      assertEquals(4, byteArrayOutputStream0.size());
      assertEquals((-1145), protostuffOutput0.getSize());
      assertEquals(10, protobufOutput0.getSize());
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, protostuffOutput0.nextBufferSize);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(8, ProtobufOutput.LITTLE_ENDIAN_64_SIZE);
      assertEquals(4, ProtobufOutput.LITTLE_ENDIAN_32_SIZE);
      assertEquals((-1145), protobufOutput0.nextBufferSize);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)18;
      // Undeclared exception!
      try { 
        ProtobufOutput.writeTagAndByteArray(0, byteArray0, 95, (-1735), protobufOutput0, protobufOutput0.head);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ProtobufOutput protobufOutput0 = new ProtobufOutput((LinkedBuffer) null);
      assertEquals(0, protobufOutput0.getSize());
      assertEquals(512, protobufOutput0.nextBufferSize);
      assertEquals(8, ProtobufOutput.LITTLE_ENDIAN_64_SIZE);
      assertEquals(4, ProtobufOutput.LITTLE_ENDIAN_32_SIZE);
      assertNotNull(protobufOutput0);
      
      // Undeclared exception!
      try { 
        protobufOutput0.writeBool((-5228), true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.ProtobufOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      assertEquals(4, byteArrayOutputStream0.size());
      assertEquals("\uFFFD\uFFFD\u0000\u0005", byteArrayOutputStream0.toString());
      assertNotNull(objectOutputStream0);
      
      objectOutputStream0.writeByte((-48));
      assertEquals(4, byteArrayOutputStream0.size());
      assertEquals("\uFFFD\uFFFD\u0000\u0005", byteArrayOutputStream0.toString());
      
      byteArrayOutputStream0.writeTo(objectOutputStream0);
      assertEquals(4, byteArrayOutputStream0.size());
      assertEquals("\uFFFD\uFFFD\u0000\u0005", byteArrayOutputStream0.toString());
      
      ProtobufOutput.writeRawVarInt32Bytes((DataOutput) objectOutputStream0, (-48));
      assertEquals(4, byteArrayOutputStream0.size());
      assertEquals("\uFFFD\uFFFD\u0000\u0005", byteArrayOutputStream0.toString());
      
      WriteSink writeSink0 = WriteSink.BUFFERED;
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(0);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertNotNull(linkedBuffer0);
      
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0, objectOutputStream0);
      assertEquals(4, byteArrayOutputStream0.size());
      assertEquals("\uFFFD\uFFFD\u0000\u0005", byteArrayOutputStream0.toString());
      assertEquals(0, protostuffOutput0.getSize());
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, protostuffOutput0.nextBufferSize);
      assertNotNull(protostuffOutput0);
      
      LinkedBuffer linkedBuffer1 = writeSink0.writeStrFromLong((-48), protostuffOutput0, protostuffOutput0.head);
      assertNotSame(linkedBuffer0, linkedBuffer1);
      assertNotSame(linkedBuffer1, linkedBuffer0);
      assertFalse(linkedBuffer1.equals((Object)linkedBuffer0));
      assertEquals(4, byteArrayOutputStream0.size());
      assertEquals("\uFFFD\uFFFD\u0000\u0005", byteArrayOutputStream0.toString());
      assertEquals(3, protostuffOutput0.getSize());
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, protostuffOutput0.nextBufferSize);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertNotNull(linkedBuffer1);
      
      ProtobufOutput protobufOutput0 = new ProtobufOutput(linkedBuffer1, (-1145));
      assertFalse(linkedBuffer0.equals((Object)linkedBuffer1));
      assertFalse(linkedBuffer1.equals((Object)linkedBuffer0));
      assertEquals(4, byteArrayOutputStream0.size());
      assertEquals("\uFFFD\uFFFD\u0000\u0005", byteArrayOutputStream0.toString());
      assertEquals(3, protostuffOutput0.getSize());
      assertEquals(0, protobufOutput0.getSize());
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, protostuffOutput0.nextBufferSize);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals((-1145), protobufOutput0.nextBufferSize);
      assertEquals(8, ProtobufOutput.LITTLE_ENDIAN_64_SIZE);
      assertEquals(4, ProtobufOutput.LITTLE_ENDIAN_32_SIZE);
      assertNotNull(protobufOutput0);
      
      // Undeclared exception!
      try { 
        ProtobufOutput.writeRawVarInt32Bytes((OutputStream) null, (-48));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.ProtobufOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("(j58Y-)=9~!<X");
      assertNotNull(mockFileOutputStream0);
      
      ProtobufOutput.writeRawVarInt32Bytes((OutputStream) mockFileOutputStream0, (-1));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      WriteSink writeSink0 = WriteSink.STREAMED;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, (-841), (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-73), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertNotNull(linkedBuffer0);
      
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-73), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, protostuffOutput0.getSize());
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, protostuffOutput0.nextBufferSize);
      assertNotNull(protostuffOutput0);
      
      LinkedBuffer linkedBuffer1 = writeSink0.writeByte((byte)0, protostuffOutput0, linkedBuffer0);
      assertSame(linkedBuffer0, linkedBuffer1);
      assertSame(linkedBuffer1, linkedBuffer0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-73), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, protostuffOutput0.getSize());
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, protostuffOutput0.nextBufferSize);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertNotNull(linkedBuffer1);
      
      ProtobufOutput protobufOutput0 = new ProtobufOutput(linkedBuffer1, (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-73), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, protostuffOutput0.getSize());
      assertEquals(0, protobufOutput0.getSize());
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, protostuffOutput0.nextBufferSize);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(0, protobufOutput0.nextBufferSize);
      assertEquals(8, ProtobufOutput.LITTLE_ENDIAN_64_SIZE);
      assertEquals(4, ProtobufOutput.LITTLE_ENDIAN_32_SIZE);
      assertNotNull(protobufOutput0);
      
      protostuffOutput0.writeFloat((-3875), 0.0F, true);
      assertSame(linkedBuffer0, linkedBuffer1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-19), (byte) (-115), (byte) (-2), (byte) (-1), (byte)15, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, protostuffOutput0.getSize());
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, protostuffOutput0.nextBufferSize);
      
      protobufOutput0.writeInt32(255, 0, true);
      assertSame(linkedBuffer0, linkedBuffer1);
      assertSame(linkedBuffer1, linkedBuffer0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-19), (byte) (-115), (byte) (-2), (byte) (-1), (byte)15, (byte) (-8), (byte)15, (byte)0}, byteArray0);
      assertEquals(10, protostuffOutput0.getSize());
      assertEquals(3, protobufOutput0.getSize());
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, protostuffOutput0.nextBufferSize);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(0, protobufOutput0.nextBufferSize);
      assertEquals(8, ProtobufOutput.LITTLE_ENDIAN_64_SIZE);
      assertEquals(4, ProtobufOutput.LITTLE_ENDIAN_32_SIZE);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      WriteSink writeSink0 = WriteSink.STREAMED;
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(3480);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertNotNull(linkedBuffer0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("o ey=8}v6-k5F");
      assertNotNull(mockFileOutputStream0);
      
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      assertNotNull(bufferedOutputStream0);
      
      ProtobufOutput protobufOutput0 = new ProtobufOutput(linkedBuffer0);
      assertEquals(0, protobufOutput0.getSize());
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(8, ProtobufOutput.LITTLE_ENDIAN_64_SIZE);
      assertEquals(512, protobufOutput0.nextBufferSize);
      assertEquals(4, ProtobufOutput.LITTLE_ENDIAN_32_SIZE);
      assertNotNull(protobufOutput0);
      
      WriteSession.FlushHandler writeSession_FlushHandler0 = protobufOutput0.flushHandler;
      assertNull(writeSession_FlushHandler0);
      
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0, bufferedOutputStream0, (WriteSession.FlushHandler) null, 512);
      assertEquals(0, protostuffOutput0.getSize());
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(512, protostuffOutput0.nextBufferSize);
      assertNotNull(protostuffOutput0);
      
      LinkedBuffer linkedBuffer1 = writeSink0.writeVarInt64(1015L, protostuffOutput0, linkedBuffer0);
      assertSame(linkedBuffer0, linkedBuffer1);
      assertSame(linkedBuffer1, linkedBuffer0);
      assertEquals(2, protostuffOutput0.getSize());
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(512, protostuffOutput0.nextBufferSize);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertNotNull(linkedBuffer1);
      
      ProtobufOutput protobufOutput1 = new ProtobufOutput(linkedBuffer1, 4);
      assertFalse(protobufOutput1.equals((Object)protobufOutput0));
      assertEquals(2, protostuffOutput0.getSize());
      assertEquals(0, protobufOutput1.getSize());
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(512, protostuffOutput0.nextBufferSize);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(4, protobufOutput1.nextBufferSize);
      assertEquals(4, ProtobufOutput.LITTLE_ENDIAN_32_SIZE);
      assertEquals(8, ProtobufOutput.LITTLE_ENDIAN_64_SIZE);
      assertNotNull(protobufOutput1);
      
      protobufOutput1.writeDouble(968, 0.0, false);
      assertSame(linkedBuffer0, linkedBuffer1);
      assertSame(linkedBuffer1, linkedBuffer0);
      assertNotSame(protobufOutput1, protobufOutput0);
      assertFalse(protobufOutput1.equals((Object)protobufOutput0));
      assertEquals(2, protostuffOutput0.getSize());
      assertEquals(10, protobufOutput1.getSize());
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(512, protostuffOutput0.nextBufferSize);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(4, protobufOutput1.nextBufferSize);
      assertEquals(4, ProtobufOutput.LITTLE_ENDIAN_32_SIZE);
      assertEquals(8, ProtobufOutput.LITTLE_ENDIAN_64_SIZE);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertEquals(1, int0);
      
      ProtobufOutput protobufOutput0 = new ProtobufOutput((LinkedBuffer) null);
      assertEquals(0, protobufOutput0.getSize());
      assertEquals(512, protobufOutput0.nextBufferSize);
      assertEquals(8, ProtobufOutput.LITTLE_ENDIAN_64_SIZE);
      assertEquals(4, ProtobufOutput.LITTLE_ENDIAN_32_SIZE);
      assertNotNull(protobufOutput0);
      
      // Undeclared exception!
      try { 
        protobufOutput0.writeUInt32(758, 2301, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.ProtobufOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      long long0 = ProtobufOutput.encodeZigZag64((-4157L));
      assertEquals(8313L, long0);
      
      LinkedBuffer linkedBuffer0 = new LinkedBuffer((byte[]) null, 1383);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertNotNull(linkedBuffer0);
      
      LinkedBuffer linkedBuffer1 = new LinkedBuffer(linkedBuffer0, linkedBuffer0);
      assertFalse(linkedBuffer1.equals((Object)linkedBuffer0));
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertNotNull(linkedBuffer1);
      
      MockFile mockFile0 = new MockFile("");
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.toString());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte)0;
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, (-2039), 0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-24), (byte)0}, byteArray0);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertNotNull(linkedBuffer0);
      
      ProtobufOutput protobufOutput0 = new ProtobufOutput(linkedBuffer0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-24), (byte)0}, byteArray0);
      assertEquals(0, protobufOutput0.getSize());
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(4, ProtobufOutput.LITTLE_ENDIAN_32_SIZE);
      assertEquals(512, protobufOutput0.nextBufferSize);
      assertEquals(8, ProtobufOutput.LITTLE_ENDIAN_64_SIZE);
      assertNotNull(protobufOutput0);
      
      protobufOutput0.writeString((byte)0, "Cbd!OusY!i02^", true);
      assertArrayEquals(new byte[] {(byte)2, (byte)13, (byte)67, (byte)98}, byteArray0);
      assertEquals(15, protobufOutput0.getSize());
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(4, ProtobufOutput.LITTLE_ENDIAN_32_SIZE);
      assertEquals(512, protobufOutput0.nextBufferSize);
      assertEquals(8, ProtobufOutput.LITTLE_ENDIAN_64_SIZE);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ProtobufOutput protobufOutput0 = new ProtobufOutput((LinkedBuffer) null);
      assertEquals(0, protobufOutput0.getSize());
      assertEquals(512, protobufOutput0.nextBufferSize);
      assertEquals(8, ProtobufOutput.LITTLE_ENDIAN_64_SIZE);
      assertEquals(4, ProtobufOutput.LITTLE_ENDIAN_32_SIZE);
      assertNotNull(protobufOutput0);
      
      // Undeclared exception!
      try { 
        protobufOutput0.writeFloat((-5228), (-5228), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.ProtobufOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, 1913, (-398));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertNotNull(linkedBuffer0);
      
      LinkedBuffer linkedBuffer1 = linkedBuffer0.clear();
      assertSame(linkedBuffer0, linkedBuffer1);
      assertSame(linkedBuffer1, linkedBuffer0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertNotNull(linkedBuffer1);
      
      ProtobufOutput protobufOutput0 = new ProtobufOutput(linkedBuffer0, (-1578));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, protobufOutput0.getSize());
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(8, ProtobufOutput.LITTLE_ENDIAN_64_SIZE);
      assertEquals(4, ProtobufOutput.LITTLE_ENDIAN_32_SIZE);
      assertEquals((-1578), protobufOutput0.nextBufferSize);
      assertNotNull(protobufOutput0);
      
      Schema<ByteBufferInput> schema0 = (Schema<ByteBufferInput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        protobufOutput0.writeObject((-128), (ByteBufferInput) null, schema0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1913
         //
         verifyException("io.protostuff.ProtobufOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = ProtobufOutput.getTagAndRawVarInt32Bytes((-5228), (-268435456));
      assertArrayEquals(new byte[] {(byte) (-108), (byte) (-41), (byte) (-1), (byte) (-1), (byte)15, (byte) (-128), (byte) (-128), (byte) (-128), (byte) (-128), (byte)15}, byteArray0);
      assertNotNull(byteArray0);
      
      ProtobufOutput protobufOutput0 = new ProtobufOutput((LinkedBuffer) null);
      assertEquals(0, protobufOutput0.getSize());
      assertEquals(512, protobufOutput0.nextBufferSize);
      assertEquals(4, ProtobufOutput.LITTLE_ENDIAN_32_SIZE);
      assertEquals(8, ProtobufOutput.LITTLE_ENDIAN_64_SIZE);
      assertNotNull(protobufOutput0);
      
      byte[] byteArray1 = ProtobufOutput.getRawVarInt32Bytes(512);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-128), (byte)4}, byteArray1);
      assertNotNull(byteArray1);
      
      // Undeclared exception!
      try { 
        protobufOutput0.writeSFixed32(2007, (-5228), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.ProtobufOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ProtobufOutput protobufOutput0 = new ProtobufOutput((LinkedBuffer) null);
      assertEquals(0, protobufOutput0.getSize());
      assertEquals(512, protobufOutput0.nextBufferSize);
      assertEquals(4, ProtobufOutput.LITTLE_ENDIAN_32_SIZE);
      assertEquals(8, ProtobufOutput.LITTLE_ENDIAN_64_SIZE);
      assertNotNull(protobufOutput0);
      
      int int0 = ProtobufOutput.computeRawVarint32Size(21);
      assertEquals(1, int0);
      
      ByteString byteString0 = ByteString.EMPTY;
      assertTrue(byteString0.isEmpty());
      assertEquals(0, byteString0.size());
      assertNotNull(byteString0);
      
      // Undeclared exception!
      try { 
        protobufOutput0.writeBytes(1, byteString0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.ProtobufOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      WriteSink writeSink0 = WriteSink.BUFFERED;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)16;
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, 2260);
      assertArrayEquals(new byte[] {(byte)86, (byte)122, (byte)0, (byte)16}, byteArray0);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertNotNull(linkedBuffer0);
      
      LinkedBuffer linkedBuffer1 = new LinkedBuffer(4290, linkedBuffer0);
      assertFalse(linkedBuffer1.equals((Object)linkedBuffer0));
      assertArrayEquals(new byte[] {(byte)86, (byte)122, (byte)0, (byte)16}, byteArray0);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertNotNull(linkedBuffer1);
      
      WriteSession writeSession0 = new WriteSession(linkedBuffer1, 512);
      assertFalse(linkedBuffer0.equals((Object)linkedBuffer1));
      assertFalse(linkedBuffer1.equals((Object)linkedBuffer0));
      assertArrayEquals(new byte[] {(byte)86, (byte)122, (byte)0, (byte)16}, byteArray0);
      assertEquals(0, writeSession0.getSize());
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(512, writeSession0.nextBufferSize);
      assertNotNull(writeSession0);
      
      LinkedBuffer linkedBuffer2 = writeSink0.writeInt64(0L, writeSession0, linkedBuffer1);
      assertNotSame(linkedBuffer0, linkedBuffer1);
      assertNotSame(linkedBuffer0, linkedBuffer2);
      assertSame(linkedBuffer1, linkedBuffer2);
      assertNotSame(linkedBuffer1, linkedBuffer0);
      assertNotSame(linkedBuffer2, linkedBuffer0);
      assertSame(linkedBuffer2, linkedBuffer1);
      assertFalse(linkedBuffer0.equals((Object)linkedBuffer1));
      assertFalse(linkedBuffer1.equals((Object)linkedBuffer0));
      assertFalse(linkedBuffer2.equals((Object)linkedBuffer0));
      assertArrayEquals(new byte[] {(byte)86, (byte)122, (byte)0, (byte)16}, byteArray0);
      assertEquals(8, writeSession0.getSize());
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(512, writeSession0.nextBufferSize);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertNotNull(linkedBuffer2);
      
      ProtobufOutput protobufOutput0 = new ProtobufOutput(linkedBuffer2);
      assertFalse(linkedBuffer0.equals((Object)linkedBuffer1));
      assertFalse(linkedBuffer0.equals((Object)linkedBuffer2));
      assertFalse(linkedBuffer1.equals((Object)linkedBuffer0));
      assertFalse(linkedBuffer2.equals((Object)linkedBuffer0));
      assertArrayEquals(new byte[] {(byte)86, (byte)122, (byte)0, (byte)16}, byteArray0);
      assertEquals(8, writeSession0.getSize());
      assertEquals(0, protobufOutput0.getSize());
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(512, writeSession0.nextBufferSize);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(8, ProtobufOutput.LITTLE_ENDIAN_64_SIZE);
      assertEquals(512, protobufOutput0.nextBufferSize);
      assertEquals(4, ProtobufOutput.LITTLE_ENDIAN_32_SIZE);
      assertNotNull(protobufOutput0);
      
      protobufOutput0.writeFixed64(14, 14, false);
      assertNotSame(linkedBuffer0, linkedBuffer1);
      assertNotSame(linkedBuffer0, linkedBuffer2);
      assertSame(linkedBuffer1, linkedBuffer2);
      assertNotSame(linkedBuffer1, linkedBuffer0);
      assertNotSame(linkedBuffer2, linkedBuffer0);
      assertSame(linkedBuffer2, linkedBuffer1);
      assertFalse(linkedBuffer0.equals((Object)linkedBuffer1));
      assertFalse(linkedBuffer0.equals((Object)linkedBuffer2));
      assertFalse(linkedBuffer1.equals((Object)linkedBuffer0));
      assertFalse(linkedBuffer2.equals((Object)linkedBuffer0));
      assertArrayEquals(new byte[] {(byte)86, (byte)122, (byte)0, (byte)16}, byteArray0);
      assertEquals(8, writeSession0.getSize());
      assertEquals(9, protobufOutput0.getSize());
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(512, writeSession0.nextBufferSize);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(8, ProtobufOutput.LITTLE_ENDIAN_64_SIZE);
      assertEquals(512, protobufOutput0.nextBufferSize);
      assertEquals(4, ProtobufOutput.LITTLE_ENDIAN_32_SIZE);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = ProtobufOutput.getTagAndRawVarInt64Bytes((-2929), (-2929));
      assertNotNull(byteArray0);
      
      byte[] byteArray1 = ProtobufOutput.getTagAndRawVarInt64Bytes(0, (-1270L));
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      int int0 = ProtobufOutput.encodeZigZag32((-2929));
      assertEquals(5857, int0);
      
      WriteSink writeSink0 = WriteSink.BUFFERED;
      byte[] byteArray2 = new byte[7];
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte)82;
      byteArray2[1] = (byte)106;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte) (-66);
      byteArray2[4] = (byte)0;
      byteArray2[5] = (byte)0;
      byteArray2[6] = (byte) (-121);
      LinkedBuffer linkedBuffer0 = new LinkedBuffer((byte)106);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertNotNull(linkedBuffer0);
      
      ProtobufOutput protobufOutput0 = new ProtobufOutput(linkedBuffer0);
      assertEquals(0, protobufOutput0.getSize());
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(8, ProtobufOutput.LITTLE_ENDIAN_64_SIZE);
      assertEquals(512, protobufOutput0.nextBufferSize);
      assertEquals(4, ProtobufOutput.LITTLE_ENDIAN_32_SIZE);
      assertNotNull(protobufOutput0);
      
      LinkedBuffer linkedBuffer1 = LinkedBuffer.allocate();
      assertNotSame(linkedBuffer1, linkedBuffer0);
      assertFalse(linkedBuffer1.equals((Object)linkedBuffer0));
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertNotNull(linkedBuffer1);
      
      LinkedBuffer linkedBuffer2 = writeSink0.writeByteArrayB64(byteArray2, (int) (byte)82, 0, (WriteSession) protobufOutput0, protobufOutput0.head);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertSame(linkedBuffer0, linkedBuffer2);
      assertNotSame(linkedBuffer0, linkedBuffer1);
      assertSame(linkedBuffer2, linkedBuffer0);
      assertNotSame(linkedBuffer2, linkedBuffer1);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(linkedBuffer0.equals((Object)linkedBuffer1));
      assertFalse(linkedBuffer2.equals((Object)linkedBuffer1));
      assertArrayEquals(new byte[] {(byte)82, (byte)106, (byte)0, (byte) (-66), (byte)0, (byte)0, (byte) (-121)}, byteArray2);
      assertEquals(0, protobufOutput0.getSize());
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(8, ProtobufOutput.LITTLE_ENDIAN_64_SIZE);
      assertEquals(512, protobufOutput0.nextBufferSize);
      assertEquals(4, ProtobufOutput.LITTLE_ENDIAN_32_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertNotNull(linkedBuffer2);
      
      ProtobufOutput protobufOutput1 = new ProtobufOutput(linkedBuffer2, (-886));
      assertFalse(protobufOutput1.equals((Object)protobufOutput0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(linkedBuffer0.equals((Object)linkedBuffer1));
      assertFalse(linkedBuffer2.equals((Object)linkedBuffer1));
      assertArrayEquals(new byte[] {(byte)82, (byte)106, (byte)0, (byte) (-66), (byte)0, (byte)0, (byte) (-121)}, byteArray2);
      assertEquals(0, protobufOutput1.getSize());
      assertEquals(0, protobufOutput0.getSize());
      assertEquals(8, ProtobufOutput.LITTLE_ENDIAN_64_SIZE);
      assertEquals((-886), protobufOutput1.nextBufferSize);
      assertEquals(4, ProtobufOutput.LITTLE_ENDIAN_32_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(8, ProtobufOutput.LITTLE_ENDIAN_64_SIZE);
      assertEquals(512, protobufOutput0.nextBufferSize);
      assertEquals(4, ProtobufOutput.LITTLE_ENDIAN_32_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertNotNull(protobufOutput1);
      
      protobufOutput1.writeSFixed64((byte) (-121), (byte) (-66), false);
      assertNotSame(protobufOutput1, protobufOutput0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertSame(linkedBuffer0, linkedBuffer2);
      assertNotSame(linkedBuffer0, linkedBuffer1);
      assertNotSame(protobufOutput0, protobufOutput1);
      assertSame(linkedBuffer2, linkedBuffer0);
      assertNotSame(linkedBuffer2, linkedBuffer1);
      assertFalse(protobufOutput1.equals((Object)protobufOutput0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(linkedBuffer0.equals((Object)linkedBuffer1));
      assertFalse(protobufOutput0.equals((Object)protobufOutput1));
      assertFalse(linkedBuffer2.equals((Object)linkedBuffer1));
      assertArrayEquals(new byte[] {(byte)82, (byte)106, (byte)0, (byte) (-66), (byte)0, (byte)0, (byte) (-121)}, byteArray2);
      assertEquals(13, protobufOutput1.getSize());
      assertEquals(0, protobufOutput0.getSize());
      assertEquals(8, ProtobufOutput.LITTLE_ENDIAN_64_SIZE);
      assertEquals((-886), protobufOutput1.nextBufferSize);
      assertEquals(4, ProtobufOutput.LITTLE_ENDIAN_32_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(8, ProtobufOutput.LITTLE_ENDIAN_64_SIZE);
      assertEquals(512, protobufOutput0.nextBufferSize);
      assertEquals(4, ProtobufOutput.LITTLE_ENDIAN_32_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      
      protobufOutput0.writeEnum((byte)0, 0, false);
      assertSame(linkedBuffer0, linkedBuffer2);
      assertNotSame(linkedBuffer0, linkedBuffer1);
      assertNotSame(protobufOutput0, protobufOutput1);
      assertFalse(linkedBuffer0.equals((Object)linkedBuffer1));
      assertFalse(protobufOutput0.equals((Object)protobufOutput1));
      assertEquals(2, protobufOutput0.getSize());
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(8, ProtobufOutput.LITTLE_ENDIAN_64_SIZE);
      assertEquals(512, protobufOutput0.nextBufferSize);
      assertEquals(4, ProtobufOutput.LITTLE_ENDIAN_32_SIZE);
      
      byte[] byteArray3 = ProtobufOutput.getTagAndRawVarInt32Bytes(3521, 256);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-63), (byte)27, (byte) (-128), (byte)2}, byteArray3);
      assertNotNull(byteArray3);
      
      byte[] byteArray4 = ProtobufOutput.getTagAndRawVarInt64Bytes(0, 501L);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray2);
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertArrayEquals(new byte[] {(byte)0, (byte) (-11), (byte)3}, byteArray4);
      assertNotNull(byteArray4);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      WriteSink writeSink0 = WriteSink.BUFFERED;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte)0;
      LinkedBuffer linkedBuffer0 = new LinkedBuffer((byte)0);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertNotNull(linkedBuffer0);
      
      WriteSession writeSession0 = new WriteSession(linkedBuffer0, (byte)47);
      assertEquals(0, writeSession0.getSize());
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(47, writeSession0.nextBufferSize);
      assertNotNull(writeSession0);
      
      WriteSession writeSession1 = writeSession0.clear();
      assertSame(writeSession0, writeSession1);
      assertSame(writeSession1, writeSession0);
      assertEquals(0, writeSession0.getSize());
      assertEquals(0, writeSession1.getSize());
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(47, writeSession0.nextBufferSize);
      assertEquals(47, writeSession1.nextBufferSize);
      assertNotNull(writeSession1);
      
      LinkedBuffer linkedBuffer1 = writeSink0.writeByteArray(byteArray0, writeSession1, writeSession1.head);
      assertNotSame(linkedBuffer0, linkedBuffer1);
      assertSame(writeSession0, writeSession1);
      assertSame(writeSession1, writeSession0);
      assertNotSame(linkedBuffer1, linkedBuffer0);
      assertFalse(linkedBuffer1.equals((Object)linkedBuffer0));
      assertArrayEquals(new byte[] {(byte)47, (byte) (-46), (byte)31, (byte)0}, byteArray0);
      assertEquals(4, writeSession0.getSize());
      assertEquals(4, writeSession1.getSize());
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(47, writeSession0.nextBufferSize);
      assertEquals(47, writeSession1.nextBufferSize);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertNotNull(linkedBuffer1);
      
      ProtobufOutput protobufOutput0 = new ProtobufOutput(linkedBuffer1, 3062);
      assertFalse(linkedBuffer0.equals((Object)linkedBuffer1));
      assertFalse(linkedBuffer1.equals((Object)linkedBuffer0));
      assertArrayEquals(new byte[] {(byte)47, (byte) (-46), (byte)31, (byte)0}, byteArray0);
      assertEquals(4, writeSession0.getSize());
      assertEquals(4, writeSession1.getSize());
      assertEquals(0, protobufOutput0.getSize());
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(47, writeSession0.nextBufferSize);
      assertEquals(47, writeSession1.nextBufferSize);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(8, ProtobufOutput.LITTLE_ENDIAN_64_SIZE);
      assertEquals(4, ProtobufOutput.LITTLE_ENDIAN_32_SIZE);
      assertEquals(3062, protobufOutput0.nextBufferSize);
      assertNotNull(protobufOutput0);
      
      protobufOutput0.writeInt32(0, 0, true);
      assertNotSame(linkedBuffer0, linkedBuffer1);
      assertSame(writeSession0, writeSession1);
      assertSame(writeSession1, writeSession0);
      assertNotSame(linkedBuffer1, linkedBuffer0);
      assertFalse(linkedBuffer0.equals((Object)linkedBuffer1));
      assertFalse(linkedBuffer1.equals((Object)linkedBuffer0));
      assertArrayEquals(new byte[] {(byte)47, (byte) (-46), (byte)31, (byte)0}, byteArray0);
      assertEquals(4, writeSession0.getSize());
      assertEquals(4, writeSession1.getSize());
      assertEquals(2, protobufOutput0.getSize());
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(47, writeSession0.nextBufferSize);
      assertEquals(47, writeSession1.nextBufferSize);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(8, ProtobufOutput.LITTLE_ENDIAN_64_SIZE);
      assertEquals(4, ProtobufOutput.LITTLE_ENDIAN_32_SIZE);
      assertEquals(3062, protobufOutput0.nextBufferSize);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte) (-11);
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)0;
      ProtobufOutput.writeRawVarInt32(6, byteArray0, 0);
      assertArrayEquals(new byte[] {(byte)6, (byte) (-11), (byte)127, (byte)0}, byteArray0);
      
      WriteSink writeSink0 = WriteSink.BUFFERED;
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, 4);
      assertArrayEquals(new byte[] {(byte)6, (byte) (-11), (byte)127, (byte)0}, byteArray0);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertNotNull(linkedBuffer0);
      
      ProtobufOutput protobufOutput0 = new ProtobufOutput(linkedBuffer0, 10);
      assertArrayEquals(new byte[] {(byte)6, (byte) (-11), (byte)127, (byte)0}, byteArray0);
      assertEquals(0, protobufOutput0.getSize());
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(8, ProtobufOutput.LITTLE_ENDIAN_64_SIZE);
      assertEquals(4, ProtobufOutput.LITTLE_ENDIAN_32_SIZE);
      assertEquals(10, protobufOutput0.nextBufferSize);
      assertNotNull(protobufOutput0);
      
      LinkedBuffer linkedBuffer1 = writeSink0.writeStrAscii("", protobufOutput0, linkedBuffer0);
      assertSame(linkedBuffer0, linkedBuffer1);
      assertSame(linkedBuffer1, linkedBuffer0);
      assertArrayEquals(new byte[] {(byte)6, (byte) (-11), (byte)127, (byte)0}, byteArray0);
      assertEquals(0, protobufOutput0.getSize());
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(8, ProtobufOutput.LITTLE_ENDIAN_64_SIZE);
      assertEquals(4, ProtobufOutput.LITTLE_ENDIAN_32_SIZE);
      assertEquals(10, protobufOutput0.nextBufferSize);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertNotNull(linkedBuffer1);
      
      ProtobufOutput protobufOutput1 = new ProtobufOutput(linkedBuffer1);
      assertFalse(protobufOutput1.equals((Object)protobufOutput0));
      assertArrayEquals(new byte[] {(byte)6, (byte) (-11), (byte)127, (byte)0}, byteArray0);
      assertEquals(0, protobufOutput0.getSize());
      assertEquals(0, protobufOutput1.getSize());
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(8, ProtobufOutput.LITTLE_ENDIAN_64_SIZE);
      assertEquals(4, ProtobufOutput.LITTLE_ENDIAN_32_SIZE);
      assertEquals(10, protobufOutput0.nextBufferSize);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(4, ProtobufOutput.LITTLE_ENDIAN_32_SIZE);
      assertEquals(8, ProtobufOutput.LITTLE_ENDIAN_64_SIZE);
      assertEquals(512, protobufOutput1.nextBufferSize);
      assertNotNull(protobufOutput1);
      
      // Undeclared exception!
      try { 
        protobufOutput1.writeByteRange(true, (byte)127, byteArray0, (-1133), (byte)127, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)106;
      // Undeclared exception!
      try { 
        ProtobufOutput.writeRawLittleEndian32(512, byteArray0, 512);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // buffer capacity not enough.
         //
         verifyException("io.protostuff.ProtobufOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = ProtobufOutput.computeRawVarint32Size(5);
      assertEquals(1, int0);
      
      int int1 = ProtobufOutput.encodeZigZag32((-134));
      assertFalse(int1 == int0);
      assertEquals(267, int1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = ProtobufOutput.getTagAndRawVarInt32Bytes(1073741824, 2147);
      assertArrayEquals(new byte[] {(byte) (-128), (byte) (-128), (byte) (-128), (byte) (-128), (byte)4, (byte) (-29), (byte)16}, byteArray0);
      assertNotNull(byteArray0);
      
      WriteSink writeSink0 = WriteSink.BUFFERED;
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, 0, 1073741824);
      assertArrayEquals(new byte[] {(byte) (-128), (byte) (-128), (byte) (-128), (byte) (-128), (byte)4, (byte) (-29), (byte)16}, byteArray0);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertNotNull(linkedBuffer0);
      
      WriteSession writeSession0 = new WriteSession(linkedBuffer0);
      assertArrayEquals(new byte[] {(byte) (-128), (byte) (-128), (byte) (-128), (byte) (-128), (byte)4, (byte) (-29), (byte)16}, byteArray0);
      assertEquals(0, writeSession0.getSize());
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, writeSession0.nextBufferSize);
      assertNotNull(writeSession0);
      
      LinkedBuffer linkedBuffer1 = writeSink0.writeStrFromLong(0L, writeSession0, writeSession0.head);
      assertNotSame(linkedBuffer0, linkedBuffer1);
      assertNotSame(linkedBuffer1, linkedBuffer0);
      assertFalse(linkedBuffer1.equals((Object)linkedBuffer0));
      assertArrayEquals(new byte[] {(byte) (-128), (byte) (-128), (byte) (-128), (byte) (-128), (byte)4, (byte) (-29), (byte)16}, byteArray0);
      assertEquals(1, writeSession0.getSize());
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, writeSession0.nextBufferSize);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertNotNull(linkedBuffer1);
      
      ProtobufOutput protobufOutput0 = new ProtobufOutput(linkedBuffer1, 256);
      assertFalse(linkedBuffer0.equals((Object)linkedBuffer1));
      assertFalse(linkedBuffer1.equals((Object)linkedBuffer0));
      assertArrayEquals(new byte[] {(byte) (-128), (byte) (-128), (byte) (-128), (byte) (-128), (byte)4, (byte) (-29), (byte)16}, byteArray0);
      assertEquals(1, writeSession0.getSize());
      assertEquals(0, protobufOutput0.getSize());
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, writeSession0.nextBufferSize);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(4, ProtobufOutput.LITTLE_ENDIAN_32_SIZE);
      assertEquals(8, ProtobufOutput.LITTLE_ENDIAN_64_SIZE);
      assertEquals(256, protobufOutput0.nextBufferSize);
      assertNotNull(protobufOutput0);
      
      ProtobufOutput protobufOutput1 = protobufOutput0.clear();
      assertNotSame(linkedBuffer0, linkedBuffer1);
      assertNotSame(linkedBuffer1, linkedBuffer0);
      assertSame(protobufOutput0, protobufOutput1);
      assertSame(protobufOutput1, protobufOutput0);
      assertFalse(linkedBuffer0.equals((Object)linkedBuffer1));
      assertFalse(linkedBuffer1.equals((Object)linkedBuffer0));
      assertArrayEquals(new byte[] {(byte) (-128), (byte) (-128), (byte) (-128), (byte) (-128), (byte)4, (byte) (-29), (byte)16}, byteArray0);
      assertEquals(1, writeSession0.getSize());
      assertEquals(0, protobufOutput0.getSize());
      assertEquals(0, protobufOutput1.getSize());
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, writeSession0.nextBufferSize);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(4, ProtobufOutput.LITTLE_ENDIAN_32_SIZE);
      assertEquals(8, ProtobufOutput.LITTLE_ENDIAN_64_SIZE);
      assertEquals(256, protobufOutput0.nextBufferSize);
      assertEquals(4, ProtobufOutput.LITTLE_ENDIAN_32_SIZE);
      assertEquals(8, ProtobufOutput.LITTLE_ENDIAN_64_SIZE);
      assertEquals(256, protobufOutput1.nextBufferSize);
      assertNotNull(protobufOutput1);
      
      protobufOutput1.writeInt32((-2463), 1073741824, true);
      assertNotSame(linkedBuffer0, linkedBuffer1);
      assertNotSame(linkedBuffer1, linkedBuffer0);
      assertSame(protobufOutput0, protobufOutput1);
      assertSame(protobufOutput1, protobufOutput0);
      assertFalse(linkedBuffer0.equals((Object)linkedBuffer1));
      assertFalse(linkedBuffer1.equals((Object)linkedBuffer0));
      assertArrayEquals(new byte[] {(byte) (-128), (byte) (-128), (byte) (-128), (byte) (-128), (byte)4, (byte) (-29), (byte)16}, byteArray0);
      assertEquals(1, writeSession0.getSize());
      assertEquals(10, protobufOutput0.getSize());
      assertEquals(10, protobufOutput1.getSize());
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, writeSession0.nextBufferSize);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(4, ProtobufOutput.LITTLE_ENDIAN_32_SIZE);
      assertEquals(8, ProtobufOutput.LITTLE_ENDIAN_64_SIZE);
      assertEquals(256, protobufOutput0.nextBufferSize);
      assertEquals(4, ProtobufOutput.LITTLE_ENDIAN_32_SIZE);
      assertEquals(8, ProtobufOutput.LITTLE_ENDIAN_64_SIZE);
      assertEquals(256, protobufOutput1.nextBufferSize);
      
      protobufOutput0.writeSInt32(1438, 1438, true);
      assertNotSame(linkedBuffer0, linkedBuffer1);
      assertNotSame(linkedBuffer1, linkedBuffer0);
      assertSame(protobufOutput0, protobufOutput1);
      assertFalse(linkedBuffer0.equals((Object)linkedBuffer1));
      assertFalse(linkedBuffer1.equals((Object)linkedBuffer0));
      assertArrayEquals(new byte[] {(byte) (-128), (byte) (-128), (byte) (-128), (byte) (-128), (byte)4, (byte) (-29), (byte)16}, byteArray0);
      assertEquals(1, writeSession0.getSize());
      assertEquals(14, protobufOutput0.getSize());
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, writeSession0.nextBufferSize);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(4, ProtobufOutput.LITTLE_ENDIAN_32_SIZE);
      assertEquals(8, ProtobufOutput.LITTLE_ENDIAN_64_SIZE);
      assertEquals(256, protobufOutput0.nextBufferSize);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = ProtobufOutput.getTagAndRawVarInt32Bytes(7, 1);
      assertArrayEquals(new byte[] {(byte)7, (byte)1}, byteArray0);
      assertNotNull(byteArray0);
      
      // Undeclared exception!
      try { 
        ProtobufOutput.writeRawVarInt32((-702), byteArray0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("io.protostuff.ProtobufOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = ProtobufOutput.getTagAndRawVarInt32Bytes(241, 241);
      assertArrayEquals(new byte[] {(byte) (-15), (byte)1, (byte) (-15), (byte)1}, byteArray0);
      assertNotNull(byteArray0);
      
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(241);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertNotNull(linkedBuffer0);
      
      ProtobufOutput protobufOutput0 = new ProtobufOutput(linkedBuffer0, 0);
      assertEquals(0, protobufOutput0.getSize());
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(4, ProtobufOutput.LITTLE_ENDIAN_32_SIZE);
      assertEquals(0, protobufOutput0.nextBufferSize);
      assertEquals(8, ProtobufOutput.LITTLE_ENDIAN_64_SIZE);
      assertNotNull(protobufOutput0);
      
      ProtobufOutput protobufOutput1 = protobufOutput0.clear();
      assertSame(protobufOutput0, protobufOutput1);
      assertSame(protobufOutput1, protobufOutput0);
      assertEquals(0, protobufOutput0.getSize());
      assertEquals(0, protobufOutput1.getSize());
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(4, ProtobufOutput.LITTLE_ENDIAN_32_SIZE);
      assertEquals(0, protobufOutput0.nextBufferSize);
      assertEquals(8, ProtobufOutput.LITTLE_ENDIAN_64_SIZE);
      assertEquals(8, ProtobufOutput.LITTLE_ENDIAN_64_SIZE);
      assertEquals(4, ProtobufOutput.LITTLE_ENDIAN_32_SIZE);
      assertEquals(0, protobufOutput1.nextBufferSize);
      assertNotNull(protobufOutput1);
      
      LinkedBuffer linkedBuffer1 = ProtobufOutput.writeTagAndByteArray(0, byteArray1, 10, 0, protobufOutput1, protobufOutput1.head);
      assertNotSame(byteArray1, byteArray0);
      assertSame(linkedBuffer0, linkedBuffer1);
      assertSame(protobufOutput0, protobufOutput1);
      assertSame(protobufOutput1, protobufOutput0);
      assertSame(linkedBuffer1, linkedBuffer0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(2, protobufOutput0.getSize());
      assertEquals(2, protobufOutput1.getSize());
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(4, ProtobufOutput.LITTLE_ENDIAN_32_SIZE);
      assertEquals(0, protobufOutput0.nextBufferSize);
      assertEquals(8, ProtobufOutput.LITTLE_ENDIAN_64_SIZE);
      assertEquals(8, ProtobufOutput.LITTLE_ENDIAN_64_SIZE);
      assertEquals(4, ProtobufOutput.LITTLE_ENDIAN_32_SIZE);
      assertEquals(0, protobufOutput1.nextBufferSize);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertNotNull(linkedBuffer1);
  }


  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = ProtobufOutput.getRawVarInt32Bytes(0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(byteArray0);
      
      int int0 = ProtobufOutput.computeRawVarint64Size(0);
      assertEquals(1, int0);
      
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(0);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertNotNull(linkedBuffer0);
      
      ProtobufOutput protobufOutput0 = new ProtobufOutput(linkedBuffer0, 512);
      assertEquals(0, protobufOutput0.getSize());
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(4, ProtobufOutput.LITTLE_ENDIAN_32_SIZE);
      assertEquals(512, protobufOutput0.nextBufferSize);
      assertEquals(8, ProtobufOutput.LITTLE_ENDIAN_64_SIZE);
      assertNotNull(protobufOutput0);
      
      ProtobufOutput protobufOutput1 = protobufOutput0.clear();
      assertSame(protobufOutput0, protobufOutput1);
      assertSame(protobufOutput1, protobufOutput0);
      assertEquals(0, protobufOutput0.getSize());
      assertEquals(0, protobufOutput1.getSize());
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(4, ProtobufOutput.LITTLE_ENDIAN_32_SIZE);
      assertEquals(512, protobufOutput0.nextBufferSize);
      assertEquals(8, ProtobufOutput.LITTLE_ENDIAN_64_SIZE);
      assertEquals(8, ProtobufOutput.LITTLE_ENDIAN_64_SIZE);
      assertEquals(4, ProtobufOutput.LITTLE_ENDIAN_32_SIZE);
      assertEquals(512, protobufOutput1.nextBufferSize);
      assertNotNull(protobufOutput1);
      
      ProtobufOutput protobufOutput2 = new ProtobufOutput(protobufOutput0.head);
      assertFalse(protobufOutput2.equals((Object)protobufOutput1));
      assertFalse(protobufOutput2.equals((Object)protobufOutput0));
      assertEquals(0, protobufOutput0.getSize());
      assertEquals(0, protobufOutput2.getSize());
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(4, ProtobufOutput.LITTLE_ENDIAN_32_SIZE);
      assertEquals(512, protobufOutput0.nextBufferSize);
      assertEquals(8, ProtobufOutput.LITTLE_ENDIAN_64_SIZE);
      assertEquals(4, ProtobufOutput.LITTLE_ENDIAN_32_SIZE);
      assertEquals(8, ProtobufOutput.LITTLE_ENDIAN_64_SIZE);
      assertEquals(512, protobufOutput2.nextBufferSize);
      assertNotNull(protobufOutput2);
      
      protobufOutput2.writeFixed32(3898, 67108864, true);
      assertNotSame(protobufOutput0, protobufOutput2);
      assertSame(protobufOutput0, protobufOutput1);
      assertNotSame(protobufOutput2, protobufOutput1);
      assertNotSame(protobufOutput2, protobufOutput0);
      assertFalse(protobufOutput0.equals((Object)protobufOutput2));
      assertFalse(protobufOutput2.equals((Object)protobufOutput1));
      assertFalse(protobufOutput2.equals((Object)protobufOutput0));
      assertEquals(0, protobufOutput0.getSize());
      assertEquals(7, protobufOutput2.getSize());
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(4, ProtobufOutput.LITTLE_ENDIAN_32_SIZE);
      assertEquals(512, protobufOutput0.nextBufferSize);
      assertEquals(8, ProtobufOutput.LITTLE_ENDIAN_64_SIZE);
      assertEquals(4, ProtobufOutput.LITTLE_ENDIAN_32_SIZE);
      assertEquals(8, ProtobufOutput.LITTLE_ENDIAN_64_SIZE);
      assertEquals(512, protobufOutput2.nextBufferSize);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      assertNotNull(dataOutputStream0);
      
      LowCopyProtostuffOutput lowCopyProtostuffOutput0 = new LowCopyProtostuffOutput();
      assertNotNull(lowCopyProtostuffOutput0);
      
      Schema<LowCopyProtostuffOutput> schema0 = (Schema<LowCopyProtostuffOutput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      protobufOutput0.writeObject(512, lowCopyProtostuffOutput0, schema0, false);
      assertNotSame(protobufOutput0, protobufOutput2);
      assertSame(protobufOutput0, protobufOutput1);
      assertFalse(protobufOutput0.equals((Object)protobufOutput2));
      assertEquals(3, protobufOutput0.getSize());
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(4, ProtobufOutput.LITTLE_ENDIAN_32_SIZE);
      assertEquals(512, protobufOutput0.nextBufferSize);
      assertEquals(8, ProtobufOutput.LITTLE_ENDIAN_64_SIZE);
      
      // Undeclared exception!
      try { 
        ProtobufOutput.writeRawVarInt32Bytes((DataOutput) dataOutputStream0, 1624);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = ProtobufOutput.getTagAndRawVarInt64Bytes((-1115), (-1115));
      assertNotNull(byteArray0);
      
      byte[] byteArray1 = ProtobufOutput.getTagAndRawLittleEndian32Bytes((-1115), (-1115));
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-91), (byte) (-9), (byte) (-1), (byte) (-1), (byte)15, (byte) (-91), (byte) (-5), (byte) (-1), (byte) (-1)}, byteArray1);
      assertNotNull(byteArray1);
      
      byte[] byteArray2 = ProtobufOutput.getTagAndRawVarInt64Bytes(5, 5);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)5, (byte)5}, byteArray2);
      assertNotNull(byteArray2);
      
      byte[] byteArray3 = ProtobufOutput.getTagAndRawLittleEndian32Bytes(5, 2048);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertArrayEquals(new byte[] {(byte)5, (byte)0, (byte)8, (byte)0, (byte)0}, byteArray3);
      assertNotNull(byteArray3);
      
      byte[] byteArray4 = ProtobufOutput.getTagAndRawVarInt64Bytes((-1115), 5);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray2);
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertArrayEquals(new byte[] {(byte) (-91), (byte) (-9), (byte) (-1), (byte) (-1), (byte)15, (byte)5}, byteArray4);
      assertNotNull(byteArray4);
      
      WriteSink writeSink0 = WriteSink.BUFFERED;
      LinkedBuffer linkedBuffer0 = new LinkedBuffer((byte)56);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertNotNull(linkedBuffer0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("~");
      assertNotNull(mockPrintStream0);
      
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0, mockPrintStream0, (WriteSession.FlushHandler) null, (-1115));
      assertEquals(0, protostuffOutput0.getSize());
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals((-1115), protostuffOutput0.nextBufferSize);
      assertNotNull(protostuffOutput0);
      
      LinkedBuffer linkedBuffer1 = writeSink0.writeByte((byte)56, protostuffOutput0, linkedBuffer0);
      assertSame(linkedBuffer0, linkedBuffer1);
      assertSame(linkedBuffer1, linkedBuffer0);
      assertEquals(1, protostuffOutput0.getSize());
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals((-1115), protostuffOutput0.nextBufferSize);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertNotNull(linkedBuffer1);
      
      ProtostuffOutput protostuffOutput1 = new ProtostuffOutput(linkedBuffer1, mockPrintStream0);
      assertFalse(protostuffOutput1.equals((Object)protostuffOutput0));
      assertEquals(1, protostuffOutput0.getSize());
      assertEquals(0, protostuffOutput1.getSize());
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals((-1115), protostuffOutput0.nextBufferSize);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, protostuffOutput1.nextBufferSize);
      assertNotNull(protostuffOutput1);
      
      LinkedBuffer linkedBuffer2 = ProtobufOutput.writeTagAndByteArray((-1115), byteArray1, 256, 901, protostuffOutput1, linkedBuffer0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(linkedBuffer0, linkedBuffer2);
      assertSame(linkedBuffer0, linkedBuffer1);
      assertNotSame(protostuffOutput0, protostuffOutput1);
      assertSame(linkedBuffer1, linkedBuffer0);
      assertNotSame(linkedBuffer1, linkedBuffer2);
      assertNotSame(protostuffOutput1, protostuffOutput0);
      assertNotSame(linkedBuffer2, linkedBuffer1);
      assertNotSame(linkedBuffer2, linkedBuffer0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray4));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(protostuffOutput0.equals((Object)protostuffOutput1));
      assertFalse(protostuffOutput1.equals((Object)protostuffOutput0));
      assertFalse(linkedBuffer2.equals((Object)linkedBuffer1));
      assertFalse(linkedBuffer2.equals((Object)linkedBuffer0));
      assertArrayEquals(new byte[] {(byte) (-91), (byte) (-9), (byte) (-1), (byte) (-1), (byte)15, (byte) (-91), (byte) (-5), (byte) (-1), (byte) (-1)}, byteArray1);
      assertEquals(1, protostuffOutput0.getSize());
      assertEquals(908, protostuffOutput1.getSize());
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals((-1115), protostuffOutput0.nextBufferSize);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, protostuffOutput1.nextBufferSize);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertNotNull(linkedBuffer2);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      int int0 = ProtobufOutput.computeRawVarint64Size((-50L));
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)53;
      byteArray0[5] = (byte) (-57);
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)63;
      ProtobufOutput.writeRawVarInt32(5760, byteArray0, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte) (-128), (byte)45, (byte)27, (byte)8, (byte)53, (byte) (-57), (byte)8, (byte)0, (byte)63}, byteArray0);
      
      int int0 = ProtobufOutput.computeRawVarint64Size(2147483647L);
      assertEquals(5, int0);
      
      byte[] byteArray1 = ProtobufOutput.getRawVarInt32Bytes((byte)0);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertNotNull(byteArray1);
      
      LinkedBuffer linkedBuffer0 = null;
      WriteSession writeSession0 = new WriteSession((LinkedBuffer) null, (byte) (-128));
      assertEquals(0, writeSession0.getSize());
      assertEquals((-128), writeSession0.nextBufferSize);
      assertNotNull(writeSession0);
      
      // Undeclared exception!
      try { 
        ProtobufOutput.writeTagAndRawVarInt64((byte)8, (byte)0, writeSession0, (LinkedBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.ProtobufOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = ProtobufOutput.getTagAndRawVarInt64Bytes((-1152), (-1152));
      assertNotNull(byteArray0);
      
      byte[] byteArray1 = ProtobufOutput.getTagAndRawLittleEndian64Bytes((-1152), (-1152));
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      byte[] byteArray2 = ProtobufOutput.getTagAndRawVarInt64Bytes(5, 5);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)5, (byte)5}, byteArray2);
      assertNotNull(byteArray2);
      
      byte[] byteArray3 = ProtobufOutput.getTagAndRawLittleEndian32Bytes(8, 2048);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertArrayEquals(new byte[] {(byte)8, (byte)0, (byte)8, (byte)0, (byte)0}, byteArray3);
      assertNotNull(byteArray3);
      
      byte[] byteArray4 = ProtobufOutput.getTagAndRawVarInt64Bytes(8, 5);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray0);
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)8, (byte)5}, byteArray4);
      assertNotNull(byteArray4);
      
      WriteSink writeSink0 = WriteSink.BUFFERED;
      LinkedBuffer linkedBuffer0 = new LinkedBuffer((byte)56);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertNotNull(linkedBuffer0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("~");
      assertNotNull(mockPrintStream0);
      
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0);
      assertEquals(0, protostuffOutput0.getSize());
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, protostuffOutput0.nextBufferSize);
      assertNotNull(protostuffOutput0);
      
      LinkedBuffer linkedBuffer1 = writeSink0.writeByte((byte)56, protostuffOutput0, linkedBuffer0);
      assertSame(linkedBuffer0, linkedBuffer1);
      assertSame(linkedBuffer1, linkedBuffer0);
      assertEquals(1, protostuffOutput0.getSize());
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, protostuffOutput0.nextBufferSize);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertNotNull(linkedBuffer1);
      
      ProtostuffOutput protostuffOutput1 = new ProtostuffOutput(linkedBuffer1, mockPrintStream0);
      assertFalse(protostuffOutput1.equals((Object)protostuffOutput0));
      assertEquals(1, protostuffOutput0.getSize());
      assertEquals(0, protostuffOutput1.getSize());
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, protostuffOutput0.nextBufferSize);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(512, protostuffOutput1.nextBufferSize);
      assertNotNull(protostuffOutput1);
      
      LinkedBuffer linkedBuffer2 = ProtobufOutput.writeRawVarInt32((-1152), (WriteSession) protostuffOutput1, linkedBuffer1);
      assertSame(linkedBuffer0, linkedBuffer1);
      assertSame(linkedBuffer0, linkedBuffer2);
      assertNotSame(protostuffOutput0, protostuffOutput1);
      assertSame(linkedBuffer1, linkedBuffer0);
      assertSame(linkedBuffer1, linkedBuffer2);
      assertNotSame(protostuffOutput1, protostuffOutput0);
      assertSame(linkedBuffer2, linkedBuffer1);
      assertSame(linkedBuffer2, linkedBuffer0);
      assertFalse(protostuffOutput0.equals((Object)protostuffOutput1));
      assertFalse(protostuffOutput1.equals((Object)protostuffOutput0));
      assertEquals(1, protostuffOutput0.getSize());
      assertEquals(5, protostuffOutput1.getSize());
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, protostuffOutput0.nextBufferSize);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(512, protostuffOutput1.nextBufferSize);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertNotNull(linkedBuffer2);
      
      LinkedBuffer linkedBuffer3 = ProtobufOutput.writeTagAndRawLittleEndian32(7, (-2859), protostuffOutput0, linkedBuffer0);
      assertSame(linkedBuffer0, linkedBuffer1);
      assertSame(linkedBuffer0, linkedBuffer2);
      assertSame(linkedBuffer0, linkedBuffer3);
      assertNotSame(protostuffOutput0, protostuffOutput1);
      assertSame(linkedBuffer3, linkedBuffer0);
      assertSame(linkedBuffer3, linkedBuffer1);
      assertSame(linkedBuffer3, linkedBuffer2);
      assertFalse(protostuffOutput0.equals((Object)protostuffOutput1));
      assertEquals(6, protostuffOutput0.getSize());
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, protostuffOutput0.nextBufferSize);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertNotNull(linkedBuffer3);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-66);
      byteArray0[2] = (byte)1;
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray1, (byte)0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertNotNull(linkedBuffer0);
      
      LinkedBuffer linkedBuffer1 = new LinkedBuffer(byteArray0, (byte)0, 14, linkedBuffer0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(linkedBuffer1.equals((Object)linkedBuffer0));
      assertArrayEquals(new byte[] {(byte) (-66), (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertNotNull(linkedBuffer1);
      
      WriteSession writeSession0 = new WriteSession(linkedBuffer1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(linkedBuffer0.equals((Object)linkedBuffer1));
      assertFalse(linkedBuffer1.equals((Object)linkedBuffer0));
      assertArrayEquals(new byte[] {(byte) (-66), (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, writeSession0.getSize());
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, writeSession0.nextBufferSize);
      assertNotNull(writeSession0);
      
      ProtobufOutput protobufOutput0 = new ProtobufOutput(linkedBuffer0, 512);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(linkedBuffer0.equals((Object)linkedBuffer1));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, protobufOutput0.getSize());
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, protobufOutput0.nextBufferSize);
      assertEquals(4, ProtobufOutput.LITTLE_ENDIAN_32_SIZE);
      assertEquals(8, ProtobufOutput.LITTLE_ENDIAN_64_SIZE);
      assertNotNull(protobufOutput0);
      
      ProtobufOutput protobufOutput1 = protobufOutput0.clear();
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(linkedBuffer0, linkedBuffer1);
      assertSame(protobufOutput0, protobufOutput1);
      assertSame(protobufOutput1, protobufOutput0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(linkedBuffer0.equals((Object)linkedBuffer1));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, protobufOutput0.getSize());
      assertEquals(0, protobufOutput1.getSize());
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, protobufOutput0.nextBufferSize);
      assertEquals(4, ProtobufOutput.LITTLE_ENDIAN_32_SIZE);
      assertEquals(8, ProtobufOutput.LITTLE_ENDIAN_64_SIZE);
      assertEquals(4, ProtobufOutput.LITTLE_ENDIAN_32_SIZE);
      assertEquals(8, ProtobufOutput.LITTLE_ENDIAN_64_SIZE);
      assertEquals(512, protobufOutput1.nextBufferSize);
      assertNotNull(protobufOutput1);
      
      protobufOutput1.writeUInt64(512, 8, false);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(linkedBuffer0, linkedBuffer1);
      assertSame(protobufOutput0, protobufOutput1);
      assertSame(protobufOutput1, protobufOutput0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(linkedBuffer0.equals((Object)linkedBuffer1));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(3, protobufOutput0.getSize());
      assertEquals(3, protobufOutput1.getSize());
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, protobufOutput0.nextBufferSize);
      assertEquals(4, ProtobufOutput.LITTLE_ENDIAN_32_SIZE);
      assertEquals(8, ProtobufOutput.LITTLE_ENDIAN_64_SIZE);
      assertEquals(4, ProtobufOutput.LITTLE_ENDIAN_32_SIZE);
      assertEquals(8, ProtobufOutput.LITTLE_ENDIAN_64_SIZE);
      assertEquals(512, protobufOutput1.nextBufferSize);
      
      protobufOutput1.writeSInt32(256, 6, false);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(linkedBuffer0, linkedBuffer1);
      assertSame(protobufOutput0, protobufOutput1);
      assertSame(protobufOutput1, protobufOutput0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(linkedBuffer0.equals((Object)linkedBuffer1));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(6, protobufOutput0.getSize());
      assertEquals(6, protobufOutput1.getSize());
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, protobufOutput0.nextBufferSize);
      assertEquals(4, ProtobufOutput.LITTLE_ENDIAN_32_SIZE);
      assertEquals(8, ProtobufOutput.LITTLE_ENDIAN_64_SIZE);
      assertEquals(4, ProtobufOutput.LITTLE_ENDIAN_32_SIZE);
      assertEquals(8, ProtobufOutput.LITTLE_ENDIAN_64_SIZE);
      assertEquals(512, protobufOutput1.nextBufferSize);
      
      byte[] byteArray2 = ProtobufOutput.getTagAndRawVarInt32Bytes(512, (byte)0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte) (-128), (byte)4, (byte)0}, byteArray2);
      assertNotNull(byteArray2);
      
      byte[] byteArray3 = ProtobufOutput.getTagAndRawLittleEndian64Bytes((-268435456), (-268435456));
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertNotNull(byteArray3);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(byteArrayOutputStream0);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      assertEquals(4, byteArrayOutputStream0.size());
      assertEquals("\uFFFD\uFFFD\u0000\u0005", byteArrayOutputStream0.toString());
      assertNotNull(objectOutputStream0);
      
      objectOutputStream0.writeByte((-48));
      assertEquals(4, byteArrayOutputStream0.size());
      assertEquals("\uFFFD\uFFFD\u0000\u0005", byteArrayOutputStream0.toString());
      
      byteArrayOutputStream0.writeTo(objectOutputStream0);
      assertEquals(4, byteArrayOutputStream0.size());
      assertEquals("\uFFFD\uFFFD\u0000\u0005", byteArrayOutputStream0.toString());
      
      objectOutputStream0.writeChars("$VALUES");
      assertEquals(4, byteArrayOutputStream0.size());
      assertEquals("\uFFFD\uFFFD\u0000\u0005", byteArrayOutputStream0.toString());
      
      ProtobufOutput.writeRawVarInt32Bytes((DataOutput) objectOutputStream0, 1073741824);
      assertEquals(4, byteArrayOutputStream0.size());
      assertEquals("\uFFFD\uFFFD\u0000\u0005", byteArrayOutputStream0.toString());
      
      WriteSink writeSink0 = WriteSink.BUFFERED;
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(0);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertNotNull(linkedBuffer0);
      
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0, objectOutputStream0);
      assertEquals(4, byteArrayOutputStream0.size());
      assertEquals("\uFFFD\uFFFD\u0000\u0005", byteArrayOutputStream0.toString());
      assertEquals(0, protostuffOutput0.getSize());
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(512, protostuffOutput0.nextBufferSize);
      assertNotNull(protostuffOutput0);
      
      LinkedBuffer linkedBuffer1 = writeSink0.writeStrFromLong((-48), protostuffOutput0, protostuffOutput0.head);
      assertNotSame(linkedBuffer0, linkedBuffer1);
      assertNotSame(linkedBuffer1, linkedBuffer0);
      assertFalse(linkedBuffer1.equals((Object)linkedBuffer0));
      assertEquals(4, byteArrayOutputStream0.size());
      assertEquals("\uFFFD\uFFFD\u0000\u0005", byteArrayOutputStream0.toString());
      assertEquals(3, protostuffOutput0.getSize());
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(512, protostuffOutput0.nextBufferSize);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertNotNull(linkedBuffer1);
      
      ProtobufOutput protobufOutput0 = new ProtobufOutput(linkedBuffer1, (-1145));
      assertFalse(linkedBuffer0.equals((Object)linkedBuffer1));
      assertFalse(linkedBuffer1.equals((Object)linkedBuffer0));
      assertEquals(4, byteArrayOutputStream0.size());
      assertEquals("\uFFFD\uFFFD\u0000\u0005", byteArrayOutputStream0.toString());
      assertEquals(3, protostuffOutput0.getSize());
      assertEquals(0, protobufOutput0.getSize());
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals(512, protostuffOutput0.nextBufferSize);
      assertEquals(256, LinkedBuffer.MIN_BUFFER_SIZE);
      assertEquals(512, LinkedBuffer.DEFAULT_BUFFER_SIZE);
      assertEquals((-1145), protobufOutput0.nextBufferSize);
      assertEquals(8, ProtobufOutput.LITTLE_ENDIAN_64_SIZE);
      assertEquals(4, ProtobufOutput.LITTLE_ENDIAN_32_SIZE);
      assertNotNull(protobufOutput0);
      
      // Undeclared exception!
      try { 
        ProtobufOutput.writeRawVarInt32Bytes((OutputStream) null, (-48));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.ProtobufOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ProtobufOutput.encodeZigZag64(4901);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(4);
      ProtobufOutput.writeRawVarInt32Bytes((OutputStream) byteArrayOutputStream0, 1630);
      assertEquals(2, byteArrayOutputStream0.size());
      assertEquals("\uFFFD\f", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ProtobufOutput protobufOutput0 = new ProtobufOutput((LinkedBuffer) null);
      // Undeclared exception!
      try { 
        protobufOutput0.writeBool((-5228), false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.ProtobufOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedBuffer linkedBuffer0 = LinkedBuffer.allocate();
      byte[] byteArray0 = ProtobufOutput.getTagAndRawLittleEndian64Bytes(89478486, (-34359738368L));
      ProtobufOutput protobufOutput0 = new ProtobufOutput(linkedBuffer0);
      ByteString byteString0 = ByteString.wrap(byteArray0);
      ByteBuffer byteBuffer0 = byteString0.asReadOnlyByteBuffer();
      // Undeclared exception!
      try { 
        protobufOutput0.writeBytes(89478486, byteBuffer0, false);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = (-1260);
      byte[] byteArray0 = ProtobufOutput.getRawVarInt32Bytes((-1260));
      int int1 = 696;
      WriteSink writeSink0 = WriteSink.BUFFERED;
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(16);
      LinkedBuffer linkedBuffer1 = new LinkedBuffer(byteArray0, (-2732), linkedBuffer0);
      LinkedBuffer linkedBuffer2 = writeSink0.writeStrUTF8("", (WriteSession) null, linkedBuffer1);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer2);
      ProtostuffOutput protostuffOutput1 = protostuffOutput0.clear();
      LinkedBuffer linkedBuffer3 = LinkedBuffer.allocate();
      WriteSink writeSink1 = WriteSink.STREAMED;
      ProtobufOutput.writeTagAndRawLittleEndian64(890, 255L, protostuffOutput1, linkedBuffer3);
      // Undeclared exception!
      try { 
        writeSink1.writeByteArray(byteArray0, (WriteSession) null, protostuffOutput1.head);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.WriteSink$2", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = (-1242);
      byte[] byteArray0 = ProtobufOutput.getRawVarInt32Bytes((-1242));
      int int1 = 696;
      WriteSink writeSink0 = WriteSink.STREAMED;
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(16);
      LinkedBuffer linkedBuffer1 = new LinkedBuffer(byteArray0, (-2732), linkedBuffer0);
      LinkedBuffer linkedBuffer2 = writeSink0.writeStrUTF8("", (WriteSession) null, linkedBuffer1);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer2);
      ProtostuffOutput protostuffOutput1 = protostuffOutput0.clear();
      WriteSink writeSink1 = WriteSink.STREAMED;
      // Undeclared exception!
      try { 
        writeSink1.writeByteArray(byteArray0, (WriteSession) null, protostuffOutput1.head);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.WriteSink$2", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      WriteSink writeSink0 = WriteSink.STREAMED;
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(731);
      ProtobufOutput protobufOutput0 = new ProtobufOutput(linkedBuffer0);
      LinkedBuffer linkedBuffer1 = writeSink0.writeInt16((-16384), protobufOutput0, protobufOutput0.head);
      ProtobufOutput protobufOutput1 = new ProtobufOutput(linkedBuffer1, 8);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)96;
      LinkedBuffer linkedBuffer2 = new LinkedBuffer(byteArray0, 67, 256);
      linkedBuffer1.next = linkedBuffer2;
      protobufOutput1.writeInt32(256, (-144), true);
      protobufOutput1.writeInt64(731, (-144), true);
      protobufOutput1.writeEnum(731, 56, false);
      byte[] byteArray1 = ProtobufOutput.getTagAndRawLittleEndian32Bytes((-16384), 512);
      ProtobufOutput.encodeZigZag32(256);
      protobufOutput1.writeByteArray((-144), byteArray1, true);
      Schema<CodedInput> schema0 = (Schema<CodedInput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      protobufOutput0.writeObject(8, (CodedInput) null, schema0, true);
      ProtobufOutput.computeRawVarint64Size((-9223372036854775808L));
      ProtobufOutput.writeTagAndRawLittleEndian32(731, (-1952), protobufOutput1, linkedBuffer2);
      // Undeclared exception!
      try { 
        ProtobufOutput.writeTagAndRawVarInt64(1698, (-144), protobufOutput0, (LinkedBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.ProtobufOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = (-19);
      ProtobufOutput.getTagAndRawVarInt32Bytes((-19), (-4046));
      ProtobufOutput protobufOutput0 = new ProtobufOutput((LinkedBuffer) null);
      ProtobufOutput protobufOutput1 = new ProtobufOutput((LinkedBuffer) null, (-19));
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        protobufOutput0.writeSInt64((-19), 8, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.ProtobufOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = ProtobufOutput.getTagAndRawLittleEndian64Bytes(0, 0L);
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, 0);
      LinkedBuffer linkedBuffer1 = new LinkedBuffer(byteArray0, 0, linkedBuffer0);
      MockFile mockFile0 = new MockFile("");
      LinkedBuffer.allocate();
      linkedBuffer1.clear();
      long long0 = (-1L);
      // Undeclared exception!
      try { 
        ProtobufOutput.writeRawLittleEndian64((-1L), byteArray0, 31);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // buffer capacity not enough.
         //
         verifyException("io.protostuff.ProtobufOutput", e);
      }
  }
}
