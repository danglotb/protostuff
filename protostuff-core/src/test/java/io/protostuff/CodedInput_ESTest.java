/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 20 09:51:53 GMT 2017
 */

package io.protostuff;

import org.evosuite.shaded.org.mockito.Matchers;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.protostuff.CodedInput;
import io.protostuff.LinkBuffer;
import io.protostuff.LowCopyProtobufOutput;
import io.protostuff.LowCopyProtostuffOutput;
import io.protostuff.Schema;
import java.io.ByteArrayInputStream;
import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.SequenceInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CodedInput_ESTest extends CodedInput_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)5;
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0);
      codedInput0.readByteArray();
      assertEquals(6, codedInput0.getTotalBytesRead());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)54;
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0);
      Schema<LowCopyProtobufOutput> schema0 = (Schema<LowCopyProtobufOutput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      int int0 = codedInput0.readFieldNumber(schema0);
      assertEquals(54, codedInput0.getLastTag());
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      CodedInput codedInput0 = new CodedInput(byteArray0, 0, 0, true);
      Schema<InputStream> schema0 = (Schema<InputStream>) mock(Schema.class, new ViolatedAssumptionAnswer());
      int int0 = codedInput0.readFieldNumber(schema0);
      assertFalse(codedInput0.isCurrentFieldPacked());
      assertEquals(0, int0);
      assertEquals(0, codedInput0.getTotalBytesRead());
      assertEquals((-1), codedInput0.getBytesUntilLimit());
      assertEquals(0, codedInput0.getLastTag());
      assertTrue(codedInput0.decodeNestedMessageAsGroup);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0, (int) (byte)0, 232);
      Schema<FilterInputStream> schema0 = (Schema<FilterInputStream>) mock(Schema.class, new ViolatedAssumptionAnswer());
      try { 
        codedInput0.readFieldNumber(schema0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Protocol message contained an invalid tag (zero).
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0);
      boolean boolean0 = codedInput0.skipField((byte)66);
      assertEquals(2, codedInput0.getTotalBytesRead());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)66;
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0);
      codedInput0.readEnum();
      try { 
        codedInput0.skipField((byte)66);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // While parsing a protocol message, the input ended unexpectedly in the middle of a field.  This could mean either than the input has been truncated or that an embedded message misreported its own length.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0);
      try { 
        codedInput0.skipRawBytes((byte) (-5));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // CodedInput encountered an embedded string or message which claimed to have negative size.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      CodedInput codedInput0 = new CodedInput(byteArrayInputStream0, true);
      codedInput0.readRawBytes((byte)0);
      assertEquals(3, byteArrayInputStream0.available());
      assertFalse(codedInput0.isCurrentFieldPacked());
      assertEquals(0, codedInput0.getTotalBytesRead());
      assertTrue(codedInput0.decodeNestedMessageAsGroup);
      assertEquals((-1), codedInput0.getBytesUntilLimit());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte) (-34);
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0);
      codedInput0.pushLimit(665);
      codedInput0.readInt32();
      try { 
        codedInput0.readBytes();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // While parsing a protocol message, the input ended unexpectedly in the middle of a field.  This could mean either than the input has been truncated or that an embedded message misreported its own length.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 0);
      CodedInput codedInput0 = CodedInput.newInstance((InputStream) byteArrayInputStream0);
      codedInput0.pushLimit(0);
      try { 
        codedInput0.readFixed64();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // While parsing a protocol message, the input ended unexpectedly in the middle of a field.  This could mean either than the input has been truncated or that an embedded message misreported its own length.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      CodedInput codedInput0 = new CodedInput(byteArray0, (-586), (-786), false);
      int int0 = codedInput0.getTotalBytesRead();
      assertFalse(codedInput0.isCurrentFieldPacked());
      assertFalse(codedInput0.decodeNestedMessageAsGroup);
      assertEquals(0, int0);
      assertEquals((-1), codedInput0.getBytesUntilLimit());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0, (int) (byte)0, (-3023));
      try { 
        codedInput0.readTag();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Protocol message contained an invalid tag (zero).
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      CodedInput codedInput0 = new CodedInput(byteArrayInputStream0, true);
      try { 
        codedInput0.readRawBytes((byte)85);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // While parsing a protocol message, the input ended unexpectedly in the middle of a field.  This could mean either than the input has been truncated or that an embedded message misreported its own length.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0);
      codedInput0.pushLimit(665);
      try { 
        codedInput0.pushLimit(67108864);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // While parsing a protocol message, the input ended unexpectedly in the middle of a field.  This could mean either than the input has been truncated or that an embedded message misreported its own length.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0);
      codedInput0.readBytes();
      int int0 = codedInput0.pushLimit(67108864);
      assertEquals(1, codedInput0.getTotalBytesRead());
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 660);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      CodedInput codedInput0 = new CodedInput(sequenceInputStream0, byteArray0, (byte) (-31), (byte)87, false);
      try { 
        codedInput0.pushLimit((-589));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // CodedInput encountered an embedded string or message which claimed to have negative size.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      CodedInput codedInput0 = new CodedInput(byteArray0, (byte)0, 317, true);
      codedInput0.reset();
      assertEquals((-1), codedInput0.getBytesUntilLimit());
      assertTrue(codedInput0.decodeNestedMessageAsGroup);
      assertEquals(0, codedInput0.getLastTag());
      assertFalse(codedInput0.isCurrentFieldPacked());
      assertEquals(0, codedInput0.getTotalBytesRead());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0);
      // Undeclared exception!
      try { 
        codedInput0.setSizeLimit((byte) (-14));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Size limit cannot be negative: -14
         //
         verifyException("io.protostuff.CodedInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      long long0 = CodedInput.decodeZigZag64((-1293L));
      assertEquals((-9223372036854775162L), long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = CodedInput.decodeZigZag32((-268435456));
      assertEquals(2013265920, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = CodedInput.decodeZigZag32(1975);
      assertEquals((-988), int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[7] = (byte)16;
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0);
      long long0 = codedInput0.readFixed64();
      assertFalse(codedInput0.isCurrentFieldPacked());
      assertEquals(1152921504606846976L, long0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[6] = (byte)112;
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0);
      long long0 = codedInput0.readFixed64();
      assertEquals(8, codedInput0.getTotalBytesRead());
      assertEquals(31525197391593472L, long0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[5] = (byte)127;
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0);
      long long0 = codedInput0.readFixed64();
      assertEquals(8, codedInput0.getTotalBytesRead());
      assertEquals(139637976727552L, long0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[4] = (byte)77;
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0);
      long long0 = codedInput0.readFixed64();
      assertEquals(8, codedInput0.getTotalBytesRead());
      assertEquals(330712481792L, long0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte)108;
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0);
      long long0 = codedInput0.readFixed64();
      assertEquals(8, codedInput0.getTotalBytesRead());
      assertEquals(1811939328L, long0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte) (-66);
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0);
      long long0 = codedInput0.readFixed64();
      assertEquals(8, codedInput0.getTotalBytesRead());
      assertEquals(12451840L, long0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-67);
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0);
      long long0 = codedInput0.readFixed64();
      assertEquals(8, codedInput0.getTotalBytesRead());
      assertEquals(48384L, long0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-113);
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0);
      long long0 = codedInput0.readFixed64();
      assertEquals(8, codedInput0.getTotalBytesRead());
      assertEquals(143L, long0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[3] = (byte) (-31);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      CodedInput codedInput0 = new CodedInput(byteArrayInputStream0, byteArray0, true);
      int int0 = codedInput0.readSFixed32();
      assertEquals(4, codedInput0.getTotalBytesRead());
      assertEquals((-520093696), int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte) (-74);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      CodedInput codedInput0 = new CodedInput(byteArrayInputStream0, byteArray0, true);
      int int0 = codedInput0.readSFixed32();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(11927552, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-50);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      CodedInput codedInput0 = new CodedInput(byteArrayInputStream0, byteArray0, true);
      int int0 = codedInput0.readSFixed32();
      assertEquals(4, codedInput0.getTotalBytesRead());
      assertEquals(52736, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte) (-93);
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0);
      long long0 = codedInput0.readSInt64();
      assertEquals(3, codedInput0.getTotalBytesRead());
      assertEquals((-2258L), long0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-8);
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0);
      codedInput0.readBytes();
      long long0 = codedInput0.readSInt64();
      assertEquals(3, codedInput0.getTotalBytesRead());
      assertEquals(60L, long0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      int int0 = CodedInput.readRawVarint32((InputStream) byteArrayInputStream0, 65533);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(125, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte) (-118);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        CodedInput.readRawVarint32((InputStream) byteArrayInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // While parsing a protocol message, the input ended unexpectedly in the middle of a field.  This could mean either than the input has been truncated or that an embedded message misreported its own length.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-8);
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0);
      codedInput0.readSInt32();
      int int0 = codedInput0.readInt32();
      assertEquals(3, codedInput0.getTotalBytesRead());
      assertEquals(120, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      CodedInput codedInput0 = new CodedInput(byteArrayInputStream0, true);
      LinkBuffer linkBuffer0 = new LinkBuffer();
      LowCopyProtostuffOutput lowCopyProtostuffOutput0 = new LowCopyProtostuffOutput(linkBuffer0);
      Schema<LowCopyProtostuffOutput> schema0 = (Schema<LowCopyProtostuffOutput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(schema0).isInitialized(Matchers.<LowCopyProtostuffOutput>any());
      // Undeclared exception!
      try { 
        codedInput0.mergeObject(lowCopyProtostuffOutput0, schema0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.CodedInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0);
      LowCopyProtobufOutput lowCopyProtobufOutput0 = new LowCopyProtobufOutput();
      Schema<LowCopyProtobufOutput> schema0 = (Schema<LowCopyProtobufOutput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(schema0).isInitialized(Matchers.<LowCopyProtobufOutput>any());
      // Undeclared exception!
      try { 
        codedInput0.mergeObject(lowCopyProtobufOutput0, schema0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.CodedInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)3;
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0);
      codedInput0.readRawVarint64();
      boolean boolean0 = codedInput0.readBool();
      assertEquals(2, codedInput0.getTotalBytesRead());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)46;
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0);
      try { 
        codedInput0.skipMessage();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Protocol message tag had invalid wire type.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      CodedInput codedInput0 = new CodedInput(byteArray0, (-1210), 933, false);
      try { 
        codedInput0.checkLastTagWas(2326);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Protocol message end-group tag did not match expected tag.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0, (int) (byte)55, 820);
      try { 
        codedInput0.checkLastTagWas((-1));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Protocol message end-group tag did not match expected tag.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      CodedInput codedInput0 = new CodedInput(byteArray0, 40, 0, true);
      codedInput0.readTag();
      assertFalse(codedInput0.isCurrentFieldPacked());
      assertTrue(codedInput0.decodeNestedMessageAsGroup);
      assertEquals(0, codedInput0.getLastTag());
      assertEquals((-1), codedInput0.getBytesUntilLimit());
      assertEquals(0, codedInput0.getTotalBytesRead());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)3;
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0);
      boolean boolean0 = codedInput0.readBool();
      assertEquals(1, codedInput0.getTotalBytesRead());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CodedInput codedInput0 = CodedInput.newInstance((InputStream) null);
      int int0 = codedInput0.getBytesUntilLimit();
      assertEquals((-1), int0);
      assertFalse(codedInput0.decodeNestedMessageAsGroup);
      assertFalse(codedInput0.isCurrentFieldPacked());
      assertEquals(0, codedInput0.getTotalBytesRead());
  }
}
