/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 20 09:39:26 GMT 2017
 */

package io.protostuff;

import org.evosuite.shaded.org.mockito.Matchers;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.protostuff.ByteArrayInput;
import io.protostuff.ByteBufferInput;
import io.protostuff.ByteString;
import io.protostuff.LowCopyProtostuffOutput;
import io.protostuff.ProtobufOutput;
import io.protostuff.Schema;
import java.io.IOException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ByteBufferInput_ESTest extends ByteBufferInput_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[6] = (byte) (-10);
      ByteString byteString0 = ByteString.copyFrom(byteArray0);
      ByteBuffer byteBuffer0 = byteString0.asReadOnlyByteBuffer();
      ByteBufferInput byteBufferInput0 = new ByteBufferInput(byteBuffer0, false);
      long long0 = byteBufferInput0.readSFixed64();
      assertFalse(byteBufferInput0.decodeNestedMessageAsGroup);
      assertEquals(69242844270821376L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[4] = (byte) (-128);
      ByteString byteString0 = ByteString.copyFrom(byteArray0);
      ByteBuffer byteBuffer0 = byteString0.asReadOnlyByteBuffer();
      ByteBufferInput byteBufferInput0 = new ByteBufferInput(byteBuffer0, false);
      long long0 = byteBufferInput0.readSFixed64();
      assertEquals(549755813888L, long0);
      assertFalse(byteBufferInput0.decodeNestedMessageAsGroup);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ByteString byteString0 = ByteString.bytesDefaultValue("}]@vBg@; c6*R6]");
      ByteBuffer byteBuffer0 = byteString0.asReadOnlyByteBuffer();
      ByteBufferInput byteBufferInput0 = new ByteBufferInput(byteBuffer0, true);
      long long0 = byteBufferInput0.readFixed64();
      assertTrue(byteBufferInput0.decodeNestedMessageAsGroup);
      assertEquals(4269525981896662397L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ByteString byteString0 = ByteString.bytesDefaultValue(";C5xq63Gi_-");
      ByteBuffer byteBuffer0 = byteString0.asReadOnlyByteBuffer();
      ByteBufferInput byteBufferInput0 = new ByteBufferInput(byteBuffer0, true);
      int int0 = byteBufferInput0.readSFixed32();
      assertTrue(byteBufferInput0.decodeNestedMessageAsGroup);
      assertEquals(2016756539, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ByteString byteString0 = ByteString.bytesDefaultValue("}]@vBg@; c6*R6]");
      ByteBuffer byteBuffer0 = byteString0.asReadOnlyByteBuffer();
      ByteBufferInput byteBufferInput0 = new ByteBufferInput(byteBuffer0, true);
      float float0 = byteBufferInput0.readFloat();
      assertEquals(9.754074E32F, float0, 0.01F);
      
      int int0 = byteBufferInput0.readSFixed32();
      assertEquals(994076482, int0);
      assertTrue(byteBufferInput0.decodeNestedMessageAsGroup);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ByteString byteString0 = ByteString.copyFromUtf8("}]@vBg@;; c6*R6]");
      ByteBuffer byteBuffer0 = byteString0.asReadOnlyByteBuffer();
      ByteBufferInput byteBufferInput0 = new ByteBufferInput(byteBuffer0, false);
      long long0 = byteBufferInput0.readInt64();
      assertEquals(125L, long0);
      assertFalse(byteBufferInput0.decodeNestedMessageAsGroup);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte) (-50);
      byteArray0[3] = (byte) (-50);
      byteArray0[2] = (byte)2;
      ByteString byteString0 = ByteString.copyFrom(byteArray0);
      ByteBuffer byteBuffer0 = byteString0.asReadOnlyByteBuffer();
      ByteBufferInput byteBufferInput0 = new ByteBufferInput(byteBuffer0, false);
      long long0 = byteBufferInput0.readSInt64();
      assertEquals(21417L, long0);
      assertFalse(byteBufferInput0.decodeNestedMessageAsGroup);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)107;
      ByteString byteString0 = ByteString.copyFrom(byteArray0);
      ByteBuffer byteBuffer0 = byteString0.asReadOnlyByteBuffer();
      ByteBufferInput byteBufferInput0 = new ByteBufferInput(byteBuffer0, false);
      long long0 = byteBufferInput0.readSInt64();
      assertEquals(0L, long0);
      assertFalse(byteBufferInput0.decodeNestedMessageAsGroup);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-123);
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte) (-11);
      ByteString byteString0 = ByteString.copyFrom(byteArray0);
      ByteBuffer byteBuffer0 = byteString0.asReadOnlyByteBuffer();
      ByteBufferInput byteBufferInput0 = new ByteBufferInput(byteBuffer0, true);
      // Undeclared exception!
      try { 
        byteBufferInput0.readInt32();
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte) (-123);
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte) (-11);
      ByteString byteString0 = ByteString.copyFrom(byteArray0);
      ByteBuffer byteBuffer0 = byteString0.asReadOnlyByteBuffer();
      ByteBufferInput byteBufferInput0 = new ByteBufferInput(byteBuffer0, true);
      int int0 = byteBufferInput0.readFieldNumber((Schema<ByteArrayInput>) null);
      assertEquals(1478577821, byteBufferInput0.getLastTag());
      assertEquals(184822227, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      byteArray0[0] = (byte) (-86);
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte) (-11);
      ByteString byteString0 = ByteString.copyFrom(byteArray0);
      ByteBuffer byteBuffer0 = byteString0.asReadOnlyByteBuffer();
      ByteBufferInput byteBufferInput0 = new ByteBufferInput(byteBuffer0, true);
      int int0 = byteBufferInput0.readInt32();
      assertEquals(42, int0);
      
      int int1 = byteBufferInput0.readEnum();
      assertEquals(1925266, int1);
      assertTrue(byteBufferInput0.decodeNestedMessageAsGroup);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte) (-110);
      ByteString byteString0 = ByteString.copyFrom(byteArray0);
      ByteBuffer byteBuffer0 = byteString0.asReadOnlyByteBuffer();
      ByteBufferInput byteBufferInput0 = new ByteBufferInput(byteBuffer0, true);
      int int0 = byteBufferInput0.readInt32();
      assertEquals(8874, int0);
      assertTrue(byteBufferInput0.decodeNestedMessageAsGroup);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte)37;
      ByteString byteString0 = ByteString.wrap(byteArray0);
      ByteBuffer byteBuffer0 = byteString0.asReadOnlyByteBuffer();
      ByteBufferInput byteBufferInput0 = new ByteBufferInput(byteBuffer0, true);
      Schema<ByteBufferInput> schema0 = (Schema<ByteBufferInput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      byteBufferInput0.handleUnknownField((int) 0, schema0);
      byteBufferInput0.readRawVarint32();
      assertTrue(byteBufferInput0.decodeNestedMessageAsGroup);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteString byteString0 = ByteString.copyFrom(byteArray0);
      ByteBuffer byteBuffer0 = byteString0.asReadOnlyByteBuffer();
      ByteBufferInput byteBufferInput0 = new ByteBufferInput(byteBuffer0, true);
      assertEquals(0, byteBufferInput0.getLastTag());
      
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteString0.EMPTY_BYTE_ARRAY, false);
      Schema<ByteArrayInput> schema0 = (Schema<ByteArrayInput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(schema0).isInitialized(Matchers.<ByteArrayInput>any());
      ByteArrayInput byteArrayInput1 = byteBufferInput0.mergeObject(byteArrayInput0, schema0);
      assertTrue(byteBufferInput0.decodeNestedMessageAsGroup);
      assertNotNull(byteArrayInput1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteString byteString0 = ByteString.copyFrom(byteArray0);
      ByteBuffer byteBuffer0 = byteString0.asReadOnlyByteBuffer();
      ByteBufferInput byteBufferInput0 = new ByteBufferInput(byteBuffer0, false);
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteString0.EMPTY_BYTE_ARRAY, false);
      Schema<ByteArrayInput> schema0 = (Schema<ByteArrayInput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(schema0).isInitialized(Matchers.<ByteArrayInput>any());
      // Undeclared exception!
      try { 
        byteBufferInput0.mergeObject(byteArrayInput0, schema0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.ByteBufferInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte) (-86);
      ByteString byteString0 = ByteString.copyFrom(byteArray0);
      ByteBuffer byteBuffer0 = byteString0.asReadOnlyByteBuffer();
      ByteBufferInput byteBufferInput0 = new ByteBufferInput(byteBuffer0, true);
      byteBufferInput0.readFieldNumber((Schema<ByteArrayInput>) null);
      byteBufferInput0.readString();
      assertEquals(42, byteBufferInput0.getLastTag());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-29);
      ByteString byteString0 = ByteString.copyFrom(byteArray0);
      ByteBuffer byteBuffer0 = byteString0.asReadOnlyByteBuffer();
      ByteBufferInput byteBufferInput0 = new ByteBufferInput(byteBuffer0, false);
      long long0 = byteBufferInput0.readSInt64();
      assertEquals((-50L), long0);
      assertEquals(0, byteBufferInput0.getLastTag());
      assertFalse(byteBufferInput0.decodeNestedMessageAsGroup);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ByteString byteString0 = ByteString.bytesDefaultValue("}]@vBg@; c6*R6]");
      ByteBuffer byteBuffer0 = byteString0.asReadOnlyByteBuffer();
      ByteBufferInput byteBufferInput0 = new ByteBufferInput(byteBuffer0, true);
      int int0 = byteBufferInput0.readSInt32();
      assertEquals((-63), int0);
      
      long long0 = byteBufferInput0.readFixed64();
      assertTrue(byteBufferInput0.decodeNestedMessageAsGroup);
      assertEquals(2322520845080477789L, long0);
      assertEquals(0, byteBufferInput0.getLastTag());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-123);
      ByteString byteString0 = ByteString.wrap(byteArray0);
      ByteBuffer byteBuffer0 = byteString0.asReadOnlyByteBuffer();
      ByteBufferInput byteBufferInput0 = new ByteBufferInput(byteBuffer0, true);
      boolean boolean0 = byteBufferInput0.readBool();
      assertTrue(boolean0);
      assertTrue(byteBufferInput0.decodeNestedMessageAsGroup);
      assertEquals(0, byteBufferInput0.getLastTag());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ByteString byteString0 = ByteString.bytesDefaultValue("}]@vBg@; c6*R6]");
      ByteBuffer byteBuffer0 = byteString0.asReadOnlyByteBuffer();
      ByteBufferInput byteBufferInput0 = new ByteBufferInput(byteBuffer0, true);
      boolean boolean0 = byteBufferInput0.readBool();
      assertTrue(boolean0);
      assertEquals(0, byteBufferInput0.getLastTag());
      assertTrue(byteBufferInput0.decodeNestedMessageAsGroup);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-123);
      byteArray0[3] = (byte) (-86);
      ByteString byteString0 = ByteString.copyFrom(byteArray0);
      ByteBuffer byteBuffer0 = byteString0.asReadOnlyByteBuffer();
      ByteBufferInput byteBufferInput0 = new ByteBufferInput(byteBuffer0, false);
      byteBufferInput0.readFieldNumber((Schema<ByteArrayInput>) null);
      try { 
        byteBufferInput0.readSInt64();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // CodedInput encountered an embedded string or bytes that misreported its size.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteString byteString0 = ByteString.copyFrom(byteArray0);
      ByteBuffer byteBuffer0 = byteString0.asReadOnlyByteBuffer();
      ByteBufferInput byteBufferInput0 = new ByteBufferInput(byteBuffer0, true);
      Schema<ProtobufOutput> schema0 = (Schema<ProtobufOutput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      try { 
        byteBufferInput0.readFieldNumber(schema0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Protocol message contained an invalid tag (zero).
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)26;
      ByteString byteString0 = ByteString.copyFrom(byteArray0);
      ByteBuffer byteBuffer0 = byteString0.asReadOnlyByteBuffer();
      ByteBufferInput byteBufferInput0 = new ByteBufferInput(byteBuffer0, true);
      byteBufferInput0.readByteArray();
      Schema<ProtobufOutput> schema0 = (Schema<ProtobufOutput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      int int0 = byteBufferInput0.readFieldNumber(schema0);
      assertEquals(26, byteBufferInput0.getLastTag());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-57);
      ByteString byteString0 = ByteString.copyFrom(byteArray0);
      ByteBuffer byteBuffer0 = byteString0.asReadOnlyByteBuffer();
      ByteBufferInput byteBufferInput0 = new ByteBufferInput(byteBuffer0, true);
      int int0 = byteBufferInput0.readFieldNumber((Schema<ByteArrayInput>) null);
      assertEquals(71, byteBufferInput0.getLastTag());
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteString byteString0 = ByteString.copyFrom(byteArray0);
      ByteBuffer byteBuffer0 = byteString0.asReadOnlyByteBuffer();
      ByteBufferInput byteBufferInput0 = new ByteBufferInput(byteBuffer0, false);
      long long0 = byteBufferInput0.readSFixed64();
      assertEquals(0L, long0);
      
      Schema<ByteBufferInput> schema0 = (Schema<ByteBufferInput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      int int0 = byteBufferInput0.readFieldNumber(schema0);
      assertFalse(byteBufferInput0.decodeNestedMessageAsGroup);
      assertEquals(0, int0);
      assertEquals(0, byteBufferInput0.getLastTag());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteString byteString0 = ByteString.wrap(byteArray0);
      ByteBuffer byteBuffer0 = byteString0.asReadOnlyByteBuffer();
      ByteBufferInput byteBufferInput0 = new ByteBufferInput(byteBuffer0, false);
      boolean boolean0 = byteBufferInput0.skipField((byte)34);
      assertEquals(0, byteBufferInput0.getLastTag());
      assertTrue(boolean0);
      assertFalse(byteBufferInput0.decodeNestedMessageAsGroup);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ByteString byteString0 = ByteString.bytesDefaultValue("}]@vBg@;; c6*R6]");
      ByteBuffer byteBuffer0 = byteString0.asReadOnlyByteBuffer();
      ByteBufferInput byteBufferInput0 = new ByteBufferInput(byteBuffer0, false);
      boolean boolean0 = byteBufferInput0.skipField(32);
      assertFalse(byteBufferInput0.decodeNestedMessageAsGroup);
      assertTrue(boolean0);
      assertEquals(0, byteBufferInput0.getLastTag());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ByteString byteString0 = ByteString.bytesDefaultValue("}]@vBg@; c6*R6]");
      ByteBuffer byteBuffer0 = byteString0.asReadOnlyByteBuffer();
      ByteBufferInput byteBufferInput0 = new ByteBufferInput(byteBuffer0, true);
      try { 
        byteBufferInput0.checkLastTagWas(110);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Protocol message end-group tag did not match expected tag.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteString byteString0 = ByteString.copyFrom(byteArray0);
      ByteBuffer byteBuffer0 = byteString0.asReadOnlyByteBuffer();
      ByteBufferInput byteBufferInput0 = new ByteBufferInput(byteBuffer0, true);
      try { 
        byteBufferInput0.checkLastTagWas((byte) (-87));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Protocol message end-group tag did not match expected tag.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ByteString byteString0 = ByteString.bytesDefaultValue("}]@v4g@;; c6*R6]");
      ByteBuffer byteBuffer0 = byteString0.asReadOnlyByteBuffer();
      ByteBufferInput byteBufferInput0 = new ByteBufferInput(byteBuffer0, true);
      byteBufferInput0.readSFixed32();
      byteBufferInput0.skipMessage();
      assertEquals(52, byteBufferInput0.getLastTag());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ByteString byteString0 = ByteString.copyFromUtf8("");
      ByteBuffer byteBuffer0 = byteString0.asReadOnlyByteBuffer();
      ByteBufferInput byteBufferInput0 = new ByteBufferInput(byteBuffer0, true);
      int int0 = byteBufferInput0.readTag();
      assertEquals(0, byteBufferInput0.getLastTag());
      assertEquals(0, int0);
      assertTrue(byteBufferInput0.decodeNestedMessageAsGroup);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ByteString byteString0 = ByteString.bytesDefaultValue("}]@v4g@;; c6*R6]");
      ByteBuffer byteBuffer0 = byteString0.asReadOnlyByteBuffer();
      ByteBufferInput byteBufferInput0 = new ByteBufferInput(byteBuffer0, true);
      try { 
        byteBufferInput0.skipMessage();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Protocol message tag had invalid wire type.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ByteString byteString0 = ByteString.bytesDefaultValue("");
      ByteBuffer byteBuffer0 = byteString0.asReadOnlyByteBuffer();
      ByteBufferInput byteBufferInput0 = new ByteBufferInput(byteBuffer0, true);
      byteBufferInput0.getLastTag();
      LowCopyProtostuffOutput lowCopyProtostuffOutput0 = new LowCopyProtostuffOutput();
      Schema<LowCopyProtostuffOutput> schema0 = (Schema<LowCopyProtostuffOutput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(schema0).isInitialized(Matchers.<LowCopyProtostuffOutput>any());
      // Undeclared exception!
      try { 
        byteBufferInput0.mergeObject(lowCopyProtostuffOutput0, schema0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.ByteBufferInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte) (-86);
      ByteString byteString0 = ByteString.copyFrom(byteArray0);
      ByteBuffer byteBuffer0 = byteString0.asReadOnlyByteBuffer();
      ByteBufferInput byteBufferInput0 = new ByteBufferInput(byteBuffer0, true);
      byteBufferInput0.readFieldNumber((Schema<ByteArrayInput>) null);
      byteBufferInput0.readSInt64();
      boolean boolean0 = byteBufferInput0.isCurrentFieldPacked();
      assertEquals(42, byteBufferInput0.getLastTag());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteString byteString0 = ByteString.wrap(byteArray0);
      ByteBuffer byteBuffer0 = byteString0.asReadOnlyByteBuffer();
      ByteBufferInput byteBufferInput0 = new ByteBufferInput(byteBuffer0, true);
      boolean boolean0 = byteBufferInput0.readBool();
      boolean boolean1 = byteBufferInput0.isCurrentFieldPacked();
      assertTrue(byteBufferInput0.decodeNestedMessageAsGroup);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, byteBufferInput0.getLastTag());
      assertFalse(boolean1);
  }
}
