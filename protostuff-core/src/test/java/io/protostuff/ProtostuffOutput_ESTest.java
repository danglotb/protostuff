/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 20 09:37:14 GMT 2017
 */

package io.protostuff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.protostuff.ByteArrayInput;
import io.protostuff.ByteString;
import io.protostuff.GraphByteArrayInput;
import io.protostuff.LinkedBuffer;
import io.protostuff.ProtobufOutput;
import io.protostuff.ProtostuffOutput;
import io.protostuff.Schema;
import io.protostuff.WriteSession;
import io.protostuff.WriteSink;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.nio.ByteBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ProtostuffOutput_ESTest extends ProtostuffOutput_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(0);
      WriteSession writeSession0 = new WriteSession(linkedBuffer0);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(writeSession0.head);
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, true);
      GraphByteArrayInput graphByteArrayInput0 = new GraphByteArrayInput(byteArrayInput0, 512);
      Schema<GraphByteArrayInput> schema0 = (Schema<GraphByteArrayInput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      protostuffOutput0.writeObject(0, graphByteArrayInput0, schema0, true);
      assertEquals(2, protostuffOutput0.getSize());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(0);
      ProtobufOutput protobufOutput0 = new ProtobufOutput(linkedBuffer0);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(protobufOutput0.head);
      byte[] byteArray0 = new byte[4];
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, false);
      ByteBuffer byteBuffer0 = byteArrayInput0.readByteBuffer();
      protostuffOutput0.writeBytes((int) (byte)114, byteBuffer0, true);
      assertEquals(3, protostuffOutput0.getSize());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(0);
      ProtobufOutput protobufOutput0 = new ProtobufOutput(linkedBuffer0);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(protobufOutput0.head);
      byte[] byteArray0 = new byte[4];
      protostuffOutput0.writeByteArray(1, byteArray0, false);
      assertEquals(6, protostuffOutput0.getSize());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(369);
      PipedInputStream pipedInputStream0 = new PipedInputStream(256);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      WriteSession.FlushHandler writeSession_FlushHandler0 = mock(WriteSession.FlushHandler.class, new ViolatedAssumptionAnswer());
      WriteSession writeSession0 = new WriteSession(linkedBuffer0, pipedOutputStream0, writeSession_FlushHandler0, (-2814));
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(writeSession0.head, writeSession0.out, writeSession0.flushHandler, (-2814));
      ByteString byteString0 = ByteString.bytesDefaultValue("");
      protostuffOutput0.writeBytes(256, byteString0, false);
      assertEquals(3, protostuffOutput0.getSize());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(11);
      WriteSession writeSession0 = new WriteSession(linkedBuffer0);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(writeSession0.head);
      protostuffOutput0.writeString(1073741824, "io.protostuff.B64Code", true);
      assertEquals(23, protostuffOutput0.getSize());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(11);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0);
      protostuffOutput0.writeInt32(1189, 1073741824, false);
      protostuffOutput0.writeFixed32(512, 0, false);
      protostuffOutput0.writeFloat(1, 11, false);
      protostuffOutput0.writeString(1073741824, "io.protostuff.B64Code", true);
      assertEquals(41, protostuffOutput0.getSize());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(369);
      PipedInputStream pipedInputStream0 = new PipedInputStream(256);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      WriteSession.FlushHandler writeSession_FlushHandler0 = mock(WriteSession.FlushHandler.class, new ViolatedAssumptionAnswer());
      WriteSession writeSession0 = new WriteSession(linkedBuffer0, pipedOutputStream0, writeSession_FlushHandler0, (-2814));
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(writeSession0.head, writeSession0.out, writeSession0.flushHandler, (-2814));
      protostuffOutput0.writeBool(512, false, false);
      assertEquals(3, protostuffOutput0.getSize());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(0);
      ProtobufOutput protobufOutput0 = new ProtobufOutput(linkedBuffer0);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(protobufOutput0.head);
      protostuffOutput0.writeDouble(0, 512, false);
      assertEquals(9, protostuffOutput0.getSize());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, 0);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0);
      protostuffOutput0.writeFixed32(5, 0, true);
      protostuffOutput0.writeFloat((-1676), (byte)45, true);
      assertArrayEquals(new byte[] {(byte)45, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(14, protostuffOutput0.getSize());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, 0);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0);
      protostuffOutput0.writeFloat((-1676), (byte)45, true);
      assertEquals(9, protostuffOutput0.getSize());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(11);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0);
      protostuffOutput0.writeSFixed64((-2168), 2, false);
      assertEquals(13, protostuffOutput0.getSize());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, (byte)0);
      ProtobufOutput protobufOutput0 = new ProtobufOutput(linkedBuffer0);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(protobufOutput0.head);
      protostuffOutput0.writeFixed64((-2893), 512, true);
      assertArrayEquals(new byte[] {(byte) (-103), (byte) (-53), (byte) (-2), (byte) (-1), (byte)15, (byte)0, (byte)0}, byteArray0);
      assertEquals(13, protostuffOutput0.getSize());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(0);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0);
      protostuffOutput0.writeSInt64((-1), 0L, true);
      assertEquals(6, protostuffOutput0.getSize());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(11);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0);
      protostuffOutput0.writeUInt64(2708, (-1694L), false);
      assertEquals(13, protostuffOutput0.getSize());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(0);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0);
      protostuffOutput0.writeInt64(1073741862, (byte)0, true);
      assertEquals(3, protostuffOutput0.getSize());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(0);
      WriteSession writeSession0 = new WriteSession(linkedBuffer0);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(writeSession0.head);
      protostuffOutput0.writeInt64((byte)0, 0L, true);
      assertEquals(2, protostuffOutput0.getSize());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, (byte) (-92));
      LinkedBuffer linkedBuffer1 = new LinkedBuffer(2, linkedBuffer0);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer1);
      protostuffOutput0.writeInt64(3417, (byte) (-1), false);
      assertEquals(13, protostuffOutput0.getSize());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(369);
      PipedInputStream pipedInputStream0 = new PipedInputStream(256);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      WriteSession.FlushHandler writeSession_FlushHandler0 = mock(WriteSession.FlushHandler.class, new ViolatedAssumptionAnswer());
      WriteSession writeSession0 = new WriteSession(linkedBuffer0, pipedOutputStream0, writeSession_FlushHandler0, (-2814));
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(writeSession0.head, writeSession0.out, writeSession0.flushHandler, (-2814));
      protostuffOutput0.writeSFixed32(369, (-1362), false);
      assertEquals(6, protostuffOutput0.getSize());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, (byte)0);
      ProtobufOutput protobufOutput0 = new ProtobufOutput(linkedBuffer0);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(protobufOutput0.head);
      protostuffOutput0.writeSInt32(40, 2507, true);
      assertEquals(4, protostuffOutput0.getSize());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(0);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0);
      protostuffOutput0.writeUInt32(512, 0, false);
      assertEquals(3, protostuffOutput0.getSize());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(0);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0);
      protostuffOutput0.writeUInt32((-1554), (-1109), true);
      assertEquals(10, protostuffOutput0.getSize());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, 0);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0);
      protostuffOutput0.writeFixed32(5, 0, true);
      protostuffOutput0.writeInt32(1201, 256, true);
      assertArrayEquals(new byte[] {(byte)45, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, protostuffOutput0.getSize());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, 0);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0);
      protostuffOutput0.writeInt32(1201, 256, true);
      assertArrayEquals(new byte[] {(byte) (-120), (byte)75, (byte) (-128), (byte)2}, byteArray0);
      assertEquals(4, protostuffOutput0.getSize());
  }

}
