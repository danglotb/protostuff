/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 14 11:38:33 GMT 2017
 */

package io.protostuff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.protostuff.ByteBufferInput;
import io.protostuff.ByteString;
import io.protostuff.CodedInput;
import io.protostuff.GraphCodedInput;
import io.protostuff.LowCopyProtobufOutput;
import io.protostuff.LowCopyProtostuffOutput;
import io.protostuff.Schema;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.ReadOnlyBufferException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ByteBufferInput_ESTest extends ByteBufferInput_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteString byteString0 = ByteString.wrap(byteArray0);
      ByteBuffer byteBuffer0 = byteString0.asReadOnlyByteBuffer();
      ByteBufferInput byteBufferInput0 = new ByteBufferInput(byteBuffer0, false);
      LowCopyProtostuffOutput lowCopyProtostuffOutput0 = new LowCopyProtostuffOutput();
      // Undeclared exception!
      try { 
        byteBufferInput0.transferByteRangeTo(lowCopyProtostuffOutput0, false, (-2764), false);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)49;
      ByteString byteString0 = ByteString.wrap(byteArray0);
      ByteBuffer byteBuffer0 = byteString0.asReadOnlyByteBuffer();
      ByteBufferInput byteBufferInput0 = new ByteBufferInput(byteBuffer0, true);
      LowCopyProtostuffOutput lowCopyProtostuffOutput0 = new LowCopyProtostuffOutput();
      byteBufferInput0.transferByteRangeTo(lowCopyProtostuffOutput0, true, (-2764), false);
      long long0 = byteBufferInput0.readSInt64();
      assertEquals((-25L), long0);
      assertTrue(byteBufferInput0.decodeNestedMessageAsGroup);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[24];
      byteArray0[6] = (byte) (-10);
      ByteString byteString0 = ByteString.copyFrom(byteArray0);
      ByteBuffer byteBuffer0 = byteString0.asReadOnlyByteBuffer();
      ByteBufferInput byteBufferInput0 = new ByteBufferInput(byteBuffer0, false);
      long long0 = byteBufferInput0.readSFixed64();
      assertFalse(byteBufferInput0.decodeNestedMessageAsGroup);
      assertEquals(69242844270821376L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[5] = (byte) (-128);
      ByteString byteString0 = ByteString.copyFrom(byteArray0);
      ByteBuffer byteBuffer0 = byteString0.asReadOnlyByteBuffer();
      ByteBufferInput byteBufferInput0 = new ByteBufferInput(byteBuffer0, false);
      long long0 = byteBufferInput0.readSFixed64();
      assertEquals(140737488355328L, long0);
      assertFalse(byteBufferInput0.decodeNestedMessageAsGroup);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[24];
      byteArray0[4] = (byte) (-128);
      ByteString byteString0 = ByteString.copyFrom(byteArray0);
      ByteBuffer byteBuffer0 = byteString0.asReadOnlyByteBuffer();
      ByteBufferInput byteBufferInput0 = new ByteBufferInput(byteBuffer0, false);
      long long0 = byteBufferInput0.readSFixed64();
      assertEquals(549755813888L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ByteString byteString0 = ByteString.bytesDefaultValue("}]@vBg@;; c6*R6]");
      ByteBuffer byteBuffer0 = byteString0.asReadOnlyByteBuffer();
      ByteBufferInput byteBufferInput0 = new ByteBufferInput(byteBuffer0, false);
      long long0 = byteBufferInput0.readFixed64();
      assertEquals(4269525981896662397L, long0);
      assertFalse(byteBufferInput0.decodeNestedMessageAsGroup);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-17);
      ByteString byteString0 = ByteString.copyFrom(byteArray0);
      ByteBuffer byteBuffer0 = byteString0.asReadOnlyByteBuffer();
      ByteBufferInput byteBufferInput0 = new ByteBufferInput(byteBuffer0, true);
      long long0 = byteBufferInput0.readSFixed64();
      assertTrue(byteBufferInput0.decodeNestedMessageAsGroup);
      assertEquals(239L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ByteString byteString0 = ByteString.bytesDefaultValue("}]@vBg@;; c6*R6]");
      ByteBuffer byteBuffer0 = byteString0.asReadOnlyByteBuffer();
      ByteBufferInput byteBufferInput0 = new ByteBufferInput(byteBuffer0, true);
      boolean boolean0 = byteBufferInput0.skipField(125);
      assertTrue(boolean0);
      
      int int0 = byteBufferInput0.readRawLittleEndian32();
      assertEquals(994076482, int0);
      assertTrue(byteBufferInput0.decodeNestedMessageAsGroup);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)37;
      ByteString byteString0 = ByteString.copyFrom(byteArray0);
      ByteBuffer byteBuffer0 = byteString0.asReadOnlyByteBuffer();
      ByteBufferInput byteBufferInput0 = new ByteBufferInput(byteBuffer0, false);
      int int0 = byteBufferInput0.readFixed32();
      assertFalse(byteBufferInput0.decodeNestedMessageAsGroup);
      assertEquals(2424832, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte) (-95);
      ByteString byteString0 = ByteString.copyFrom(byteArray0);
      ByteBuffer byteBuffer0 = byteString0.asReadOnlyByteBuffer();
      ByteBufferInput byteBufferInput0 = new ByteBufferInput(byteBuffer0, false);
      int int0 = byteBufferInput0.readEnum();
      assertEquals(0, int0);
      
      long long0 = byteBufferInput0.readRawVarint64();
      assertEquals(4335L, long0);
      assertFalse(byteBufferInput0.decodeNestedMessageAsGroup);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ByteString byteString0 = ByteString.bytesDefaultValue("}]@vBg@;; c6*R6]");
      ByteBuffer byteBuffer0 = byteString0.asReadOnlyByteBuffer();
      ByteBufferInput byteBufferInput0 = new ByteBufferInput(byteBuffer0, false);
      byteBufferInput0.readTag();
      byteBufferInput0.readRawLittleEndian64();
      long long0 = byteBufferInput0.readSInt64();
      assertEquals(125, byteBufferInput0.getLastTag());
      assertEquals(16L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte)124;
      byteArray0[3] = (byte) (-91);
      ByteString byteString0 = ByteString.copyFrom(byteArray0);
      ByteBuffer byteBuffer0 = byteString0.asReadOnlyByteBuffer();
      ByteBufferInput byteBufferInput0 = new ByteBufferInput(byteBuffer0, true);
      byteBufferInput0.readTag();
      boolean boolean0 = byteBufferInput0.readBool();
      assertEquals(15983, byteBufferInput0.getLastTag());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte) (-17);
      ByteString byteString0 = ByteString.copyFrom(byteArray0);
      ByteBuffer byteBuffer0 = byteString0.asReadOnlyByteBuffer();
      ByteBufferInput byteBufferInput0 = new ByteBufferInput(byteBuffer0, true);
      int int0 = byteBufferInput0.readTag();
      assertEquals(14319, byteBufferInput0.getLastTag());
      assertEquals(14319, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteString byteString0 = ByteString.copyFrom(byteArray0);
      ByteBuffer byteBuffer0 = byteString0.asReadOnlyByteBuffer();
      ByteBufferInput byteBufferInput0 = new ByteBufferInput(byteBuffer0, true);
      Schema<ByteBufferInput> schema0 = (Schema<ByteBufferInput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(schema0).isInitialized(any());
      ByteBufferInput byteBufferInput1 = byteBufferInput0.mergeObject(byteBufferInput0, schema0);
      assertNotNull(byteBufferInput1);
      assertTrue(byteBufferInput1.decodeNestedMessageAsGroup);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteString byteString0 = ByteString.copyFrom(byteArray0);
      ByteBuffer byteBuffer0 = byteString0.asReadOnlyByteBuffer();
      ByteBufferInput byteBufferInput0 = new ByteBufferInput(byteBuffer0, true);
      ByteBuffer byteBuffer1 = byteBufferInput0.readByteBuffer();
      assertEquals(0, byteBuffer1.limit());
      assertTrue(byteBufferInput0.decodeNestedMessageAsGroup);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-17);
      ByteString byteString0 = ByteString.copyFrom(byteArray0);
      ByteBuffer byteBuffer0 = byteString0.asReadOnlyByteBuffer();
      ByteBufferInput byteBufferInput0 = new ByteBufferInput(byteBuffer0, true);
      int int0 = byteBufferInput0.readSInt32();
      assertEquals((-56), int0);
      assertTrue(byteBufferInput0.decodeNestedMessageAsGroup);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte) (-23);
      ByteString byteString0 = ByteString.wrap(byteArray0);
      ByteBuffer byteBuffer0 = byteString0.asReadOnlyByteBuffer();
      ByteBufferInput byteBufferInput0 = new ByteBufferInput(byteBuffer0, false);
      byteBufferInput0.readUInt32();
      Schema<LowCopyProtostuffOutput> schema0 = (Schema<LowCopyProtostuffOutput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      byteBufferInput0.readFieldNumber(schema0);
      boolean boolean0 = byteBufferInput0.readBool();
      assertEquals(49, byteBufferInput0.getLastTag());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)49;
      ByteString byteString0 = ByteString.wrap(byteArray0);
      ByteBuffer byteBuffer0 = byteString0.asReadOnlyByteBuffer();
      ByteBufferInput byteBufferInput0 = new ByteBufferInput(byteBuffer0, false);
      boolean boolean0 = byteBufferInput0.readBool();
      assertTrue(boolean0);
      assertFalse(byteBufferInput0.decodeNestedMessageAsGroup);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-17);
      byteArray0[3] = (byte) (-91);
      ByteString byteString0 = ByteString.copyFrom(byteArray0);
      ByteBuffer byteBuffer0 = byteString0.asReadOnlyByteBuffer();
      ByteBufferInput byteBufferInput0 = new ByteBufferInput(byteBuffer0, true);
      byteBufferInput0.readTag();
      boolean boolean0 = byteBufferInput0.readBool();
      assertEquals(111, byteBufferInput0.getLastTag());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ByteString byteString0 = ByteString.bytesDefaultValue("}]@vBg@;; c6*R6]");
      ByteBuffer byteBuffer0 = byteString0.asReadOnlyByteBuffer();
      ByteBufferInput byteBufferInput0 = new ByteBufferInput(byteBuffer0, true);
      byteBufferInput0.readFloat();
      byteBufferInput0.readTag();
      try { 
        byteBufferInput0.readInt32();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // CodedInput encountered an embedded string or bytes that misreported its size.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-17);
      byteArray0[2] = (byte) (-91);
      ByteString byteString0 = ByteString.copyFrom(byteArray0);
      ByteBuffer byteBuffer0 = byteString0.asReadOnlyByteBuffer();
      ByteBufferInput byteBufferInput0 = new ByteBufferInput(byteBuffer0, true);
      byteBufferInput0.readTag();
      Schema<LowCopyProtobufOutput> schema0 = (Schema<LowCopyProtobufOutput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      int int0 = byteBufferInput0.readFieldNumber(schema0);
      assertEquals(37, byteBufferInput0.getLastTag());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-17);
      byteArray0[2] = (byte)121;
      ByteString byteString0 = ByteString.copyFrom(byteArray0);
      ByteBuffer byteBuffer0 = byteString0.asReadOnlyByteBuffer();
      ByteBufferInput byteBufferInput0 = new ByteBufferInput(byteBuffer0, true);
      byteBufferInput0.readRawVarint32();
      Schema<LowCopyProtobufOutput> schema0 = (Schema<LowCopyProtobufOutput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      int int0 = byteBufferInput0.readFieldNumber(schema0);
      assertEquals(121, byteBufferInput0.getLastTag());
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)4;
      ByteString byteString0 = ByteString.copyFrom(byteArray0);
      ByteBuffer byteBuffer0 = byteString0.asReadOnlyByteBuffer();
      ByteBufferInput byteBufferInput0 = new ByteBufferInput(byteBuffer0, true);
      Schema<LowCopyProtobufOutput> schema0 = (Schema<LowCopyProtobufOutput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      try { 
        byteBufferInput0.readFieldNumber(schema0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Protocol message contained an invalid tag (zero).
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-17);
      ByteString byteString0 = ByteString.copyFrom(byteArray0);
      ByteBuffer byteBuffer0 = byteString0.asReadOnlyByteBuffer();
      ByteBufferInput byteBufferInput0 = new ByteBufferInput(byteBuffer0, true);
      Schema<LowCopyProtobufOutput> schema0 = (Schema<LowCopyProtobufOutput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      int int0 = byteBufferInput0.readFieldNumber(schema0);
      assertEquals(111, byteBufferInput0.getLastTag());
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = ByteString.copyFrom(byteArray0);
      ByteBuffer byteBuffer0 = byteString0.asReadOnlyByteBuffer();
      ByteBufferInput byteBufferInput0 = new ByteBufferInput(byteBuffer0, true);
      CodedInput codedInput0 = CodedInput.newInstance(byteString0.EMPTY_BYTE_ARRAY, 573, 573);
      GraphCodedInput graphCodedInput0 = new GraphCodedInput(codedInput0);
      int int0 = byteBufferInput0.readFieldNumber((Schema<Object>) graphCodedInput0);
      assertEquals(0, byteBufferInput0.getLastTag());
      assertEquals(0, int0);
      assertTrue(byteBufferInput0.decodeNestedMessageAsGroup);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteString byteString0 = ByteString.copyFrom(byteArray0);
      ByteBuffer byteBuffer0 = byteString0.asReadOnlyByteBuffer();
      ByteBufferInput byteBufferInput0 = new ByteBufferInput(byteBuffer0, true);
      Schema<LowCopyProtobufOutput> schema0 = (Schema<LowCopyProtobufOutput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      try { 
        byteBufferInput0.readFieldNumber(schema0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Protocol message contained an invalid tag (zero).
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ByteString byteString0 = ByteString.bytesDefaultValue("}]@vBg@;; c6*R6]");
      ByteBuffer byteBuffer0 = byteString0.asReadOnlyByteBuffer();
      ByteBufferInput byteBufferInput0 = new ByteBufferInput(byteBuffer0, true);
      // Undeclared exception!
      try { 
        byteBufferInput0.skipField(66);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ByteString byteString0 = ByteString.bytesDefaultValue("}]@vBg@;; c6*R6]");
      ByteBuffer byteBuffer0 = byteString0.asReadOnlyByteBuffer();
      ByteBufferInput byteBufferInput0 = new ByteBufferInput(byteBuffer0, true);
      byteBufferInput0.skipField((-71));
      assertTrue(byteBufferInput0.decodeNestedMessageAsGroup);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ByteString byteString0 = ByteString.bytesDefaultValue("}]@vBg@;; c6*R6]");
      ByteBuffer byteBuffer0 = byteString0.asReadOnlyByteBuffer();
      ByteBufferInput byteBufferInput0 = new ByteBufferInput(byteBuffer0, true);
      byteBufferInput0.readSInt64();
      try { 
        byteBufferInput0.skipMessage();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Protocol message tag had invalid wire type.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      CodedInput codedInput0 = new CodedInput(byteArray0, 1, 87, true);
      ByteBuffer byteBuffer0 = codedInput0.readByteBuffer();
      ByteBufferInput byteBufferInput0 = new ByteBufferInput(byteBuffer0, true);
      try { 
        byteBufferInput0.skipField(1475);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Protocol message end-group tag did not match expected tag.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteString byteString0 = ByteString.copyFrom(byteArray0);
      ByteBuffer byteBuffer0 = byteString0.asReadOnlyByteBuffer();
      ByteBufferInput byteBufferInput0 = new ByteBufferInput(byteBuffer0, false);
      try { 
        byteBufferInput0.checkLastTagWas((byte) (-128));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Protocol message end-group tag did not match expected tag.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteString byteString0 = ByteString.copyFrom(byteArray0);
      ByteBuffer byteBuffer0 = byteString0.asReadOnlyByteBuffer();
      ByteBufferInput byteBufferInput0 = new ByteBufferInput(byteBuffer0, false);
      long long0 = byteBufferInput0.readSFixed64();
      assertEquals(0L, long0);
      
      byteBufferInput0.skipMessage();
      assertFalse(byteBufferInput0.decodeNestedMessageAsGroup);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteString byteString0 = ByteString.copyFrom(byteArray0);
      ByteBuffer byteBuffer0 = byteString0.asReadOnlyByteBuffer();
      ByteBufferInput byteBufferInput0 = new ByteBufferInput(byteBuffer0, true);
      try { 
        byteBufferInput0.readTag();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Protocol message contained an invalid tag (zero).
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ByteString byteString0 = ByteString.bytesDefaultValue("");
      ByteBuffer byteBuffer0 = byteString0.asReadOnlyByteBuffer();
      ByteBufferInput byteBufferInput0 = new ByteBufferInput(byteBuffer0, true);
      byteBufferInput0.getLastTag();
      LowCopyProtostuffOutput lowCopyProtostuffOutput0 = new LowCopyProtostuffOutput();
      Schema<LowCopyProtostuffOutput> schema0 = (Schema<LowCopyProtostuffOutput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(schema0).isInitialized(any());
      // Undeclared exception!
      try { 
        byteBufferInput0.mergeObject(lowCopyProtostuffOutput0, schema0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.ByteBufferInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteString byteString0 = ByteString.wrap(byteArray0);
      ByteBuffer byteBuffer0 = byteString0.asReadOnlyByteBuffer();
      ByteBufferInput byteBufferInput0 = new ByteBufferInput(byteBuffer0, true);
      assertEquals(0, byteBufferInput0.getLastTag());
      
      Schema<ByteBufferInput> schema0 = (Schema<ByteBufferInput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      byteBufferInput0.handleUnknownField((int) 100, schema0);
      boolean boolean0 = byteBufferInput0.isCurrentFieldPacked();
      assertFalse(boolean0);
      assertTrue(byteBufferInput0.decodeNestedMessageAsGroup);
  }
}
