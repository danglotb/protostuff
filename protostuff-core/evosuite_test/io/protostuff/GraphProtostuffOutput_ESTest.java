/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 14 11:55:00 GMT 2017
 */

package io.protostuff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.protostuff.ByteArrayInput;
import io.protostuff.GraphByteArrayInput;
import io.protostuff.GraphProtostuffOutput;
import io.protostuff.LinkedBuffer;
import io.protostuff.LowCopyProtostuffOutput;
import io.protostuff.ProtostuffOutput;
import io.protostuff.Schema;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GraphProtostuffOutput_ESTest extends GraphProtostuffOutput_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      GraphProtostuffOutput graphProtostuffOutput0 = new GraphProtostuffOutput((ProtostuffOutput) null);
      GraphProtostuffOutput graphProtostuffOutput1 = new GraphProtostuffOutput((ProtostuffOutput) null, 3);
      Schema<GraphProtostuffOutput> schema0 = (Schema<GraphProtostuffOutput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        graphProtostuffOutput0.writeObject(1067, graphProtostuffOutput1, schema0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.GraphProtostuffOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      GraphProtostuffOutput graphProtostuffOutput0 = new GraphProtostuffOutput((ProtostuffOutput) null, 1993);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, (byte)0);
      LinkedBuffer linkedBuffer1 = new LinkedBuffer(699, linkedBuffer0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer1);
      GraphProtostuffOutput graphProtostuffOutput0 = new GraphProtostuffOutput(protostuffOutput0);
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, true);
      GraphByteArrayInput graphByteArrayInput0 = new GraphByteArrayInput(byteArrayInput0);
      Schema<GraphByteArrayInput> schema0 = (Schema<GraphByteArrayInput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      graphProtostuffOutput0.writeObject(512, graphByteArrayInput0, schema0, true);
      LowCopyProtostuffOutput lowCopyProtostuffOutput0 = new LowCopyProtostuffOutput();
      Schema<LowCopyProtostuffOutput> schema1 = (Schema<LowCopyProtostuffOutput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      graphProtostuffOutput0.writeObject(256, lowCopyProtostuffOutput0, schema1, true);
      Schema<GraphByteArrayInput> schema2 = (Schema<GraphByteArrayInput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      graphProtostuffOutput0.writeObject((int) 0, graphByteArrayInput0, schema2, true);
      assertEquals(10, protostuffOutput0.getSize());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, (byte)0);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0);
      GraphProtostuffOutput graphProtostuffOutput0 = new GraphProtostuffOutput(protostuffOutput0, 0);
      LinkedBuffer.allocate(99999999);
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, true);
      GraphByteArrayInput graphByteArrayInput0 = new GraphByteArrayInput(byteArrayInput0);
      byteArrayInput0.readEnum();
      graphByteArrayInput0.readBytes();
      Schema<GraphByteArrayInput> schema0 = (Schema<GraphByteArrayInput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      graphProtostuffOutput0.writeObject(512, graphByteArrayInput0, schema0, true);
      LowCopyProtostuffOutput lowCopyProtostuffOutput0 = new LowCopyProtostuffOutput();
      lowCopyProtostuffOutput0.writeBool((-1775), false, true);
      Schema<LowCopyProtostuffOutput> schema1 = (Schema<LowCopyProtostuffOutput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      graphProtostuffOutput0.writeObject(256, lowCopyProtostuffOutput0, schema1, true);
      assertEquals(8, protostuffOutput0.getSize());
      assertArrayEquals(new byte[] {(byte) (-125), (byte)32, (byte) (-124)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)0;
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, (byte)0);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0);
      GraphProtostuffOutput graphProtostuffOutput0 = new GraphProtostuffOutput(protostuffOutput0, 0);
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, true);
      GraphByteArrayInput graphByteArrayInput0 = new GraphByteArrayInput(byteArrayInput0);
      byteArrayInput0.readEnum();
      graphByteArrayInput0.readBytes();
      Schema<GraphByteArrayInput> schema0 = (Schema<GraphByteArrayInput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      graphProtostuffOutput0.writeObject(512, graphByteArrayInput0, schema0, false);
      Schema<GraphByteArrayInput> schema1 = (Schema<GraphByteArrayInput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      graphProtostuffOutput0.writeObject(512, graphByteArrayInput0, schema1, true);
      LowCopyProtostuffOutput lowCopyProtostuffOutput0 = new LowCopyProtostuffOutput();
      Schema<LowCopyProtostuffOutput> schema2 = (Schema<LowCopyProtostuffOutput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      graphProtostuffOutput0.writeObject(256, lowCopyProtostuffOutput0, schema2, true);
      assertArrayEquals(new byte[] {(byte) (-125), (byte)32, (byte) (-124)}, byteArray0);
      assertEquals(11, protostuffOutput0.getSize());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)46;
      byteArray0[4] = (byte)46;
      byteArray0[6] = (byte)46;
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, (-634), (byte)46);
      LinkedBuffer linkedBuffer1 = new LinkedBuffer(0, linkedBuffer0);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer1);
      ProtostuffOutput protostuffOutput1 = protostuffOutput0.clear();
      GraphProtostuffOutput graphProtostuffOutput0 = null;
      try {
        graphProtostuffOutput0 = new GraphProtostuffOutput(protostuffOutput1, (-317));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // expectedMaxSize is negative: -317
         //
         verifyException("io.protostuff.GraphProtostuffOutput$IdentityMap", e);
      }
  }
}
