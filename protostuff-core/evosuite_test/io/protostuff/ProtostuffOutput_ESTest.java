/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 14 11:36:16 GMT 2017
 */

package io.protostuff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.protostuff.ByteArrayInput;
import io.protostuff.ByteString;
import io.protostuff.LinkedBuffer;
import io.protostuff.ProtobufOutput;
import io.protostuff.ProtostuffOutput;
import io.protostuff.Schema;
import io.protostuff.WriteSession;
import io.protostuff.WriteSink;
import java.io.OutputStream;
import java.nio.ByteBuffer;
import java.nio.ReadOnlyBufferException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ProtostuffOutput_ESTest extends ProtostuffOutput_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)21;
      byteArray0[4] = (byte)111;
      byteArray0[5] = (byte) (-37);
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, 0);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0);
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, true);
      Schema<ByteArrayInput> schema0 = (Schema<ByteArrayInput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      protostuffOutput0.writeObject(256, byteArrayInput0, schema0, false);
      protostuffOutput0.writeSInt64((-883), (-883), true);
      protostuffOutput0.writeSFixed64((byte)16, 0L, true);
      protostuffOutput0.writeInt64(3645, 1L, true);
      ByteString byteString0 = ByteString.copyFromUtf8("x!7}9C+APBYI");
      ByteBuffer byteBuffer0 = byteString0.asReadOnlyByteBuffer();
      protostuffOutput0.writeUInt64(858, (byte)33, false);
      // Undeclared exception!
      try { 
        byteBuffer0.put(256, (byte)33);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBufferR", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(0);
      WriteSession writeSession0 = new WriteSession(linkedBuffer0);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0);
      ProtostuffOutput protostuffOutput1 = protostuffOutput0.clear();
      protostuffOutput1.writeInt32(1189, 1073741824, false);
      protostuffOutput1.writeFixed32(512, 0, false);
      protostuffOutput0.writeSInt32(1, 2, false);
      assertEquals(15, protostuffOutput0.getSize());
      
      protostuffOutput1.writeInt32((-3925), (-3165), false);
      assertEquals(30, protostuffOutput1.getSize());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[3] = (byte)21;
      byteArray0[4] = (byte)111;
      byteArray0[5] = (byte) (-37);
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, 0);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0);
      protostuffOutput0.writeSInt64((-883), (-883), true);
      protostuffOutput0.writeSFixed32((byte)15, 51, true);
      protostuffOutput0.writeInt32((byte)9, 512, true);
      assertArrayEquals(new byte[] {(byte) (-24), (byte) (-56), (byte) (-1), (byte) (-1), (byte)15, (byte) (-27)}, byteArray0);
      assertEquals(15, protostuffOutput0.getSize());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)21;
      byteArray0[4] = (byte)111;
      byteArray0[5] = (byte) (-37);
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, 0);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0);
      protostuffOutput0.writeSInt64((-883), (-883), true);
      protostuffOutput0.writeInt32((byte) (-1), 0, true);
      assertArrayEquals(new byte[] {(byte) (-24), (byte) (-56), (byte) (-1), (byte) (-1), (byte)15, (byte) (-27)}, byteArray0);
      assertEquals(13, protostuffOutput0.getSize());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "IZf9`ae%MrlcBa%S");
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)21;
      byteArray0[4] = (byte)111;
      byteArray0[5] = (byte) (-37);
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, 0);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0);
      protostuffOutput0.writeSInt64((-883), (-883), true);
      protostuffOutput0.writeByteRange(false, 256, byteArray0, 298, 536870912, true);
      assertArrayEquals(new byte[] {(byte) (-24), (byte) (-56), (byte) (-1), (byte) (-1), (byte)15, (byte) (-27)}, byteArray0);
      assertEquals(536870926, protostuffOutput0.getSize());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)21;
      byteArray0[4] = (byte)111;
      byteArray0[5] = (byte) (-37);
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, 0);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0);
      protostuffOutput0.writeSInt64((-883), (-883), true);
      protostuffOutput0.writeBool((-1866), true, true);
      assertEquals(13, protostuffOutput0.getSize());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)21;
      byteArray0[4] = (byte)111;
      byteArray0[5] = (byte) (-37);
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, 0);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0);
      protostuffOutput0.writeSInt64((-883), (-883), true);
      protostuffOutput0.writeFloat(3, 0.0F, false);
      protostuffOutput0.writeDouble((byte) (-56), 0.0, true);
      assertArrayEquals(new byte[] {(byte) (-24), (byte) (-56), (byte) (-1), (byte) (-1), (byte)15, (byte) (-27)}, byteArray0);
      assertEquals(25, protostuffOutput0.getSize());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      WriteSink writeSink0 = WriteSink.BUFFERED;
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(0);
      WriteSession writeSession0 = new WriteSession(linkedBuffer0);
      LinkedBuffer linkedBuffer1 = writeSink0.writeDouble((-1760.4), writeSession0, linkedBuffer0);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer1);
      ProtostuffOutput protostuffOutput1 = protostuffOutput0.clear();
      protostuffOutput1.writeInt32(1189, 1073741824, false);
      linkedBuffer1.offset = 512;
      protostuffOutput1.writeFixed32(512, 0, false);
      protostuffOutput0.writeSInt32(1, 2, false);
      protostuffOutput1.writeString(67, "", false);
      assertEquals(18, protostuffOutput1.getSize());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)116;
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, (-834));
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0);
      ProtostuffOutput protostuffOutput1 = protostuffOutput0.clear();
      // Undeclared exception!
      try { 
        protostuffOutput1.writeInt32((-2461), 0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -834
         //
         verifyException("io.protostuff.WriteSink$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      WriteSink writeSink0 = WriteSink.STREAMED;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)0;
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, (byte)51);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0);
      WriteSession writeSession0 = protostuffOutput0.clear();
      LinkedBuffer linkedBuffer1 = writeSink0.writeStrAscii("", writeSession0, writeSession0.head);
      ProtostuffOutput protostuffOutput1 = new ProtostuffOutput(linkedBuffer1, (OutputStream) null);
      // Undeclared exception!
      try { 
        protostuffOutput1.writeEnum((-6515), (byte)51, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 51
         //
         verifyException("io.protostuff.WriteSink$2", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput((LinkedBuffer) null);
      // Undeclared exception!
      try { 
        protostuffOutput0.writeDouble((-492), (-492), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.WriteSink$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(0);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0);
      protostuffOutput0.writeUInt32(512, 0, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-43);
      protostuffOutput0.writeByteArray(9, byteArray0, true);
      protostuffOutput0.writeUInt32((-1554), (-1109), true);
      protostuffOutput0.writeFixed64((-4566), 256, false);
      protostuffOutput0.writeUInt32(5, (-1109), false);
      assertEquals(41, protostuffOutput0.getSize());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-21);
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, (byte) (-21), (-2808));
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0);
      // Undeclared exception!
      try { 
        protostuffOutput0.writeUInt32(256, (byte) (-21), true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2808
         //
         verifyException("io.protostuff.WriteSink$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput((LinkedBuffer) null);
      // Undeclared exception!
      try { 
        protostuffOutput0.writeFixed32(0, 0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.WriteSink$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(1073741824);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0);
      ProtostuffOutput protostuffOutput1 = protostuffOutput0.clear();
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte)98;
      byteArray0[5] = (byte)110;
      byteArray0[6] = (byte) (-68);
      byteArray0[7] = (byte) (-108);
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, true);
      ByteArrayInput byteArrayInput1 = byteArrayInput0.reset(2, 512);
      ByteBuffer byteBuffer0 = byteArrayInput1.readByteBuffer();
      protostuffOutput1.writeBytes(256, byteBuffer0, true);
      assertEquals(5, protostuffOutput1.getSize());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)21;
      byteArray0[4] = (byte)111;
      byteArray0[5] = (byte)111;
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, 0);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0);
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, false);
      Schema<ByteArrayInput> schema0 = (Schema<ByteArrayInput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      protostuffOutput0.writeFixed64((byte)0, (byte)9, false);
      protostuffOutput0.writeObject(256, byteArrayInput0, schema0, false);
      protostuffOutput0.writeSInt64((-883), (-883), true);
      protostuffOutput0.writeSFixed64((byte)21, 0L, true);
      protostuffOutput0.writeInt64(3645, (byte)1, true);
      ByteString byteString0 = ByteString.copyFromUtf8("x!7}9C+APBYI");
      assertFalse(byteString0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      WriteSink writeSink0 = WriteSink.BUFFERED;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-52);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)83;
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, 2054, 1678);
      LinkedBuffer linkedBuffer1 = new LinkedBuffer(byteArray0, (byte)0, 31, linkedBuffer0);
      ProtobufOutput protobufOutput0 = new ProtobufOutput(linkedBuffer1, 1);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0);
      LinkedBuffer linkedBuffer2 = protobufOutput0.sink.writeInt16(4, protostuffOutput0, protostuffOutput0.head);
      LinkedBuffer linkedBuffer3 = writeSink0.writeInt16LE(51, protobufOutput0, linkedBuffer2);
      ProtostuffOutput protostuffOutput1 = new ProtostuffOutput(linkedBuffer3, (OutputStream) null, (WriteSession.FlushHandler) null, 256);
      protostuffOutput1.writeEnum(0, 1655, false);
      protostuffOutput1.writeBool(0, false, false);
      // Undeclared exception!
      try { 
        protostuffOutput0.writeSFixed32((-3228), 51, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1678
         //
         verifyException("io.protostuff.WriteSink$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput((LinkedBuffer) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-58);
      byteArray0[0] = (byte)31;
      ByteString byteString0 = ByteString.copyFrom(byteArray0);
      // Undeclared exception!
      try { 
        protostuffOutput0.writeBytes((-1365), byteString0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.WriteSink$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      WriteSink writeSink0 = WriteSink.BUFFERED;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)43;
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, 8);
      ProtobufOutput protobufOutput0 = new ProtobufOutput(linkedBuffer0, 8);
      LinkedBuffer linkedBuffer1 = writeSink0.drain(protobufOutput0, linkedBuffer0);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer1, (OutputStream) null, (WriteSession.FlushHandler) null, 0);
      protostuffOutput0.writeFloat(1464, 1234.0F, true);
      assertEquals(6, protostuffOutput0.getSize());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      WriteSink writeSink0 = WriteSink.BUFFERED;
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(0);
      WriteSession writeSession0 = new WriteSession(linkedBuffer0);
      LinkedBuffer linkedBuffer1 = writeSink0.writeDouble((-1760.4), writeSession0, linkedBuffer0);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer1);
      ProtostuffOutput protostuffOutput1 = protostuffOutput0.clear();
      protostuffOutput1.writeInt32(1189, 1073741824, false);
      protostuffOutput1.writeFixed32(512, 0, false);
      protostuffOutput0.writeSInt32(1, 2, false);
      byte[] byteArray0 = new byte[3];
      protostuffOutput1.writeFixed64(2246, 1L, true);
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)0;
      // Undeclared exception!
      try { 
        protostuffOutput1.writeByteRange(false, 512, byteArray0, 0, 512, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      WriteSink writeSink0 = WriteSink.BUFFERED;
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(0);
      ProtobufOutput protobufOutput0 = new ProtobufOutput(linkedBuffer0);
      LinkedBuffer linkedBuffer1 = writeSink0.writeStrAscii("Y@4P<T=", protobufOutput0, protobufOutput0.head);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer1, (OutputStream) null, (WriteSession.FlushHandler) null, 512);
      protobufOutput0.writeString(2, "Y@4P<T=", false);
      ProtostuffOutput protostuffOutput1 = protostuffOutput0.clear();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      protostuffOutput1.writeDouble(0, 512, false);
      byteArray0[3] = (byte)81;
      protostuffOutput1.writeByteArray(1, byteArray0, false);
      protostuffOutput0.writeBool(507, true, false);
      protostuffOutput0.writeString(256, "Y@4P<T=", false);
      protostuffOutput0.writeSFixed64(512, 1689L, false);
      protobufOutput0.writeEnum((byte)81, 0, false);
      protostuffOutput1.writeString(512, "", false);
      protostuffOutput1.writeFloat(512, (-1.0F), false);
      protostuffOutput1.writeUInt64(1, (byte)81, false);
      protostuffOutput1.writeInt32(0, (-819), false);
      assertEquals(60, protostuffOutput1.getSize());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = null;
      int int0 = 544;
      LinkedBuffer linkedBuffer0 = new LinkedBuffer((byte[]) null, 544, 544);
      MockFile mockFile0 = new MockFile("3vF&.f^LIG");
      MockFile mockFile1 = new MockFile(mockFile0, "3vF&.f^LIG");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0, mockFileOutputStream0);
      int int1 = 2246;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        protostuffOutput0.writeUInt32(2246, 2246, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.WriteSink$2", e);
      }
  }
}
