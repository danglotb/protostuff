/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 14 11:41:55 GMT 2017
 */

package io.protostuff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.protostuff.CodedInput;
import io.protostuff.GraphIOUtil;
import io.protostuff.GraphProtostuffOutput;
import io.protostuff.LinkedBuffer;
import io.protostuff.ProtostuffOutput;
import io.protostuff.Schema;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GraphIOUtil_ESTest extends GraphIOUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Serializing to a LinkedBuffer threw an IOException (should never happen).", "Serializing to a LinkedBuffer threw an IOException (should never happen).");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      byte[] byteArray0 = new byte[1];
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0, 64, 4096);
      Schema<CodedInput> schema0 = (Schema<CodedInput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, (-2378), 0);
      LinkedBuffer linkedBuffer1 = new LinkedBuffer(512, linkedBuffer0);
      int int0 = GraphIOUtil.optWriteDelimitedTo((OutputStream) mockFileOutputStream0, codedInput0, schema0, linkedBuffer1);
      assertEquals(1L, mockFile0.length());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Serializing to a LinkedBuffer threw an IOException (should never happen).", "Serializing to a LinkedBuffer threw an IOException (should never happen).");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      Schema<BufferedInputStream> schema0 = (Schema<BufferedInputStream>) mock(Schema.class, new ViolatedAssumptionAnswer());
      int int0 = GraphIOUtil.writeDelimitedTo((DataOutput) dataOutputStream0, bufferedInputStream0, schema0);
      assertEquals(1L, mockFile0.length());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      CodedInput codedInput0 = new CodedInput(mockFileInputStream0, false);
      Schema<CodedInput> schema0 = (Schema<CodedInput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(127);
      int int0 = GraphIOUtil.writeTo((OutputStream) null, codedInput0, schema0, linkedBuffer0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MockFile mockFile0 = new MockFile("R;T|Yy6R$lZ>%");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      byte[] byteArray0 = new byte[4];
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, 1735, (byte)0);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0, mockFileOutputStream0);
      Schema<ProtostuffOutput> schema0 = (Schema<ProtostuffOutput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        GraphIOUtil.writeTo((OutputStream) mockFileOutputStream0, protostuffOutput0, schema0, linkedBuffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer previously used and had not been reset.
         //
         verifyException("io.protostuff.GraphIOUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, (-2286), (byte)121);
      GraphProtostuffOutput graphProtostuffOutput0 = new GraphProtostuffOutput((ProtostuffOutput) null, (byte)121);
      Schema<GraphProtostuffOutput> schema0 = (Schema<GraphProtostuffOutput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        GraphIOUtil.writeTo(linkedBuffer0, graphProtostuffOutput0, schema0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer previously used and had not been reset.
         //
         verifyException("io.protostuff.GraphIOUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Schema<Integer> schema0 = (Schema<Integer>) mock(Schema.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[8];
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(1869);
      LinkedBuffer linkedBuffer1 = new LinkedBuffer(byteArray0, (byte)71, (-840), linkedBuffer0);
      // Undeclared exception!
      try { 
        GraphIOUtil.toByteArray(integer0, schema0, linkedBuffer1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer previously used and had not been reset.
         //
         verifyException("io.protostuff.GraphIOUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0, 127, 0);
      Schema<CodedInput> schema0 = (Schema<CodedInput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(8);
      try { 
        GraphIOUtil.mergeDelimitedFrom((InputStream) byteArrayInputStream0, codedInput0, schema0, linkedBuffer0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // size limit exceeded. 127 > 8
         //
         verifyException("io.protostuff.GraphIOUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0, 127, 0);
      Schema<CodedInput> schema0 = (Schema<CodedInput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(8);
      int int0 = GraphIOUtil.mergeDelimitedFrom((InputStream) byteArrayInputStream0, codedInput0, schema0, linkedBuffer0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)34;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      Schema<DataInputStream> schema0 = (Schema<DataInputStream>) mock(Schema.class, new ViolatedAssumptionAnswer());
      try { 
        GraphIOUtil.mergeDelimitedFrom((InputStream) dataInputStream0, dataInputStream0, schema0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // While parsing a protocol message, the input ended unexpectedly in the middle of a field.  This could mean either than the input has been truncated or that an embedded message misreported its own length.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }
}
