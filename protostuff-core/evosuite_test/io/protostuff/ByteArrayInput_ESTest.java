/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 14 11:33:17 GMT 2017
 */

package io.protostuff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.protostuff.ByteArrayInput;
import io.protostuff.CodedInput;
import io.protostuff.GraphByteArrayInput;
import io.protostuff.GraphProtostuffOutput;
import io.protostuff.LinkBuffer;
import io.protostuff.LinkedBuffer;
import io.protostuff.LowCopyProtobufOutput;
import io.protostuff.LowCopyProtostuffOutput;
import io.protostuff.Output;
import io.protostuff.ProtobufOutput;
import io.protostuff.ProtostuffOutput;
import io.protostuff.Schema;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PushbackInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ByteArrayInput_ESTest extends ByteArrayInput_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte)8;
      byteArray0[5] = (byte) (-85);
      byteArray0[7] = (byte) (-41);
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, false);
      byteArrayInput0.readBool();
      Schema<ProtostuffOutput> schema0 = (Schema<ProtostuffOutput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      byteArrayInput0.readFieldNumber(schema0);
      byteArrayInput0.readSInt64();
      // Undeclared exception!
      try { 
        byteArrayInput0.readFixed32();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("io.protostuff.ByteArrayInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte) (-126);
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte) (-126);
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, false);
      Schema<ProtostuffOutput> schema0 = (Schema<ProtostuffOutput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      try { 
        byteArrayInput0.transferByteRangeTo((Output) null, false, (-965), false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // CodedInput encountered an embedded string or message which claimed to have negative size.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte) (-126);
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte) (-85);
      byteArray0[7] = (byte) (-126);
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, false);
      byteArrayInput0.readSInt32();
      Schema<ProtostuffOutput> schema0 = (Schema<ProtostuffOutput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      byteArrayInput0.readFieldNumber(schema0);
      // Undeclared exception!
      try { 
        byteArrayInput0.readFixed32();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("io.protostuff.ByteArrayInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)96;
      byteArray0[5] = (byte)42;
      byteArray0[3] = (byte) (-64);
      byteArray0[7] = (byte)1;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, false);
      byteArrayInput0.skipField((byte)1);
      // Undeclared exception!
      try { 
        byteArrayInput0.readDouble();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("io.protostuff.ByteArrayInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte) (-65);
      byteArray0[5] = (byte)48;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, false);
      byteArrayInput0.readString();
      LinkBuffer linkBuffer0 = new LinkBuffer();
      LinkBuffer linkBuffer1 = linkBuffer0.writeInt16((byte)48);
      LinkBuffer linkBuffer2 = linkBuffer1.writeFloat(1.0F);
      LowCopyProtobufOutput lowCopyProtobufOutput0 = new LowCopyProtobufOutput(linkBuffer2);
      Schema<LowCopyProtobufOutput> schema0 = (Schema<LowCopyProtobufOutput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(schema0).isInitialized(any());
      // Undeclared exception!
      try { 
        byteArrayInput0.mergeObject(lowCopyProtobufOutput0, schema0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.ByteArrayInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[4] = (byte)3;
      byteArray0[7] = (byte)3;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, true);
      Schema<PushbackInputStream> schema0 = (Schema<PushbackInputStream>) mock(Schema.class, new ViolatedAssumptionAnswer());
      try { 
        byteArrayInput0.readFieldNumber(schema0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Protocol message contained an invalid tag (zero).
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)79;
      byteArray0[3] = (byte) (-85);
      byteArray0[6] = (byte) (-37);
      byteArray0[7] = (byte) (-41);
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, false);
      try { 
        byteArrayInput0.readString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // CodedInput encountered an embedded string or message which claimed to have negative size.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-43);
      byteArray0[3] = (byte) (-3);
      byteArray0[5] = (byte)21;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, true);
      ByteArrayInput byteArrayInput1 = byteArrayInput0.setBounds(0, (byte) (-3));
      byteArrayInput1.skipField(882);
      byteArrayInput0.readRawVarint64();
      byteArrayInput0.readSInt64();
      try { 
        byteArrayInput1.readByteBuffer();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // CodedInput encountered an embedded string or bytes that misreported its size.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte) (-37);
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte) (-85);
      byteArray0[6] = (byte) (-68);
      byteArray0[7] = (byte) (-41);
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, false);
      try { 
        byteArrayInput0.readString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // CodedInput encountered an embedded string or bytes that misreported its size.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte)3;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, (byte)0, 0, true);
      byteArrayInput0.skipField(29);
      try { 
        byteArrayInput0.readBytes();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // CodedInput encountered an embedded string or bytes that misreported its size.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)35;
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(5041);
      LinkedBuffer linkedBuffer1 = new LinkedBuffer(0, linkedBuffer0);
      ProtobufOutput protobufOutput0 = new ProtobufOutput(linkedBuffer1, 512);
      Schema<ProtobufOutput> schema0 = (Schema<ProtobufOutput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, false);
      try { 
        byteArrayInput0.skipMessage();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Protocol message end-group tag did not match expected tag.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte) (-125);
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte) (-60);
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, true);
      ByteArrayInput byteArrayInput1 = byteArrayInput0.setBounds((byte)0, (-247));
      byteArrayInput0.isCurrentFieldPacked();
      byteArrayInput1.readRawLittleEndian64();
      byteArrayInput0.readBool();
      assertEquals((-247), byteArrayInput0.currentLimit());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte)90;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, false);
      byteArrayInput0.readDouble();
      byteArrayInput0.readString();
      // Undeclared exception!
      try { 
        byteArrayInput0.readSInt32();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("io.protostuff.ByteArrayInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte)3;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, (byte)0, (byte)3, true);
      byteArrayInput0.readBytes();
      assertEquals(2, byteArrayInput0.currentOffset());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, true);
      LowCopyProtostuffOutput lowCopyProtostuffOutput0 = new LowCopyProtostuffOutput();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArrayInput0.transferByteRangeTo(lowCopyProtostuffOutput0, true, 614, false);
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte)96;
      byteArray0[5] = (byte)42;
      byteArray0[4] = (byte) (-64);
      byteArray0[7] = (byte)1;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, true);
      byteArrayInput0.readDouble();
      byteArrayInput0.readByteArray();
      assertEquals(9, byteArrayInput0.currentOffset());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte)37;
      byteArray0[6] = (byte)34;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, false);
      byteArrayInput0.skipMessage();
      assertEquals(7, byteArrayInput0.currentOffset());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)3;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, (byte)9, (byte)3, false);
      // Undeclared exception!
      try { 
        byteArrayInput0.skipField((byte)9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("io.protostuff.ByteArrayInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte) (-125);
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte) (-60);
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, true);
      ByteArrayInput byteArrayInput1 = byteArrayInput0.setBounds((byte)0, (-247));
      int int0 = byteArrayInput1.readFieldNumber((Schema<Object>) null);
      assertEquals((-247), byteArrayInput0.currentLimit());
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, (-1), 0, false);
      byteArrayInput0.skipMessage();
      Schema<ByteArrayInput> schema0 = (Schema<ByteArrayInput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      byteArrayInput0.readFieldNumber(schema0);
      // Undeclared exception!
      try { 
        byteArrayInput0.readEnum();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("io.protostuff.ByteArrayInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-100);
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, (byte)1, (byte)1, false);
      ByteArrayInput byteArrayInput1 = byteArrayInput0.reset((-360), (byte)1);
      ByteArrayInput byteArrayInput2 = byteArrayInput1.setBounds((-65), (byte) (-100));
      try { 
        byteArrayInput2.checkLastTagWas(2001);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Protocol message end-group tag did not match expected tag.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte)20;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, false);
      ByteArrayInput byteArrayInput1 = byteArrayInput0.setBounds((byte) (-3), (byte)20);
      try { 
        byteArrayInput1.checkLastTagWas((byte) (-3));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Protocol message end-group tag did not match expected tag.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)64;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)40;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, true);
      byteArrayInput0.readTag();
      byteArrayInput0.setBounds(3855, 0);
      ByteArrayInput byteArrayInput1 = byteArrayInput0.reset(198, 24);
      ByteArrayInput byteArrayInput2 = byteArrayInput1.setBounds((byte)96, (byte)48);
      // Undeclared exception!
      try { 
        byteArrayInput2.readUInt32();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 96
         //
         verifyException("io.protostuff.ByteArrayInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte)94;
      byteArray0[4] = (byte)117;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, true);
      ByteArrayInput byteArrayInput1 = byteArrayInput0.reset((byte)117, 930);
      byteArrayInput1.setBounds((byte)9, (-2414));
      // Undeclared exception!
      try { 
        byteArrayInput1.readFieldNumber((Schema<GraphProtostuffOutput>) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("io.protostuff.ByteArrayInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-49);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)86;
      byteArray0[7] = (byte)122;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, true);
      byteArrayInput0.readSInt32();
      byteArrayInput0.skipField(0);
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, (byte)0);
      LinkedBuffer linkedBuffer1 = null;
      try {
        linkedBuffer1 = new LinkedBuffer((-1223), linkedBuffer0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.LinkedBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte)20;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, true);
      // Undeclared exception!
      try { 
        byteArrayInput0.skipField(29);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("io.protostuff.ByteArrayInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte) (-19);
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, (byte)7, 0, false);
      int int0 = byteArrayInput0.getLastTag();
      assertEquals(0, int0);
      assertEquals(7, byteArrayInput0.currentLimit());
      assertEquals(7, byteArrayInput0.currentOffset());
      assertFalse(byteArrayInput0.decodeNestedMessageAsGroup);
      assertFalse(byteArrayInput0.isCurrentFieldPacked());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)24;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, false);
      byteArrayInput0.readInt64();
      byteArrayInput0.readSInt32();
      // Undeclared exception!
      try { 
        byteArrayInput0.readFixed32();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("io.protostuff.ByteArrayInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-103);
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, (byte) (-70), 2097152, false);
      ByteArrayInput byteArrayInput1 = byteArrayInput0.reset(0, 2097152);
      LinkBuffer linkBuffer0 = new LinkBuffer(2934);
      LinkBuffer linkBuffer1 = linkBuffer0.writeFloat((byte) (-70));
      LinkBuffer linkBuffer2 = linkBuffer1.writeInt16((-1));
      LowCopyProtobufOutput lowCopyProtobufOutput0 = new LowCopyProtobufOutput(linkBuffer2);
      // Undeclared exception!
      try { 
        byteArrayInput1.transferByteRangeTo(lowCopyProtobufOutput0, true, (-959), true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)56;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, (byte)0, (byte)0, true);
      Schema<CodedInput> schema0 = (Schema<CodedInput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(schema0).isInitialized(any());
      doReturn((Object) null).when(schema0).newMessage();
      // Undeclared exception!
      try { 
        byteArrayInput0.mergeObject((CodedInput) null, schema0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.ByteArrayInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-43);
      byteArray0[3] = (byte)3;
      byteArray0[5] = (byte)21;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, true);
      byteArrayInput0.readRawVarint64();
      byteArrayInput0.readSInt64();
      try { 
        byteArrayInput0.readByteBuffer();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // CodedInput encountered an embedded string or bytes that misreported its size.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)104;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, (byte)0, (byte)0, false);
      GraphByteArrayInput graphByteArrayInput0 = new GraphByteArrayInput(byteArrayInput0);
      boolean boolean0 = byteArrayInput0.readBool();
      assertEquals(1, byteArrayInput0.currentOffset());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)0;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, false);
      int int0 = byteArrayInput0.currentLimit();
      assertFalse(byteArrayInput0.decodeNestedMessageAsGroup);
      assertFalse(byteArrayInput0.isCurrentFieldPacked());
      assertEquals(4, int0);
      assertEquals(0, byteArrayInput0.getLastTag());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)48;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, false);
      LowCopyProtobufOutput lowCopyProtobufOutput0 = new LowCopyProtobufOutput();
      byteArrayInput0.transferByteRangeTo(lowCopyProtobufOutput0, false, 549, false);
      byteArrayInput0.readString();
      assertEquals(2, byteArrayInput0.currentOffset());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-32);
      byteArray0[7] = (byte)7;
      byteArray0[8] = (byte)1;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, false);
      byteArrayInput0.readFloat();
      Schema<CodedInput> schema0 = (Schema<CodedInput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(schema0).isInitialized(any());
      doReturn((Object) null).when(schema0).newMessage();
      // Undeclared exception!
      try { 
        byteArrayInput0.mergeObject((CodedInput) null, schema0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.ByteArrayInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte)15;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, true);
      int int0 = byteArrayInput0.currentOffset();
      assertTrue(byteArrayInput0.decodeNestedMessageAsGroup);
      assertEquals(0, int0);
      assertFalse(byteArrayInput0.isCurrentFieldPacked());
      assertEquals(6, byteArrayInput0.currentLimit());
      assertEquals(0, byteArrayInput0.getLastTag());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, (-196), (-190), false);
      // Undeclared exception!
      try { 
        byteArrayInput0.readUInt32();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -196
         //
         verifyException("io.protostuff.ByteArrayInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte) (-45);
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte) (-21);
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, (byte)0, (byte) (-45), true);
      int int0 = byteArrayInput0.readSFixed32();
      assertEquals(4, byteArrayInput0.currentOffset());
      assertEquals(819194624, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, 43, 43, false);
      ByteArrayInput byteArrayInput1 = byteArrayInput0.setBounds(43, 43);
      // Undeclared exception!
      try { 
        byteArrayInput1.readSFixed32();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 43
         //
         verifyException("io.protostuff.ByteArrayInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, false);
      // Undeclared exception!
      try { 
        byteArrayInput0.reset((-3242), (-3242));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length cannot be negative.
         //
         verifyException("io.protostuff.ByteArrayInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, 52429, 52429, true);
      // Undeclared exception!
      try { 
        byteArrayInput0.readFixed64();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 52429
         //
         verifyException("io.protostuff.ByteArrayInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)56;
      int int0 = (-1793);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, (-1), (-1793), true);
      // Undeclared exception!
      try { 
        byteArrayInput0.readFloat();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("io.protostuff.ByteArrayInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)33;
      byteArray0[4] = (byte) (-15);
      byteArray0[5] = (byte) (-95);
      byteArray0[6] = (byte)97;
      byteArray0[7] = (byte) (-5);
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, true);
      // Undeclared exception!
      try { 
        byteArrayInput0.skipMessage();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 58
         //
         verifyException("io.protostuff.ByteArrayInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-54);
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-3);
      byteArray0[4] = (byte) (-115);
      byteArray0[5] = (byte)55;
      byteArray0[7] = (byte)64;
      byteArray0[8] = (byte)50;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, false);
      byteArrayInput0.skipField((byte)64);
      byteArrayInput0.readSInt64();
      Schema<LowCopyProtobufOutput> schema0 = (Schema<LowCopyProtobufOutput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      byteArrayInput0.handleUnknownField((-351), schema0);
      Integer integer0 = new Integer((byte) (-54));
      byteArrayInput0.readBool();
      try { 
        byteArrayInput0.skipField((byte) (-1));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Protocol message tag had invalid wire type.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte) (-65);
      byteArray0[5] = (byte)48;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, false);
      byteArrayInput0.readString();
      LinkBuffer linkBuffer0 = new LinkBuffer();
      LinkBuffer linkBuffer1 = linkBuffer0.writeInt16((byte)48);
      LinkBuffer linkBuffer2 = linkBuffer1.writeFloat(1.0F);
      LowCopyProtobufOutput lowCopyProtobufOutput0 = new LowCopyProtobufOutput(linkBuffer2);
      Schema<LowCopyProtobufOutput> schema0 = (Schema<LowCopyProtobufOutput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(schema0).isInitialized(any());
      // Undeclared exception!
      try { 
        byteArrayInput0.mergeObject(lowCopyProtobufOutput0, schema0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.ByteArrayInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte)94;
      byteArray0[5] = (byte)48;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, false);
      LowCopyProtobufOutput lowCopyProtobufOutput0 = new LowCopyProtobufOutput();
      byteArrayInput0.transferByteRangeTo(lowCopyProtobufOutput0, false, 549, false);
      try { 
        byteArrayInput0.readString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // CodedInput encountered an embedded string or bytes that misreported its size.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)96;
      byteArray0[5] = (byte)42;
      byteArray0[3] = (byte) (-64);
      byteArray0[7] = (byte)1;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, false);
      byteArrayInput0.readDouble();
      assertEquals(8, byteArrayInput0.currentOffset());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte)3;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, (byte)0, 0, true);
      byteArrayInput0.readSInt32();
      try { 
        byteArrayInput0.readBytes();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // CodedInput encountered an embedded string or bytes that misreported its size.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ByteArrayInput byteArrayInput0 = new ByteArrayInput((byte[]) null, 0, 0, false);
      byteArrayInput0.skipMessage();
      Schema<GraphByteArrayInput> schema0 = (Schema<GraphByteArrayInput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      LowCopyProtostuffOutput lowCopyProtostuffOutput0 = new LowCopyProtostuffOutput();
      lowCopyProtostuffOutput0.writeSInt32(20, 600, true);
      lowCopyProtostuffOutput0.writeEnum(0, 0, false);
      // Undeclared exception!
      try { 
        byteArrayInput0.transferByteRangeTo(lowCopyProtostuffOutput0, true, 0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.ByteArrayInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte)60;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, true);
      ByteArrayInput byteArrayInput1 = byteArrayInput0.reset((byte)0, (byte)0);
      byteArrayInput1.readUInt64();
      ByteArrayInput byteArrayInput2 = byteArrayInput1.setBounds((byte)0, (byte)26);
      byteArrayInput2.readFixed32();
      byteArrayInput2.isCurrentFieldPacked();
      byteArrayInput2.readRawVarint64();
      Schema<InputStream> schema0 = (Schema<InputStream>) mock(Schema.class, new ViolatedAssumptionAnswer());
      try { 
        byteArrayInput2.readFieldNumber(schema0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Protocol message contained an invalid tag (zero).
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte) (-37);
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte) (-85);
      byteArray0[7] = (byte) (-41);
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, true);
      Schema<ProtostuffOutput> schema0 = (Schema<ProtostuffOutput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      byteArrayInput0.readFieldNumber(schema0);
      try { 
        byteArrayInput0.readFixed32();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // CodedInput encountered an embedded string or bytes that misreported its size.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-37);
      byteArray0[5] = (byte) (-85);
      byteArray0[7] = (byte) (-37);
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, false);
      Schema<ProtostuffOutput> schema0 = (Schema<ProtostuffOutput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      try { 
        byteArrayInput0.readFieldNumber(schema0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Protocol message contained an invalid tag (zero).
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte)8;
      byteArray0[5] = (byte) (-85);
      byteArray0[7] = (byte) (-41);
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, false);
      Schema<ProtostuffOutput> schema0 = (Schema<ProtostuffOutput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      byteArrayInput0.readFieldNumber(schema0);
      // Undeclared exception!
      try { 
        byteArrayInput0.readFixed32();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("io.protostuff.ByteArrayInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte) (-37);
      byteArray0[5] = (byte) (-85);
      byteArray0[7] = (byte) (-37);
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, false);
      Schema<ProtostuffOutput> schema0 = (Schema<ProtostuffOutput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      byteArrayInput0.readFieldNumber(schema0);
      // Undeclared exception!
      try { 
        byteArrayInput0.readFixed32();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("io.protostuff.ByteArrayInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-21);
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte)18;
      byteArray0[6] = (byte) (-74);
      byteArray0[7] = (byte)0;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, true);
      Schema<GraphByteArrayInput> schema0 = (Schema<GraphByteArrayInput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      byteArrayInput0.readTag();
      byteArrayInput0.readByteBuffer();
      byteArrayInput0.readFieldNumber(schema0);
      // Undeclared exception!
      try { 
        byteArrayInput0.readRawLittleEndian32();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("io.protostuff.ByteArrayInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte)20;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)20;
      byteArray1[1] = (byte) (-3);
      byteArray1[2] = (byte)20;
      byteArray1[3] = (byte) (-3);
      byteArray1[4] = (byte)20;
      byteArray1[5] = (byte) (-3);
      byteArray1[6] = (byte) (-3);
      byteArray1[7] = (byte) (-3);
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray1, true);
      ByteArrayInput byteArrayInput1 = byteArrayInput0.setBounds((byte) (-3), (byte)20);
      ByteArrayInput byteArrayInput2 = byteArrayInput1.reset((byte) (-3), 29);
      GraphByteArrayInput graphByteArrayInput0 = new GraphByteArrayInput(byteArrayInput1);
      Schema<GraphByteArrayInput> schema0 = (Schema<GraphByteArrayInput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(schema0).isInitialized(any());
      byteArrayInput2.mergeObject(graphByteArrayInput0, schema0);
      // Undeclared exception!
      try { 
        byteArrayInput0.readTag();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3
         //
         verifyException("io.protostuff.ByteArrayInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)20;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)20;
      byteArray1[2] = (byte)20;
      byteArray1[4] = (byte)20;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray1, true);
      byteArrayInput0.readSFixed64();
      ByteArrayInput byteArrayInput1 = byteArrayInput0.setBounds((byte)0, (byte)20);
      ByteArrayInput byteArrayInput2 = byteArrayInput1.reset((byte)0, 29);
      GraphByteArrayInput graphByteArrayInput0 = new GraphByteArrayInput(byteArrayInput1);
      Schema<GraphByteArrayInput> schema0 = (Schema<GraphByteArrayInput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(schema0).isInitialized(any());
      Schema<GraphProtostuffOutput> schema1 = (Schema<GraphProtostuffOutput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      byteArrayInput1.readFieldNumber(schema1);
      // Undeclared exception!
      try { 
        byteArrayInput2.mergeObject(graphByteArrayInput0, schema0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.ByteArrayInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-43);
      byteArray0[3] = (byte) (-3);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "AEZ<_vrM/`C@@v");
      byteArray0[5] = (byte) (-43);
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, true);
      byteArrayInput0.readInt64();
      ByteArrayInput byteArrayInput1 = byteArrayInput0.setBounds(0, (byte) (-3));
      byteArrayInput0.readRawVarint64();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      byteArrayInput0.readSInt64();
      byteArrayInput0.readEnum();
      // Undeclared exception!
      try { 
        byteArrayInput1.readByteBuffer();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("io.protostuff.ByteArrayInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)35;
      boolean boolean0 = true;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, 0, (-3041), true);
      // Undeclared exception!
      try { 
        byteArrayInput0.skipMessage();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("io.protostuff.ByteArrayInput", e);
      }
  }
}
