/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 14 11:50:02 GMT 2017
 */

package io.protostuff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.protostuff.ByteArrayInput;
import io.protostuff.ByteBufferInput;
import io.protostuff.CodedInput;
import io.protostuff.GraphByteArrayInput;
import io.protostuff.GraphCodedInput;
import io.protostuff.LinkBuffer;
import io.protostuff.LinkedBuffer;
import io.protostuff.LowCopyProtobufOutput;
import io.protostuff.LowCopyProtostuffOutput;
import io.protostuff.Output;
import io.protostuff.ProtobufOutput;
import io.protostuff.ProtostuffOutput;
import io.protostuff.Schema;
import java.io.ByteArrayInputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectStreamConstants;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CodedInput_ESTest extends CodedInput_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte) (-25);
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte) (-103);
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)46;
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte)64;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, Integer.MIN_VALUE, (byte)42);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, (byte)64);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      PipedInputStream pipedInputStream0 = new PipedInputStream((byte)64);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(dataInputStream0, pipedInputStream0);
      CodedInput codedInput0 = new CodedInput(sequenceInputStream0, byteArray0, true);
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, (-1056), 999, true);
      ByteArrayInput byteArrayInput1 = byteArrayInput0.setBounds((byte) (-103), (-1));
      GraphByteArrayInput graphByteArrayInput0 = new GraphByteArrayInput(byteArrayInput1);
      Schema<GraphByteArrayInput> schema0 = (Schema<GraphByteArrayInput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(schema0).isInitialized(any());
      // Undeclared exception!
      try { 
        codedInput0.mergeObject(graphByteArrayInput0, schema0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.CodedInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[3] = (byte)0;
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0);
      codedInput0.setSizeLimit((byte)0);
      codedInput0.setSizeLimit((byte)1);
      codedInput0.skipField((byte)66);
      codedInput0.getLastTag();
      codedInput0.skipRawBytes(0);
      codedInput0.readSInt32();
      codedInput0.readByteArray();
      codedInput0.skipRawBytes((byte)0);
      codedInput0.setSizeLimit((byte)1);
      assertEquals(4, codedInput0.getTotalBytesRead());
      
      codedInput0.reset();
      assertFalse(codedInput0.decodeNestedMessageAsGroup);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte)0;
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0);
      codedInput0.setSizeLimit((byte)0);
      try { 
        codedInput0.skipField((byte)1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // While parsing a protocol message, the input ended unexpectedly in the middle of a field.  This could mean either than the input has been truncated or that an embedded message misreported its own length.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)69;
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0);
      codedInput0.readRawVarint64();
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)69;
      byteArray1[1] = (byte)68;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      CodedInput.readRawVarint32((InputStream) byteArrayInputStream0, (int) (byte)0);
      // Undeclared exception!
      try { 
        CodedInput.readRawVarint32((DataInput) null, (byte)3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.CodedInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0);
      codedInput0.pushLimit(665);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.skip((byte) (-8));
      CodedInput.readRawVarint32((InputStream) byteArrayInputStream0, 65533);
      Schema<ByteBufferInput> schema0 = (Schema<ByteBufferInput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      codedInput0.getBytesUntilLimit();
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, (byte)0, 5);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0);
      codedInput0.transferByteRangeTo(protostuffOutput0, false, (byte)0, false);
      codedInput0.readInt32();
      codedInput0.readBytes();
      codedInput0.getBytesUntilLimit();
      long long0 = codedInput0.readSInt64();
      assertEquals(660, codedInput0.getBytesUntilLimit());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-34);
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0);
      codedInput0.pushLimit(665);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.skip((byte) (-34));
      CodedInput.readRawVarint32((InputStream) byteArrayInputStream0, 65503);
      codedInput0.getBytesUntilLimit();
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, (byte) (-34), 5);
      codedInput0.readInt32();
      try { 
        codedInput0.readBytes();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // While parsing a protocol message, the input ended unexpectedly in the middle of a field.  This could mean either than the input has been truncated or that an embedded message misreported its own length.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Enumeration<FilterInputStream> enumeration0 = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      CodedInput codedInput0 = new CodedInput(sequenceInputStream0, false);
      try { 
        CodedInput.readRawVarint32((InputStream) sequenceInputStream0, 56320);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // While parsing a protocol message, the input ended unexpectedly in the middle of a field.  This could mean either than the input has been truncated or that an embedded message misreported its own length.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-22);
      byteArray0[1] = (byte) (-11);
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)75);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      CodedInput codedInput0 = new CodedInput(pushbackInputStream0, true);
      try { 
        codedInput0.readBytes();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // While parsing a protocol message, the input ended unexpectedly in the middle of a field.  This could mean either than the input has been truncated or that an embedded message misreported its own length.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte)107;
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0, (int) (byte)107, 4966);
      // Undeclared exception!
      try { 
        codedInput0.setSizeLimit((-1719));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Size limit cannot be negative: -1719
         //
         verifyException("io.protostuff.CodedInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte)0;
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0);
      codedInput0.setSizeLimit((byte)0);
      codedInput0.isAtEnd();
      codedInput0.setSizeLimit((byte)66);
      codedInput0.skipField((byte)66);
      codedInput0.getLastTag();
      codedInput0.skipRawBytes(0);
      codedInput0.pushLimit(50);
      try { 
        codedInput0.readByteArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // While parsing a protocol message, the input ended unexpectedly in the middle of a field.  This could mean either than the input has been truncated or that an embedded message misreported its own length.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte) (-125);
      byteArray0[4] = (byte) (-104);
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0);
      codedInput0.readBool();
      try { 
        codedInput0.pushLimit((byte) (-125));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // CodedInput encountered an embedded string or message which claimed to have negative size.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[3] = (byte)50;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte) (-104);
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0);
      codedInput0.pushLimit((byte)40);
      codedInput0.readBytes();
      codedInput0.readRawBytes((byte)0);
      assertEquals(1, codedInput0.getTotalBytesRead());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte)0;
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0);
      codedInput0.setSizeLimit((byte)0);
      codedInput0.setSizeLimit((byte)69);
      codedInput0.skipField((byte)69);
      codedInput0.getLastTag();
      codedInput0.skipRawBytes(0);
      try { 
        codedInput0.readByteArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // While parsing a protocol message, the input ended unexpectedly in the middle of a field.  This could mean either than the input has been truncated or that an embedded message misreported its own length.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte) (-20);
      byteArray0[2] = (byte)23;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 21, 0);
      CodedInput.newInstance((InputStream) byteArrayInputStream0);
      try { 
        CodedInput.readRawVarint32((InputStream) byteArrayInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // While parsing a protocol message, the input ended unexpectedly in the middle of a field.  This could mean either than the input has been truncated or that an embedded message misreported its own length.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte)0;
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0);
      codedInput0.setSizeLimit((byte)0);
      codedInput0.setSizeLimit((byte)66);
      try { 
        codedInput0.skipField((byte)66);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // While parsing a protocol message, the input ended unexpectedly in the middle of a field.  This could mean either than the input has been truncated or that an embedded message misreported its own length.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte)105;
      byteArray0[5] = (byte) (-113);
      byteArray0[6] = (byte)117;
      byteArray0[7] = (byte)0;
      CodedInput codedInput0 = new CodedInput((InputStream) null, byteArray0, false);
      codedInput0.checkLastTagWas((byte)0);
      try { 
        codedInput0.readSInt32();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // While parsing a protocol message, the input ended unexpectedly in the middle of a field.  This could mean either than the input has been truncated or that an embedded message misreported its own length.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-75);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte)24;
      byteArray0[7] = (byte)5;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.close();
      CodedInput codedInput0 = new CodedInput(byteArrayInputStream0, false);
      boolean boolean0 = codedInput0.isAtEnd();
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte) (-53);
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0);
      codedInput0.setSizeLimit((byte)0);
      codedInput0.readString();
      codedInput0.resetSizeCounter();
      codedInput0.setSizeLimit((byte)66);
      try { 
        codedInput0.skipField((byte)66);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // While parsing a protocol message, the input ended unexpectedly in the middle of a field.  This could mean either than the input has been truncated or that an embedded message misreported its own length.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)106;
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte)0;
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0);
      ProtobufOutput.getTagAndRawLittleEndian32Bytes((byte)0, (byte) (-33));
      codedInput0.readInt32();
      codedInput0.pushLimit(12160);
      Schema<ByteArrayInput> schema0 = (Schema<ByteArrayInput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      codedInput0.handleUnknownField(625, schema0);
      try { 
        codedInput0.readString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // While parsing a protocol message, the input ended unexpectedly in the middle of a field.  This could mean either than the input has been truncated or that an embedded message misreported its own length.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte)23;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 21, 0);
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0);
      try { 
        codedInput0.readByteArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // While parsing a protocol message, the input ended unexpectedly in the middle of a field.  This could mean either than the input has been truncated or that an embedded message misreported its own length.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0);
      codedInput0.pushLimit((byte)0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      CodedInput.readRawVarint32((InputStream) byteArrayInputStream0, 65533);
      Integer integer0 = new Integer((byte)0);
      try { 
        codedInput0.readBytes();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // While parsing a protocol message, the input ended unexpectedly in the middle of a field.  This could mean either than the input has been truncated or that an embedded message misreported its own length.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)89;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte) (-1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[3] = (byte) (-47);
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0);
      codedInput0.readRawVarint64();
      codedInput0.getBytesUntilLimit();
      codedInput0.setSizeLimit(2013);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.markSupported();
      byteArrayInputStream0.mark(67108864);
      CodedInput.readRawVarint32((InputStream) byteArrayInputStream0);
      try { 
        codedInput0.readString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // While parsing a protocol message, the input ended unexpectedly in the middle of a field.  This could mean either than the input has been truncated or that an embedded message misreported its own length.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte)77;
      byteArray0[5] = (byte)127;
      byteArray0[6] = (byte)112;
      byteArray0[7] = (byte)16;
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0);
      codedInput0.readFixed64();
      try { 
        codedInput0.readByteBuffer();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // While parsing a protocol message, the input ended unexpectedly in the middle of a field.  This could mean either than the input has been truncated or that an embedded message misreported its own length.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte)96;
      byteArray0[6] = (byte)36;
      byteArray0[7] = (byte)25;
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0);
      codedInput0.readByteBuffer();
      assertEquals(1, codedInput0.getTotalBytesRead());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-14);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      CodedInput codedInput0 = new CodedInput(byteArrayInputStream0, true);
      codedInput0.readRawBytes((byte)0);
      codedInput0.readInt64();
      LinkBuffer linkBuffer0 = new LinkBuffer();
      LinkBuffer linkBuffer1 = linkBuffer0.writeInt64LE(0L);
      LinkBuffer linkBuffer2 = linkBuffer1.writeInt32(256);
      linkBuffer1.writeInt64(0L);
      LowCopyProtostuffOutput lowCopyProtostuffOutput0 = new LowCopyProtostuffOutput(linkBuffer2);
      Schema<LowCopyProtostuffOutput> schema0 = (Schema<LowCopyProtostuffOutput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(schema0).isInitialized(any());
      // Undeclared exception!
      try { 
        codedInput0.mergeObject(lowCopyProtostuffOutput0, schema0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.CodedInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-50);
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte) (-31);
      byteArray0[4] = (byte)38;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      CodedInput codedInput0 = new CodedInput(byteArrayInputStream0, byteArray0, true);
      int int0 = codedInput0.readSFixed32();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-508113408), int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CodedInput.decodeZigZag64((-1293L));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte) (-51);
      byteArray0[3] = (byte)0;
      CodedInput.newInstance(byteArray0, (-4182), (-4182));
      MockFile mockFile0 = new MockFile("\nThe InputStream implementation is buggy.");
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-467), 28);
      CodedInput codedInput0 = new CodedInput(byteArrayInputStream0, byteArray0, true);
      // Undeclared exception!
      try { 
        codedInput0.readDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // InputStream#read(byte[]) returned invalid result: 0
         // The InputStream implementation is buggy.
         //
         verifyException("io.protostuff.CodedInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)46;
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0);
      try { 
        codedInput0.skipMessage();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Protocol message tag had invalid wire type.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-84);
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0, 0, (int) (byte)0);
      codedInput0.readRawBytes(0);
      assertEquals((-1), codedInput0.getBytesUntilLimit());
      assertEquals(0, codedInput0.getTotalBytesRead());
      assertFalse(codedInput0.decodeNestedMessageAsGroup);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)94;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      int int0 = CodedInput.readRawVarint32((InputStream) byteArrayInputStream0, 2588);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(1180, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)56;
      byteArray0[4] = (byte)109;
      byteArray0[5] = (byte)63;
      byteArray0[6] = (byte) (-11);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      CodedInput codedInput0 = new CodedInput(byteArray0, 0, (byte) (-36), false);
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, 0);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0);
      // Undeclared exception!
      try { 
        codedInput0.transferByteRangeTo(protostuffOutput0, false, 67108864, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte) (-125);
      byteArray0[4] = (byte) (-104);
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0);
      try { 
        codedInput0.transferByteRangeTo((Output) null, false, 64, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // While parsing a protocol message, the input ended unexpectedly in the middle of a field.  This could mean either than the input has been truncated or that an embedded message misreported its own length.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-128);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)82;
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0);
      GraphCodedInput graphCodedInput0 = new GraphCodedInput(codedInput0);
      Schema<GraphCodedInput> schema0 = (Schema<GraphCodedInput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(schema0).isInitialized(any());
      // Undeclared exception!
      try { 
        codedInput0.mergeObject(graphCodedInput0, schema0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.CodedInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-25);
      byteArray0[5] = (byte)83;
      byteArray0[6] = (byte)88;
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0, (int) (byte)0, (-3023));
      try { 
        codedInput0.readTag();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Protocol message contained an invalid tag (zero).
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)24;
      CodedInput codedInput0 = new CodedInput(byteArray0, 0, (byte)24, true);
      try { 
        codedInput0.skipField(939);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Protocol message contained an invalid tag (zero).
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-111);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-64);
      byteArray0[5] = (byte)84;
      byteArray0[6] = (byte)44;
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0);
      codedInput0.isCurrentFieldPacked();
      Schema<LowCopyProtobufOutput> schema0 = (Schema<LowCopyProtobufOutput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      int int0 = codedInput0.readFieldNumber(schema0);
      assertEquals(1, codedInput0.getTotalBytesRead());
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CodedInput codedInput0 = new CodedInput((InputStream) null, false);
      try { 
        codedInput0.readSFixed32();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // While parsing a protocol message, the input ended unexpectedly in the middle of a field.  This could mean either than the input has been truncated or that an embedded message misreported its own length.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      CodedInput codedInput0 = CodedInput.newInstance((InputStream) dataInputStream0);
      try { 
        codedInput0.readInt64();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)20;
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0);
      codedInput0.popLimit((byte) (-67));
      assertEquals((-67), codedInput0.getBytesUntilLimit());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte)0;
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0);
      codedInput0.setSizeLimit((byte)0);
      codedInput0.setSizeLimit((byte)66);
      codedInput0.skipField((byte)66);
      codedInput0.popLimit((byte)1);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      try { 
        codedInput0.skipRawBytes(1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // CodedInput encountered an embedded string or message which claimed to have negative size.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte) (-126);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      CodedInput codedInput0 = new CodedInput(byteArrayInputStream0, byteArray0, false);
      assertEquals((-1), codedInput0.getBytesUntilLimit());
      
      codedInput0.popLimit((byte)0);
      assertEquals(0, codedInput0.getBytesUntilLimit());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      CodedInput codedInput0 = new CodedInput(byteArray0, 0, (byte)0, true);
      try { 
        codedInput0.skipField(939);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Protocol message end-group tag did not match expected tag.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)82;
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0);
      codedInput0.setSizeLimit((byte)82);
      codedInput0.setSizeLimit((byte)82);
      FileSystemHandling.shouldAllThrowIOExceptions();
      codedInput0.getLastTag();
      codedInput0.readByteArray();
      codedInput0.skipRawBytes((byte)1);
      codedInput0.setSizeLimit((byte)1);
      assertEquals(3, codedInput0.getTotalBytesRead());
      
      codedInput0.reset();
      assertEquals(0, codedInput0.getTotalBytesRead());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      CodedInput codedInput0 = new CodedInput(byteArray0, 0, 0, true);
      Schema<InputStream> schema0 = (Schema<InputStream>) mock(Schema.class, new ViolatedAssumptionAnswer());
      codedInput0.readFieldNumber(schema0);
      codedInput0.reset();
      assertEquals(0, codedInput0.getLastTag());
      assertTrue(codedInput0.decodeNestedMessageAsGroup);
      assertEquals(0, codedInput0.getTotalBytesRead());
      assertEquals((-1), codedInput0.getBytesUntilLimit());
      assertFalse(codedInput0.isCurrentFieldPacked());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      CodedInput codedInput0 = new CodedInput(byteArray0, 40, 0, true);
      int int0 = codedInput0.readTag();
      assertEquals(0, int0);
      assertTrue(codedInput0.decodeNestedMessageAsGroup);
      assertEquals(0, codedInput0.getTotalBytesRead());
      assertEquals((-1), codedInput0.getBytesUntilLimit());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-25);
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0);
      try { 
        codedInput0.readUInt64();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // While parsing a protocol message, the input ended unexpectedly in the middle of a field.  This could mean either than the input has been truncated or that an embedded message misreported its own length.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CodedInput codedInput0 = new CodedInput((byte[]) null, (-3454), (-3454), true);
      codedInput0.getBytesUntilLimit();
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("io.protostuff.CodedInput", "io.protostuff.CodedInput");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"io.protostuff.CodedInput\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)51;
      CodedInput codedInput0 = new CodedInput(byteArray0, (byte)51, 8568, false);
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, false);
      ByteArrayInput byteArrayInput1 = byteArrayInput0.setBounds((-361), 2106);
      ByteArrayInput byteArrayInput2 = byteArrayInput1.reset((byte)77, (byte)77);
      Schema<ByteArrayInput> schema0 = (Schema<ByteArrayInput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        codedInput0.mergeObject(byteArrayInput2, schema0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)28;
      CodedInput codedInput0 = new CodedInput(byteArray0, 32, (byte)28, true);
      // Undeclared exception!
      try { 
        codedInput0.readEnum();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0);
      try { 
        codedInput0.readSFixed64();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // While parsing a protocol message, the input ended unexpectedly in the middle of a field.  This could mean either than the input has been truncated or that an embedded message misreported its own length.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CodedInput codedInput0 = CodedInput.newInstance((byte[]) null, (-2253), (-2253));
      // Undeclared exception!
      try { 
        codedInput0.readUInt32();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CodedInput codedInput0 = new CodedInput((byte[]) null, (-4175), (-4175), false);
      // Undeclared exception!
      try { 
        codedInput0.readFloat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)0;
      CodedInput codedInput0 = new CodedInput(mockFileInputStream0, byteArray0, (byte)0, 4, false);
      codedInput0.reset();
      assertFalse(codedInput0.decodeNestedMessageAsGroup);
      assertFalse(codedInput0.isCurrentFieldPacked());
      assertEquals((-1), codedInput0.getBytesUntilLimit());
      assertEquals(0, codedInput0.getTotalBytesRead());
      assertEquals(0, codedInput0.getLastTag());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte)104;
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0);
      try { 
        codedInput0.readRawBytes((-78));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // CodedInput encountered an embedded string or message which claimed to have negative size.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CodedInput.decodeZigZag32(1975);
      CodedInput.decodeZigZag64(1975);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-125);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-119);
      byteArray0[7] = (byte) (-128);
      CodedInput codedInput0 = new CodedInput(byteArray0, (byte)0, (-398), true);
      byte byte0 = codedInput0.readRawByte();
      assertEquals(1, codedInput0.getTotalBytesRead());
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte) (-117);
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0);
      Schema<LowCopyProtostuffOutput> schema0 = (Schema<LowCopyProtostuffOutput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      codedInput0.handleUnknownField(192, schema0);
      try { 
        codedInput0.readString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // While parsing a protocol message, the input ended unexpectedly in the middle of a field.  This could mean either than the input has been truncated or that an embedded message misreported its own length.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)60;
      CodedInput codedInput0 = new CodedInput(byteArray0, (byte)0, (byte)0, true);
      Schema<ByteArrayInput> schema0 = (Schema<ByteArrayInput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      try { 
        codedInput0.handleUnknownField(128, schema0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // While parsing a protocol message, the input ended unexpectedly in the middle of a field.  This could mean either than the input has been truncated or that an embedded message misreported its own length.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CodedInput codedInput0 = CodedInput.newInstance((InputStream) null);
      assertFalse(codedInput0.isCurrentFieldPacked());
      assertFalse(codedInput0.decodeNestedMessageAsGroup);
      assertEquals(0, codedInput0.getTotalBytesRead());
      assertEquals((-1), codedInput0.getBytesUntilLimit());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CodedInput.decodeZigZag32((-268435456));
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(pipedOutputStream0, (-2219));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0);
      try { 
        codedInput0.readBool();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // While parsing a protocol message, the input ended unexpectedly in the middle of a field.  This could mean either than the input has been truncated or that an embedded message misreported its own length.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-34);
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0);
      codedInput0.pushLimit(665);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      CodedInput.readRawVarint32((InputStream) byteArrayInputStream0, 65533);
      Schema<ByteBufferInput> schema0 = (Schema<ByteBufferInput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      try { 
        codedInput0.readFieldNumber(schema0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Protocol message contained an invalid tag (zero).
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte) (-125);
      byteArray0[4] = (byte) (-104);
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0);
      try { 
        codedInput0.pushLimit((byte) (-125));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // CodedInput encountered an embedded string or message which claimed to have negative size.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0);
      codedInput0.pushLimit(665);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      LinkBuffer linkBuffer0 = new LinkBuffer();
      LinkBuffer linkBuffer1 = linkBuffer0.writeByteArray(byteArray0, (int) (byte)0, (int) (byte)0);
      LinkBuffer linkBuffer2 = linkBuffer1.writeDouble(4.800562993389775);
      LowCopyProtobufOutput lowCopyProtobufOutput0 = new LowCopyProtobufOutput(linkBuffer2);
      lowCopyProtobufOutput0.writeByteArray((byte)0, byteArray0, false);
      codedInput0.transferByteRangeTo(lowCopyProtobufOutput0, true, (byte)0, true);
      CodedInput.readRawVarint32((InputStream) byteArrayInputStream0, 65533);
      codedInput0.readInt32();
      codedInput0.readSInt64();
      try { 
        codedInput0.readRawLittleEndian32();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // While parsing a protocol message, the input ended unexpectedly in the middle of a field.  This could mean either than the input has been truncated or that an embedded message misreported its own length.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("8");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)121;
      CodedInput codedInput0 = new CodedInput(byteArray0, (byte)0, 16, true);
      Schema<ProtostuffOutput> schema0 = (Schema<ProtostuffOutput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      Schema<ByteBufferInput> schema1 = (Schema<ByteBufferInput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      codedInput0.readFieldNumber(schema1);
      // Undeclared exception!
      try { 
        codedInput0.readDouble();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      InputStream inputStream0 = null;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte)105;
      byteArray0[5] = (byte) (-113);
      byteArray0[6] = (byte)117;
      byteArray0[7] = (byte)0;
      CodedInput codedInput0 = new CodedInput((InputStream) null, byteArray0, false);
      try { 
        codedInput0.readSInt32();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // While parsing a protocol message, the input ended unexpectedly in the middle of a field.  This could mean either than the input has been truncated or that an embedded message misreported its own length.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)1);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      CodedInput codedInput0 = new CodedInput(pushbackInputStream0, true);
      try { 
        codedInput0.readBytes();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // While parsing a protocol message, the input ended unexpectedly in the middle of a field.  This could mean either than the input has been truncated or that an embedded message misreported its own length.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)1;
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte) (-44);
      byte byte1 = (byte)0;
      byteArray0[3] = (byte)0;
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0);
      codedInput0.setSizeLimit((byte)0);
      codedInput0.setSizeLimit((byte)66);
      codedInput0.skipField((byte)66);
      codedInput0.getLastTag();
      codedInput0.readTag();
      codedInput0.skipRawBytes(0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      CodedInput.readRawVarint32((InputStream) byteArrayInputStream0);
      try { 
        codedInput0.readByteArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // While parsing a protocol message, the input ended unexpectedly in the middle of a field.  This could mean either than the input has been truncated or that an embedded message misreported its own length.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)1;
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte) (-44);
      byte byte1 = (byte)0;
      byteArray0[3] = (byte)0;
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0);
      codedInput0.setSizeLimit((byte)0);
      codedInput0.setSizeLimit((byte)66);
      codedInput0.skipField((byte)66);
      codedInput0.getLastTag();
      codedInput0.skipRawBytes(0);
      try { 
        codedInput0.readByteArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // While parsing a protocol message, the input ended unexpectedly in the middle of a field.  This could mean either than the input has been truncated or that an embedded message misreported its own length.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)127;
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)127;
      byteArray1[1] = (byte)127;
      byteArray1[2] = (byte)127;
      byteArray1[3] = (byte)127;
      byteArray1[4] = (byte)127;
      byteArray1[5] = (byte)127;
      byteArray1[6] = (byte)127;
      byteArray1[7] = (byte)127;
      byteArray1[8] = (byte)127;
      CodedInput codedInput0 = CodedInput.newInstance(byteArray1);
      try { 
        codedInput0.readBytes();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // While parsing a protocol message, the input ended unexpectedly in the middle of a field.  This could mean either than the input has been truncated or that an embedded message misreported its own length.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }
}
