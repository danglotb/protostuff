/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 14 11:43:30 GMT 2017
 */

package io.protostuff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.protostuff.ByteArrayInput;
import io.protostuff.ByteBufferInput;
import io.protostuff.CodedInput;
import io.protostuff.GraphByteArrayInput;
import io.protostuff.GraphProtostuffOutput;
import io.protostuff.LinkedBuffer;
import io.protostuff.ProtobufOutput;
import io.protostuff.ProtostuffIOUtil;
import io.protostuff.ProtostuffOutput;
import io.protostuff.Schema;
import io.protostuff.WriteSession;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutput;
import java.io.File;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ProtostuffIOUtil_ESTest extends ProtostuffIOUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(7);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q`HwF-H~]=M%Eo#w", true);
      byte[] byteArray0 = new byte[3];
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, 2736, (byte)0, true);
      GraphByteArrayInput graphByteArrayInput0 = new GraphByteArrayInput(byteArrayInput0, 3569);
      Schema<GraphByteArrayInput> schema0 = (Schema<GraphByteArrayInput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      int int0 = ProtostuffIOUtil.optWriteDelimitedTo((OutputStream) mockFileOutputStream0, graphByteArrayInput0, schema0, linkedBuffer0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Schema<GraphProtostuffOutput> schema0 = (Schema<GraphProtostuffOutput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ProtostuffIOUtil.parseListFrom((InputStream) byteArrayInputStream0, schema0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      byte[] byteArray0 = new byte[9];
      linkedList0.add((Integer) null);
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, (byte)0);
      // Undeclared exception!
      try { 
        ProtostuffIOUtil.writeListTo((OutputStream) byteArrayOutputStream0, (List<Integer>) linkedList0, (Schema<Integer>) null, linkedBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.ProtostuffIOUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      byte[] byteArray0 = new byte[9];
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, (byte)0);
      LinkedBuffer linkedBuffer1 = new LinkedBuffer(byteArray0, 0, (byte)89, linkedBuffer0);
      linkedBuffer1.next = linkedBuffer0;
      int int0 = ProtostuffIOUtil.writeListTo((OutputStream) byteArrayOutputStream0, (List<Integer>) linkedList0, (Schema<Integer>) null, linkedBuffer1.next);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".l_^3!d]1)n3");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      LinkedList<ByteBufferInput> linkedList0 = new LinkedList<ByteBufferInput>();
      Schema<ByteBufferInput> schema0 = (Schema<ByteBufferInput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[6];
      LinkedBuffer linkedBuffer0 = new LinkedBuffer((byte)0);
      LinkedBuffer linkedBuffer1 = new LinkedBuffer(byteArray0, (byte)7, 1944, linkedBuffer0);
      // Undeclared exception!
      try { 
        ProtostuffIOUtil.writeListTo((OutputStream) mockPrintStream0, (List<ByteBufferInput>) linkedList0, schema0, linkedBuffer1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer previously used and had not been reset.
         //
         verifyException("io.protostuff.ProtostuffIOUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<ProtobufOutput> linkedList0 = new LinkedList<ProtobufOutput>();
      Schema<ProtobufOutput> schema0 = (Schema<ProtobufOutput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[5];
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, 2707, (byte) (-34));
      // Undeclared exception!
      try { 
        ProtostuffIOUtil.writeListTo((OutputStream) null, (List<ProtobufOutput>) linkedList0, schema0, linkedBuffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer previously used and had not been reset.
         //
         verifyException("io.protostuff.ProtostuffIOUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockFile mockFile0 = new MockFile("aau-Q7JP");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(0);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0, mockPrintStream0, (WriteSession.FlushHandler) null, 7);
      GraphProtostuffOutput graphProtostuffOutput0 = new GraphProtostuffOutput(protostuffOutput0);
      Schema<GraphProtostuffOutput> schema0 = (Schema<GraphProtostuffOutput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      int int0 = ProtostuffIOUtil.writeDelimitedTo((DataOutput) objectOutputStream0, graphProtostuffOutput0, schema0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockFile mockFile0 = new MockFile((File) null, "`3<e1Y");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[7];
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, 109);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 127);
      Schema<CodedInput> schema0 = (Schema<CodedInput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      int int0 = ProtostuffIOUtil.writeDelimitedTo((OutputStream) bufferedOutputStream0, (CodedInput) null, schema0, linkedBuffer0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockFile mockFile0 = new MockFile((File) null, "`3<e1Y");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[7];
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, true);
      GraphByteArrayInput graphByteArrayInput0 = new GraphByteArrayInput(byteArrayInput0);
      Schema<GraphByteArrayInput> schema0 = (Schema<GraphByteArrayInput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, 109);
      int int0 = ProtostuffIOUtil.writeTo((OutputStream) mockPrintStream0, graphByteArrayInput0, schema0, linkedBuffer0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 127);
      byte[] byteArray0 = new byte[7];
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, 0, (-128));
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0, byteArrayOutputStream0);
      GraphProtostuffOutput graphProtostuffOutput0 = new GraphProtostuffOutput(protostuffOutput0, 127);
      Schema<GraphProtostuffOutput> schema0 = (Schema<GraphProtostuffOutput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ProtostuffIOUtil.writeTo((OutputStream) bufferedOutputStream0, graphProtostuffOutput0, schema0, linkedBuffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer previously used and had not been reset.
         //
         verifyException("io.protostuff.ProtostuffIOUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, (byte) (-42), (byte)11);
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, false);
      Schema<ByteArrayInput> schema0 = (Schema<ByteArrayInput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ProtostuffIOUtil.writeTo(linkedBuffer0, byteArrayInput0, schema0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer previously used and had not been reset.
         //
         verifyException("io.protostuff.ProtostuffIOUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, 256, (byte) (-80));
      Schema<Integer> schema0 = (Schema<Integer>) mock(Schema.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ProtostuffIOUtil.writeTo(linkedBuffer0, (Integer) 512, schema0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer previously used and had not been reset.
         //
         verifyException("io.protostuff.ProtostuffIOUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, false);
      GraphByteArrayInput graphByteArrayInput0 = new GraphByteArrayInput(byteArrayInput0);
      Schema<GraphByteArrayInput> schema0 = (Schema<GraphByteArrayInput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, (byte)48, 5);
      // Undeclared exception!
      try { 
        ProtostuffIOUtil.toByteArray(graphByteArrayInput0, schema0, linkedBuffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer previously used and had not been reset.
         //
         verifyException("io.protostuff.ProtostuffIOUtil", e);
      }
  }
}
