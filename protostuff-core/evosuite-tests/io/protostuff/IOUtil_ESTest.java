/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 13 15:06:56 GMT 2017
 */

package io.protostuff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.protostuff.ByteArrayInput;
import io.protostuff.ByteBufferInput;
import io.protostuff.IOUtil;
import io.protostuff.LinkedBuffer;
import io.protostuff.ProtobufOutput;
import io.protostuff.Schema;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.io.SequenceInputStream;
import java.nio.ByteBuffer;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IOUtil_ESTest extends IOUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      int int0 = IOUtil.putVarInt32AndGetOffset(4096, byteArray0, 0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-128), (byte)32}, byteArray0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
      try { 
        IOUtil.putVarInt32AndGetOffset(4, byteArray0, (byte) (-16));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -12
         //
         verifyException("io.protostuff.IOUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      int int0 = IOUtil.putVarInt32AndGetOffset(4, byteArray0, (byte) (-1));
      assertEquals(3, int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)4, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        IOUtil.fillBufferFrom(byteArrayInputStream0, byteArray0, 1276, 1276);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte) (-79);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ProtobufOutput protobufOutput0 = new ProtobufOutput((LinkedBuffer) null, (byte) (-79));
      try { 
        IOUtil.mergeDelimitedFrom((InputStream) dataInputStream0, protobufOutput0, (Schema<ProtobufOutput>) null, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // While parsing a protocol message, the input ended unexpectedly in the middle of a field.  This could mean either than the input has been truncated or that an embedded message misreported its own length.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Integer integer0 = new Integer(0);
      Schema<Integer> schema0 = (Schema<Integer>) mock(Schema.class, new ViolatedAssumptionAnswer());
      try { 
        IOUtil.mergeDelimitedFrom((InputStream) sequenceInputStream0, integer0, schema0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // mergeDelimitedFrom
         //
         verifyException("io.protostuff.IOUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, false);
      ByteBuffer byteBuffer0 = byteArrayInput0.readByteBuffer();
      ByteBufferInput byteBufferInput0 = new ByteBufferInput(byteBuffer0, false);
      Schema<ByteBufferInput> schema0 = (Schema<ByteBufferInput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      int int0 = IOUtil.mergeDelimitedFrom((InputStream) dataInputStream0, byteArray0, byteBufferInput0, schema0, false);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Schema<ByteArrayInputStream> schema0 = (Schema<ByteArrayInputStream>) mock(Schema.class, new ViolatedAssumptionAnswer());
      try { 
        IOUtil.mergeDelimitedFrom((InputStream) byteArrayInputStream0, byteArray0, byteArrayInputStream0, schema0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // mergeDelimitedFrom
         //
         verifyException("io.protostuff.IOUtil", e);
      }
  }
}
