/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 13 15:05:36 GMT 2017
 */

package io.protostuff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.protostuff.ByteArrayInput;
import io.protostuff.ByteBufferInput;
import io.protostuff.ByteString;
import io.protostuff.CodedInput;
import io.protostuff.GraphCodedInput;
import io.protostuff.GraphProtostuffOutput;
import io.protostuff.LinkedBuffer;
import io.protostuff.LowCopyProtostuffOutput;
import io.protostuff.ProtobufOutput;
import io.protostuff.ProtostuffOutput;
import io.protostuff.Schema;
import io.protostuff.WriteSession;
import io.protostuff.WriteSink;
import java.io.DataOutput;
import java.io.FilterOutputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.nio.ByteBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ProtobufOutput_ESTest extends ProtobufOutput_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte) (-69);
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, 1137, 1137);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ProtobufOutput protobufOutput0 = new ProtobufOutput(linkedBuffer0);
      WriteSession.FlushHandler writeSession_FlushHandler0 = protobufOutput0.flushHandler;
      // Undeclared exception!
      try { 
        protobufOutput0.writeObject((-150), "4)8", (Schema<String>) null, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1137
         //
         verifyException("io.protostuff.ProtobufOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(7);
      ProtobufOutput protobufOutput0 = new ProtobufOutput(linkedBuffer0);
      protobufOutput0.writeFixed64(761, 0L, true);
      protobufOutput0.writeUInt64(512, 2820L, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      protobufOutput0.writeSFixed64(0, 0, true);
      protobufOutput0.writeString(0, "io.protostuff.ByteString", true);
      protobufOutput0.writeSInt32(761, (-1152), true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)68;
      // Undeclared exception!
      try { 
        ProtobufOutput.writeTagAndByteArray((-2146365748), byteArray0, (byte)68, 512, protobufOutput0, protobufOutput0.head);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ProtobufOutput.computeRawVarint64Size((-268435456L));
      ProtobufOutput.computeRawVarint32Size(2051);
      ProtobufOutput.getTagAndRawVarInt32Bytes(38, 2048);
      ProtobufOutput.computeRawVarint64Size(38);
      ProtobufOutput.getTagAndRawVarInt32Bytes(565, 3016);
      ProtobufOutput.getTagAndRawVarInt32Bytes(3968, 127);
      ProtobufOutput.getTagAndRawVarInt64Bytes(565, 38);
      ProtobufOutput.computeRawVarint32Size(565);
      MockPrintStream mockPrintStream0 = new MockPrintStream("EW)//\f");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      ProtobufOutput.writeRawVarInt32Bytes((DataOutput) objectOutputStream0, (-268435456));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte) (-18);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)13;
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, 48, (byte)6);
      ProtobufOutput protobufOutput0 = new ProtobufOutput(linkedBuffer0, (byte)6);
      Schema<ByteBufferInput> schema0 = (Schema<ByteBufferInput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      protobufOutput0.writeObject(128, (ByteBufferInput) null, schema0, true);
      // Undeclared exception!
      try { 
        ProtobufOutput.writeTagAndLinkedBuffer(2130836487, protobufOutput0.head, protobufOutput0, protobufOutput0.head);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("io.protostuff.ProtobufOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedBuffer linkedBuffer0 = new LinkedBuffer((byte[]) null, 4415);
      LinkedBuffer linkedBuffer1 = new LinkedBuffer(23, linkedBuffer0);
      LinkedBuffer linkedBuffer2 = new LinkedBuffer(linkedBuffer1, linkedBuffer0);
      LinkedBuffer linkedBuffer3 = new LinkedBuffer((byte[]) null, 23, linkedBuffer2);
      LinkedBuffer.allocate();
      ProtobufOutput protobufOutput0 = new ProtobufOutput(linkedBuffer3);
      protobufOutput0.clear();
      // Undeclared exception!
      try { 
        protobufOutput0.writeInt32(3, 2097152, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.ProtobufOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ProtobufOutput.getRawVarInt32Bytes((-3847));
      ProtobufOutput protobufOutput0 = new ProtobufOutput((LinkedBuffer) null, (-3847));
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(365);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(24);
      ProtobufOutput protobufOutput0 = new ProtobufOutput(linkedBuffer0);
      protobufOutput0.writeUInt32(24, (-746), true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-8);
      // Undeclared exception!
      try { 
        ProtobufOutput.writeTagAndByteArray(1145, byteArray0, 4, 14, protobufOutput0, linkedBuffer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[2] = (byte)40;
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, (byte)40);
      ProtobufOutput protobufOutput0 = new ProtobufOutput(linkedBuffer0, (-1178));
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(protobufOutput0.head, (OutputStream) null);
      ProtobufOutput.writeRawVarInt32((-1178), (WriteSession) protostuffOutput0, linkedBuffer0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = ProtobufOutput.getTagAndRawVarInt64Bytes(2139127680, 2139127680);
      // Undeclared exception!
      try { 
        ProtobufOutput.writeRawVarInt32(776, byteArray0, 752);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 752
         //
         verifyException("io.protostuff.ProtobufOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      WriteSink writeSink0 = WriteSink.BUFFERED;
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(114);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0);
      LinkedBuffer linkedBuffer1 = writeSink0.writeStrAscii("", protostuffOutput0, linkedBuffer0);
      ProtobufOutput protobufOutput0 = new ProtobufOutput(linkedBuffer1);
      ProtobufOutput protobufOutput1 = protobufOutput0.clear();
      // Undeclared exception!
      try { 
        protobufOutput1.writeBytes(512, (ByteBuffer) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.ProtobufOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ProtobufOutput protobufOutput0 = new ProtobufOutput((LinkedBuffer) null);
      // Undeclared exception!
      try { 
        protobufOutput0.writeBool(57, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.ProtobufOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = ProtobufOutput.getRawVarInt32Bytes(0);
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, (-1715), 0);
      LinkedBuffer linkedBuffer1 = new LinkedBuffer(linkedBuffer0, linkedBuffer0);
      ProtobufOutput protobufOutput0 = new ProtobufOutput(linkedBuffer1, 256);
      ProtobufOutput protobufOutput1 = protobufOutput0.clear();
      protobufOutput1.writeSFixed32((-1201), 128, false);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ISO-8859-1");
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(102);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0);
      ProtobufOutput.writeTagAndRawVarInt64((-2097152), 915L, protostuffOutput0, protostuffOutput0.head);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        ProtobufOutput.writeRawVarInt32Bytes((DataOutput) null, (-1075));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.ProtobufOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)127;
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)77;
      byteArray0[8] = (byte) (-116);
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, 21);
      LinkedBuffer linkedBuffer1 = new LinkedBuffer(linkedBuffer0, linkedBuffer0);
      LinkedBuffer linkedBuffer2 = new LinkedBuffer(byteArray0, 21, 21, linkedBuffer1);
      LinkedBuffer linkedBuffer3 = new LinkedBuffer(byteArray0, 3, linkedBuffer2);
      ProtobufOutput protobufOutput0 = new ProtobufOutput(linkedBuffer3);
      ProtobufOutput protobufOutput1 = protobufOutput0.clear();
      protobufOutput1.writeFixed32((byte)34, 512, false);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      WriteSink writeSink0 = WriteSink.BUFFERED;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)36;
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, (byte)36);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0);
      LinkedBuffer linkedBuffer1 = new LinkedBuffer(0, protostuffOutput0.head);
      LinkedBuffer linkedBuffer2 = writeSink0.writeStrFromInt(0, protostuffOutput0, linkedBuffer1);
      ProtobufOutput protobufOutput0 = new ProtobufOutput(linkedBuffer2);
      ProtobufOutput protobufOutput1 = protobufOutput0.clear();
      LinkedBuffer.writeTo((OutputStream) null, protobufOutput0.head);
      protobufOutput1.writeFixed32(0, (-2697), true);
      ProtobufOutput.writeTagAndRawLittleEndian32(32, 8, protobufOutput0, protobufOutput1.head);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ProtobufOutput protobufOutput0 = new ProtobufOutput((LinkedBuffer) null);
      // Undeclared exception!
      try { 
        protobufOutput0.writeDouble(0, 0.0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.ProtobufOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedBuffer linkedBuffer0 = new LinkedBuffer((byte[]) null, 0);
      ProtobufOutput protobufOutput0 = new ProtobufOutput(linkedBuffer0, 512);
      ProtobufOutput protobufOutput1 = protobufOutput0.clear();
      protobufOutput1.clear();
      // Undeclared exception!
      try { 
        protobufOutput1.writeInt64(64, 512, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.ProtobufOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      ProtobufOutput.writeRawVarInt32Bytes((OutputStream) pipedOutputStream0, (-608));
      assertEquals(5, pipedInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ProtobufOutput.encodeZigZag32(0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)0;
      // Undeclared exception!
      try { 
        ProtobufOutput.writeRawVarInt32((-228), byteArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("io.protostuff.ProtobufOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(24);
      ProtobufOutput protobufOutput0 = new ProtobufOutput(linkedBuffer0);
      ProtobufOutput.getTagAndRawLittleEndian32Bytes((-2175), 4);
      protobufOutput0.writeUInt32(24, (-746), true);
      assertEquals(7, protobufOutput0.getSize());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ProtobufOutput.computeRawVarint64Size(0L);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)79;
      // Undeclared exception!
      try { 
        ProtobufOutput.writeRawLittleEndian32(1, byteArray0, (byte)79);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // buffer capacity not enough.
         //
         verifyException("io.protostuff.ProtobufOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ProtobufOutput.computeRawVarint64Size((-781L));
      WriteSink writeSink0 = WriteSink.STREAMED;
      WriteSession writeSession0 = new WriteSession((LinkedBuffer) null, (OutputStream) null);
      writeSink0.writeStrAscii("", writeSession0, (LinkedBuffer) null);
      ProtobufOutput protobufOutput0 = new ProtobufOutput((LinkedBuffer) null);
      // Undeclared exception!
      try { 
        protobufOutput0.writeSInt32((-3219), (-2276), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.ProtobufOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ProtobufOutput protobufOutput0 = new ProtobufOutput((LinkedBuffer) null);
      // Undeclared exception!
      try { 
        protobufOutput0.writeEnum(0, 0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.ProtobufOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      WriteSink writeSink0 = WriteSink.STREAMED;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-17);
      byteArray0[6] = (byte)101;
      byteArray0[7] = (byte)2;
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, 149, (byte)1);
      LinkedBuffer linkedBuffer1 = new LinkedBuffer(linkedBuffer0, linkedBuffer0);
      WriteSession writeSession0 = new WriteSession(linkedBuffer1, (-1128));
      LinkedBuffer linkedBuffer2 = writeSink0.writeStrUTF8VarDelimited("", writeSession0, writeSession0.head);
      // Undeclared exception!
      try { 
        ProtobufOutput.writeTagAndLinkedBuffer((-640), linkedBuffer2, writeSession0, linkedBuffer1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.LinkedBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(7);
      ProtobufOutput protobufOutput0 = new ProtobufOutput(linkedBuffer0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      protobufOutput0.writeFixed64(761, 0L, true);
      protobufOutput0.writeUInt64(512, 2820L, false);
      protobufOutput0.writeString(0, "zYcm6=9dAW", false);
      GraphCodedInput graphCodedInput0 = new GraphCodedInput((CodedInput) null);
      byte[] byteArray0 = new byte[0];
      ProtobufOutput.writeTagAndByteArray((-1478), byteArray0, 999, 878, protobufOutput0, protobufOutput0.head);
      assertEquals(911, protobufOutput0.getSize());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = (-1178);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[2] = (byte)40;
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, (byte)40);
      ProtobufOutput protobufOutput0 = new ProtobufOutput(linkedBuffer0, (-1178));
      ProtobufOutput.getTagAndRawLittleEndian64Bytes(86, (byte)40);
      // Undeclared exception!
      try { 
        ProtobufOutput.writeTagAndLinkedBuffer((-1644), protobufOutput0.head, protobufOutput0, linkedBuffer0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.LinkedBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      WriteSink writeSink0 = WriteSink.BUFFERED;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)43;
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte) (-69);
      LinkedBuffer linkedBuffer0 = new LinkedBuffer((byte)127);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ProtobufOutput protobufOutput0 = new ProtobufOutput(linkedBuffer0);
      WriteSession.FlushHandler writeSession_FlushHandler0 = protobufOutput0.flushHandler;
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0, pipedOutputStream0, (WriteSession.FlushHandler) null, (byte)127);
      LinkedBuffer linkedBuffer1 = writeSink0.writeStrUTF8FixedDelimited("", true, protostuffOutput0, linkedBuffer0);
      ProtobufOutput protobufOutput1 = new ProtobufOutput(linkedBuffer1, 1137);
      ByteString byteString0 = ByteString.EMPTY;
      protobufOutput1.writeSInt32((byte)43, 127, false);
      protobufOutput0.writeBytes(90, byteString0, false);
      protostuffOutput0.writeEnum((-150), (byte) (-69), true);
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, true);
      Schema<ByteArrayInput> schema0 = (Schema<ByteArrayInput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      protobufOutput1.writeObject((-975), byteArrayInput0, schema0, true);
      assertEquals(6, protobufOutput1.getSize());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ProtobufOutput.computeRawVarint64Size((-4398046511104L));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "p0r$E");
      byte[] byteArray0 = ProtobufOutput.getTagAndRawLittleEndian64Bytes((-854), 128L);
      ProtobufOutput.getTagAndRawLittleEndian64Bytes(10, 10);
      byte[] byteArray1 = ProtobufOutput.getTagAndRawVarInt64Bytes((-1108), 128L);
      ProtobufOutput.getTagAndRawVarInt64Bytes((-854), (-1046L));
      WriteSink writeSink0 = WriteSink.BUFFERED;
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray1, 2, 21);
      LinkedBuffer linkedBuffer1 = new LinkedBuffer(byteArray0, (-1108), 2, linkedBuffer0);
      LinkedBuffer linkedBuffer2 = new LinkedBuffer(linkedBuffer1, linkedBuffer1);
      WriteSession writeSession0 = new WriteSession(linkedBuffer2);
      LinkedBuffer linkedBuffer3 = writeSink0.writeFloatLE((-1108), writeSession0, writeSession0.head);
      ProtobufOutput.writeTagAndLinkedBuffer(21, linkedBuffer3, writeSession0, linkedBuffer0);
      assertEquals(6, writeSession0.getSize());
      assertArrayEquals(new byte[] {(byte) (-84), (byte) (-9), (byte) (-1), (byte) (-1), (byte)15, (byte) (-128), (byte)1}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(24);
      ProtobufOutput protobufOutput0 = new ProtobufOutput(linkedBuffer0);
      protobufOutput0.writeEnum((-103), 512, true);
      protobufOutput0.writeUInt32(24, (-746), true);
      ProtobufOutput.writeTagAndRawLittleEndian32(8, 4554, protobufOutput0, linkedBuffer0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-3);
      linkedBuffer0.next = protobufOutput0.head;
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte) (-111);
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte) (-60);
      // Undeclared exception!
      try { 
        ProtobufOutput.writeRawVarInt32(110, byteArray0, 512);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 512
         //
         verifyException("io.protostuff.ProtobufOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(24);
      ProtobufOutput protobufOutput0 = new ProtobufOutput(linkedBuffer0);
      protobufOutput0.writeEnum((-103), 512, true);
      protobufOutput0.writeUInt32(24, 512, true);
      ProtobufOutput.writeTagAndRawLittleEndian32(8, 4554, protobufOutput0, linkedBuffer0);
      int int0 = 110;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-3);
      byte byte0 = (byte) (-32);
      linkedBuffer0.next = protobufOutput0.head;
      // Undeclared exception!
      try { 
        protobufOutput0.writeByteRange(false, 2316, byteArray0, 256, (-4736), false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(24);
      ProtobufOutput protobufOutput0 = new ProtobufOutput(linkedBuffer0);
      protobufOutput0.writeEnum((-103), 512, true);
      protobufOutput0.writeUInt32(24, (-746), true);
      LinkedBuffer linkedBuffer1 = new LinkedBuffer(linkedBuffer0, protobufOutput0.head);
      int int0 = 110;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      protobufOutput0.writeInt32(3104, (-2147483647), true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-3);
      linkedBuffer0.next = protobufOutput0.head;
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte) (-111);
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)0;
      byte byte0 = (byte)13;
      // Undeclared exception!
      try { 
        ProtobufOutput.writeRawVarInt32Bytes((OutputStream) null, (int) (byte)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.ProtobufOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ProtobufOutput.getTagAndRawVarInt32Bytes((-606), (-606));
      WriteSink writeSink0 = WriteSink.STREAMED;
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(128);
      WriteSession writeSession0 = new WriteSession(linkedBuffer0, (-606));
      LinkedBuffer linkedBuffer1 = writeSink0.writeDouble((-606), writeSession0, writeSession0.head);
      ProtobufOutput protobufOutput0 = new ProtobufOutput(linkedBuffer1, 102);
      ProtobufOutput.writeTagAndRawVarInt64(102, (-606), protobufOutput0, linkedBuffer0);
      ProtobufOutput.writeTagAndRawVarInt64(256, (-3840L), protobufOutput0, protobufOutput0.head);
      ProtobufOutput.writeTagAndRawLittleEndian64(127, (-16384L), writeSession0, linkedBuffer1);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer1, (OutputStream) null);
      ProtostuffOutput protostuffOutput1 = protostuffOutput0.clear();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte) (-94);
      byteArray0[4] = (byte)1;
      byteArray0[6] = (byte)24;
      byteArray0[7] = (byte)127;
      LinkedBuffer.use(byteArray0, (-2147482623));
      GraphProtostuffOutput graphProtostuffOutput0 = new GraphProtostuffOutput(protostuffOutput1);
      Schema<GraphProtostuffOutput> schema0 = (Schema<GraphProtostuffOutput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      protobufOutput0.writeObject(256, graphProtostuffOutput0, schema0, false);
      ProtobufOutput.writeTagAndRawLittleEndian32((-1821), 128, writeSession0, protostuffOutput1.head);
      assertEquals(26, writeSession0.getSize());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedBuffer linkedBuffer0 = null;
      ProtobufOutput protobufOutput0 = new ProtobufOutput((LinkedBuffer) null);
      ProtobufOutput.computeRawVarint64Size(4);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "~|AU=/f");
      // Undeclared exception!
      try { 
        protobufOutput0.writeSInt64(760, (-37L), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.ProtobufOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = ProtobufOutput.computeRawVarint64Size((-268435456L));
      assertEquals(10, int0);
      
      ProtobufOutput.computeRawVarint32Size(2051);
      byte[] byteArray0 = ProtobufOutput.getTagAndRawVarInt32Bytes(38, 2048);
      assertArrayEquals(new byte[] {(byte)38, (byte) (-128), (byte)16}, byteArray0);
      
      ProtobufOutput.computeRawVarint64Size(38);
      byte[] byteArray1 = ProtobufOutput.getTagAndRawVarInt32Bytes(565, 3016);
      assertArrayEquals(new byte[] {(byte) (-75), (byte)4, (byte) (-56), (byte)23}, byteArray1);
      
      byte[] byteArray2 = ProtobufOutput.getTagAndRawVarInt32Bytes(3968, 127);
      assertArrayEquals(new byte[] {(byte) (-128), (byte)31, (byte)127}, byteArray2);
      
      byte[] byteArray3 = ProtobufOutput.getTagAndRawVarInt64Bytes(565, 38);
      assertArrayEquals(new byte[] {(byte) (-75), (byte)4, (byte)38}, byteArray3);
      
      ProtobufOutput.computeRawVarint32Size(565);
      byte[] byteArray4 = ProtobufOutput.getTagAndRawVarInt64Bytes(512, 1L);
      assertArrayEquals(new byte[] {(byte) (-128), (byte)4, (byte)1}, byteArray4);
      
      byte[] byteArray5 = ProtobufOutput.getRawVarInt32Bytes(601);
      assertArrayEquals(new byte[] {(byte) (-39), (byte)4}, byteArray5);
      
      byte[] byteArray6 = ProtobufOutput.getTagAndRawLittleEndian32Bytes(2, 512);
      assertArrayEquals(new byte[] {(byte)2, (byte)0, (byte)2, (byte)0, (byte)0}, byteArray6);
      
      int int1 = ProtobufOutput.computeRawVarint64Size(999936L);
      assertEquals(3, int1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = ProtobufOutput.computeRawVarint64Size((-268435456L));
      assertEquals(10, int0);
      
      int int1 = ProtobufOutput.computeRawVarint32Size(2051);
      assertEquals(2, int1);
      
      byte[] byteArray0 = ProtobufOutput.getTagAndRawVarInt32Bytes(38, 2048);
      assertArrayEquals(new byte[] {(byte)38, (byte) (-128), (byte)16}, byteArray0);
      
      ProtobufOutput.computeRawVarint64Size(38);
      byte[] byteArray1 = ProtobufOutput.getTagAndRawVarInt32Bytes(565, 3016);
      assertArrayEquals(new byte[] {(byte) (-75), (byte)4, (byte) (-56), (byte)23}, byteArray1);
      
      byte[] byteArray2 = ProtobufOutput.getTagAndRawVarInt32Bytes(3968, 127);
      assertArrayEquals(new byte[] {(byte) (-128), (byte)31, (byte)127}, byteArray2);
      
      byte[] byteArray3 = ProtobufOutput.getTagAndRawVarInt64Bytes(565, 38);
      assertArrayEquals(new byte[] {(byte) (-75), (byte)4, (byte)38}, byteArray3);
      
      ProtobufOutput.computeRawVarint32Size(565);
      ProtobufOutput.getTagAndRawVarInt64Bytes(512, 1L);
      byte[] byteArray4 = ProtobufOutput.getRawVarInt32Bytes(601);
      assertArrayEquals(new byte[] {(byte) (-39), (byte)4}, byteArray4);
      
      byte[] byteArray5 = ProtobufOutput.getTagAndRawLittleEndian32Bytes(2, 512);
      assertArrayEquals(new byte[] {(byte)2, (byte)0, (byte)2, (byte)0, (byte)0}, byteArray5);
      
      byte[] byteArray6 = ProtobufOutput.getTagAndRawVarInt32Bytes((-1909), 2048);
      assertArrayEquals(new byte[] {(byte) (-117), (byte) (-15), (byte) (-1), (byte) (-1), (byte)15, (byte) (-128), (byte)16}, byteArray6);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)107;
      byteArray0[2] = (byte) (-66);
      LinkedBuffer linkedBuffer0 = new LinkedBuffer((byte)107);
      WriteSession writeSession0 = new WriteSession(linkedBuffer0);
      LinkedBuffer linkedBuffer1 = new LinkedBuffer((byte)107, linkedBuffer0);
      ProtobufOutput protobufOutput0 = new ProtobufOutput(linkedBuffer1);
      ProtobufOutput.computeRawVarint32Size((byte) (-66));
      protobufOutput0.writeFixed64((-830), (byte) (-66), false);
      ProtobufOutput.getTagAndRawVarInt64Bytes(512, 256);
      WriteSession writeSession1 = protobufOutput0.clear();
      // Undeclared exception!
      try { 
        ProtobufOutput.writeTagAndByteArray(512, byteArray0, 256, 256, writeSession1, writeSession0.head);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(7);
      ProtobufOutput protobufOutput0 = new ProtobufOutput(linkedBuffer0);
      protobufOutput0.writeFixed64(761, 0L, true);
      protobufOutput0.writeUInt64(512, 8, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      protobufOutput0.writeSFixed64(0, 0, true);
      protobufOutput0.clear();
      protobufOutput0.writeString(0, "io.protostuff.ByteString", true);
      // Undeclared exception!
      try { 
        CodedInput.newInstance((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.CodedInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = ProtobufOutput.getTagAndRawLittleEndian32Bytes(2659, 2659);
      int int0 = 2115;
      WriteSession writeSession0 = null;
      WriteSink writeSink0 = WriteSink.BUFFERED;
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(1267);
      int int1 = (-610);
      // Undeclared exception!
      try { 
        ProtobufOutput.writeRawVarInt32(3511, byteArray0, (-407));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -407
         //
         verifyException("io.protostuff.ProtobufOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(165);
      ProtobufOutput protobufOutput0 = new ProtobufOutput(linkedBuffer0);
      ProtobufOutput protobufOutput1 = protobufOutput0.clear();
      protobufOutput0.writeBool(49, true, false);
      ByteString byteString0 = ByteString.bytesDefaultValue("BY}6");
      Schema<LowCopyProtostuffOutput> schema0 = (Schema<LowCopyProtostuffOutput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      protobufOutput0.writeObject((-1843), (LowCopyProtostuffOutput) null, schema0, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      protobufOutput1.writeFixed64(165, 512, false);
      protobufOutput1.writeBytes(31, byteString0, false);
      ProtobufOutput.getTagAndRawLittleEndian32Bytes(512, (-29));
      protobufOutput1.writeSInt32(0, 8, false);
      assertEquals(24, protobufOutput1.getSize());
      
      byte[] byteArray0 = ProtobufOutput.getTagAndRawLittleEndian64Bytes(1828, (-3342L));
      assertArrayEquals(new byte[] {(byte) (-92), (byte)14, (byte) (-14), (byte) (-14), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)0;
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, (-1013), 3563);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0);
      LinkedBuffer linkedBuffer1 = new LinkedBuffer(protostuffOutput0.head, linkedBuffer0);
      ProtobufOutput protobufOutput0 = new ProtobufOutput(linkedBuffer1, (byte)127);
      ProtobufOutput.writeRawVarInt32(6, (WriteSession) protostuffOutput0, protostuffOutput0.head);
      protobufOutput0.writeFloat(512, 0.0F, false);
      WriteSink writeSink0 = WriteSink.BUFFERED;
      ProtobufOutput protobufOutput1 = new ProtobufOutput(linkedBuffer1);
      LinkedBuffer linkedBuffer2 = writeSink0.writeByteArray(byteArray0, 67, 10, (WriteSession) protobufOutput1, linkedBuffer1);
      ProtobufOutput.writeTagAndByteArray(512, byteArray0, (-697), 3219, protobufOutput0, linkedBuffer2);
      // Undeclared exception!
      try { 
        ProtobufOutput.writeRawVarInt32Bytes((OutputStream) null, 4118);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.ProtobufOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)4;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[0] = (byte)4;
      byte byte1 = (byte)0;
      byteArray0[2] = (byte)0;
      byte byte2 = (byte)79;
      byteArray0[2] = (byte)79;
      WriteSink writeSink0 = WriteSink.STREAMED;
      ProtobufOutput.getRawVarInt32Bytes((byte)0);
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, (byte)4, (-876));
      LinkedBuffer linkedBuffer1 = new LinkedBuffer(linkedBuffer0, linkedBuffer0);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer1);
      // Undeclared exception!
      try { 
        writeSink0.writeInt64LE((-3635L), protostuffOutput0, linkedBuffer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -876
         //
         verifyException("io.protostuff.IntSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ISO-8859-1");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
      ProtobufOutput.writeRawVarInt32Bytes((DataOutput) objectOutputStream0, 3977);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ProtobufOutput.getTagAndRawVarInt64Bytes(0, (-1833L));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)99;
      byteArray0[3] = (byte)99;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[4] = (byte)127;
      byteArray0[5] = (byte)0;
      byteArray0[8] = (byte)23;
      byteArray0[7] = (byte) (-52);
      byteArray0[8] = (byte)12;
      // Undeclared exception!
      try { 
        ProtobufOutput.writeRawLittleEndian64(0L, byteArray0, 3310);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // buffer capacity not enough.
         //
         verifyException("io.protostuff.ProtobufOutput", e);
      }
  }
}
