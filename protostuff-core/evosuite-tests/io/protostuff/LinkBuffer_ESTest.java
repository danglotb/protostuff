/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 13 14:56:11 GMT 2017
 */

package io.protostuff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.protostuff.LinkBuffer;
import java.nio.ByteBuffer;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LinkBuffer_ESTest extends LinkBuffer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkBuffer linkBuffer0 = new LinkBuffer();
      // Undeclared exception!
      try { 
        linkBuffer0.writeByteBuffer((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.LinkBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinkBuffer linkBuffer0 = new LinkBuffer();
      linkBuffer0.writeFloat(256);
      List<ByteBuffer> list0 = linkBuffer0.finish();
      assertEquals(1, list0.size());
      assertEquals(256, linkBuffer0.allocSize);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LinkBuffer linkBuffer0 = new LinkBuffer();
      List<ByteBuffer> list0 = linkBuffer0.getBuffers();
      assertFalse(list0.isEmpty());
      
      linkBuffer0.writeFloat(256);
      List<ByteBuffer> list1 = linkBuffer0.finish();
      assertEquals(256, linkBuffer0.allocSize);
      assertEquals(1, list1.size());
      assertFalse(list1.equals((Object)list0));
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkBuffer linkBuffer0 = new LinkBuffer();
      LinkBuffer linkBuffer1 = linkBuffer0.writeFloat(256);
      long long0 = linkBuffer1.size();
      assertEquals(256, linkBuffer1.allocSize);
      assertEquals(4L, long0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LinkBuffer linkBuffer0 = new LinkBuffer(12);
      byte[] byteArray0 = new byte[18];
      LinkBuffer linkBuffer1 = linkBuffer0.writeByteArray(byteArray0);
      long long0 = linkBuffer1.size();
      assertEquals(12, linkBuffer1.allocSize);
      assertEquals(18L, long0);
  }
}
