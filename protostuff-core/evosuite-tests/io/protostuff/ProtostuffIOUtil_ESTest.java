/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 13 15:19:57 GMT 2017
 */

package io.protostuff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.protostuff.ByteArrayInput;
import io.protostuff.CodedInput;
import io.protostuff.GraphCodedInput;
import io.protostuff.GraphProtostuffOutput;
import io.protostuff.LinkBuffer;
import io.protostuff.LinkedBuffer;
import io.protostuff.LowCopyProtobufOutput;
import io.protostuff.LowCopyProtostuffOutput;
import io.protostuff.ProtobufOutput;
import io.protostuff.ProtostuffIOUtil;
import io.protostuff.ProtostuffOutput;
import io.protostuff.Schema;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.FilterOutputStream;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ProtostuffIOUtil_ESTest extends ProtostuffIOUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, 7);
      LinkedBuffer linkedBuffer1 = new LinkedBuffer(5, linkedBuffer0);
      ProtobufOutput protobufOutput0 = new ProtobufOutput(linkedBuffer1, 256);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream((byte)37);
      Schema<ProtobufOutput> schema0 = (Schema<ProtobufOutput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      int int0 = ProtostuffIOUtil.optWriteDelimitedTo((OutputStream) byteArrayOutputStream0, protobufOutput0, schema0, linkedBuffer1);
      assertEquals(1, byteArrayOutputStream0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)74;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      CodedInput codedInput0 = new CodedInput(dataInputStream0, byteArray0, (byte)74, 0, false);
      GraphCodedInput graphCodedInput0 = new GraphCodedInput(codedInput0);
      Schema<GraphCodedInput> schema0 = (Schema<GraphCodedInput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, 0);
      boolean boolean0 = ProtostuffIOUtil.optMergeDelimitedFrom((InputStream) dataInputStream0, graphCodedInput0, schema0, false, linkedBuffer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)83;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Schema<GraphProtostuffOutput> schema0 = (Schema<GraphProtostuffOutput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(schema0).newMessage();
      List<GraphProtostuffOutput> list0 = ProtostuffIOUtil.parseListFrom((InputStream) byteArrayInputStream0, schema0);
      assertEquals(83, list0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<GraphCodedInput> linkedList0 = new LinkedList<GraphCodedInput>();
      Schema<GraphCodedInput> schema0 = (Schema<GraphCodedInput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[5];
      CodedInput codedInput0 = new CodedInput(byteArray0, (byte) (-61), (byte) (-61), true);
      GraphCodedInput graphCodedInput0 = new GraphCodedInput(codedInput0, 67);
      linkedList0.add(graphCodedInput0);
      LinkedBuffer linkedBuffer0 = new LinkedBuffer((byte)110);
      // Undeclared exception!
      try { 
        ProtostuffIOUtil.writeListTo((OutputStream) null, (List<GraphCodedInput>) linkedList0, schema0, linkedBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.LinkedBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Serializing to a LinkedBuffer threw an IOException (should never happen).");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(filterOutputStream0, true);
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte) (-1));
      Schema<GraphProtostuffOutput> schema0 = (Schema<GraphProtostuffOutput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      List<GraphProtostuffOutput> list0 = ProtostuffIOUtil.parseListFrom((InputStream) byteArrayInputStream0, schema0);
      Schema<GraphProtostuffOutput> schema1 = (Schema<GraphProtostuffOutput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, 28, 1062);
      LinkedBuffer linkedBuffer1 = new LinkedBuffer((byte)1, linkedBuffer0);
      int int0 = ProtostuffIOUtil.writeListTo((OutputStream) mockPrintStream0, list0, schema1, linkedBuffer1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, (byte) (-104), (byte)85);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Schema<Integer> schema0 = (Schema<Integer>) mock(Schema.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ProtostuffIOUtil.writeListTo((OutputStream) null, (List<Integer>) linkedList0, schema0, linkedBuffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer previously used and had not been reset.
         //
         verifyException("io.protostuff.ProtostuffIOUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("oXuP['^^tu&=");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      LowCopyProtobufOutput lowCopyProtobufOutput0 = new LowCopyProtobufOutput();
      Schema<LowCopyProtobufOutput> schema0 = (Schema<LowCopyProtobufOutput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      int int0 = ProtostuffIOUtil.writeDelimitedTo((DataOutput) dataOutputStream0, lowCopyProtobufOutput0, schema0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      LowCopyProtobufOutput lowCopyProtobufOutput0 = new LowCopyProtobufOutput();
      Schema<LowCopyProtobufOutput> schema0 = (Schema<LowCopyProtobufOutput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[0];
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, (-866), (-866));
      int int0 = ProtostuffIOUtil.writeDelimitedTo((OutputStream) byteArrayOutputStream0, lowCopyProtobufOutput0, schema0, linkedBuffer0);
      assertEquals("\u0000", byteArrayOutputStream0.toString());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedBuffer linkedBuffer0 = new LinkedBuffer((byte)0);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0);
      ProtobufOutput protobufOutput0 = new ProtobufOutput(protostuffOutput0.head);
      Schema<ProtobufOutput> schema0 = (Schema<ProtobufOutput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      int int0 = ProtostuffIOUtil.writeTo((OutputStream) null, protobufOutput0, schema0, protostuffOutput0.head);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Serializing to a LinkedBuffer threw an IOException (should never happen).", "Serializing to a LinkedBuffer threw an IOException (should never happen).");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      byte[] byteArray0 = new byte[3];
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, (byte)102, (byte) (-84));
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0, objectOutputStream0);
      GraphProtostuffOutput graphProtostuffOutput0 = new GraphProtostuffOutput(protostuffOutput0);
      Schema<GraphProtostuffOutput> schema0 = (Schema<GraphProtostuffOutput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ProtostuffIOUtil.writeTo((OutputStream) objectOutputStream0, graphProtostuffOutput0, schema0, linkedBuffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer previously used and had not been reset.
         //
         verifyException("io.protostuff.ProtostuffIOUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedBuffer linkedBuffer0 = new LinkedBuffer((byte[]) null, 1867, (-231));
      Schema<ByteArrayInput> schema0 = (Schema<ByteArrayInput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ProtostuffIOUtil.writeTo(linkedBuffer0, (ByteArrayInput) null, schema0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer previously used and had not been reset.
         //
         verifyException("io.protostuff.ProtostuffIOUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkBuffer linkBuffer0 = new LinkBuffer();
      LowCopyProtostuffOutput lowCopyProtostuffOutput0 = new LowCopyProtostuffOutput(linkBuffer0);
      Schema<LowCopyProtostuffOutput> schema0 = (Schema<LowCopyProtostuffOutput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[3];
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, (byte)0);
      LinkedBuffer linkedBuffer1 = new LinkedBuffer(byteArray0, 256, (-1100), linkedBuffer0);
      // Undeclared exception!
      try { 
        ProtostuffIOUtil.toByteArray(lowCopyProtostuffOutput0, schema0, linkedBuffer1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer previously used and had not been reset.
         //
         verifyException("io.protostuff.ProtostuffIOUtil", e);
      }
  }
}
