/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 13 15:01:39 GMT 2017
 */

package io.protostuff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.protostuff.CodedInput;
import io.protostuff.GraphByteArrayInput;
import io.protostuff.GraphCodedInput;
import io.protostuff.LinkedBuffer;
import io.protostuff.ProtobufOutput;
import io.protostuff.ProtostuffOutput;
import io.protostuff.Schema;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CodedInput_ESTest extends CodedInput_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)6;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      CodedInput codedInput0 = new CodedInput(byteArrayInputStream0, byteArray0, 0, 1264, true);
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, 9999999);
      ProtobufOutput protobufOutput0 = new ProtobufOutput(linkedBuffer0);
      codedInput0.transferByteRangeTo(protobufOutput0, false, 1202, false);
      assertEquals(9, protobufOutput0.getSize());
      assertEquals(7, codedInput0.getTotalBytesRead());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)75;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      CodedInput codedInput0 = CodedInput.newInstance((InputStream) byteArrayInputStream0);
      LinkedBuffer linkedBuffer0 = new LinkedBuffer((byte)75);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0);
      try { 
        codedInput0.transferByteRangeTo(protostuffOutput0, false, (byte) (-1), false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // While parsing a protocol message, the input ended unexpectedly in the middle of a field.  This could mean either than the input has been truncated or that an embedded message misreported its own length.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-42);
      byteArray0[2] = (byte) (-4);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      CodedInput codedInput0 = new CodedInput(byteArrayInputStream0, false);
      CodedInput.readRawVarint32((InputStream) byteArrayInputStream0);
      Schema<GraphCodedInput> schema0 = (Schema<GraphCodedInput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      int int0 = codedInput0.readFieldNumber(schema0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, 2288);
      byte[] byteArray0 = new byte[5];
      CodedInput codedInput0 = new CodedInput(pushbackInputStream0, byteArray0, true);
      GraphCodedInput graphCodedInput0 = new GraphCodedInput(codedInput0);
      int int0 = codedInput0.readFieldNumber((Schema<Object>) graphCodedInput0);
      assertFalse(codedInput0.isCurrentFieldPacked());
      assertEquals(0, int0);
      assertEquals((-1), codedInput0.getBytesUntilLimit());
      assertEquals(0, codedInput0.getTotalBytesRead());
      assertTrue(codedInput0.decodeNestedMessageAsGroup);
      assertEquals(0, codedInput0.getLastTag());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0, 4, 4);
      try { 
        codedInput0.skipRawBytes(128);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // While parsing a protocol message, the input ended unexpectedly in the middle of a field.  This could mean either than the input has been truncated or that an embedded message misreported its own length.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-93);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      CodedInput codedInput0 = CodedInput.newInstance((InputStream) pushbackInputStream0);
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, 4, 2788);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0);
      try { 
        codedInput0.transferByteRangeTo(protostuffOutput0, true, (-965), true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // While parsing a protocol message, the input ended unexpectedly in the middle of a field.  This could mean either than the input has been truncated or that an embedded message misreported its own length.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[6];
      CodedInput codedInput0 = new CodedInput(sequenceInputStream0, byteArray0, 1, (byte)59, false);
      codedInput0.readRawBytes(1);
      assertEquals(1, codedInput0.getTotalBytesRead());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0);
      codedInput0.readUInt64();
      codedInput0.readInt64();
      codedInput0.readInt64();
      codedInput0.handleUnknownField(0, (Schema<String>) null);
      codedInput0.skipMessage();
      assertEquals(4, codedInput0.getTotalBytesRead());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 0);
      CodedInput codedInput0 = new CodedInput(byteArrayInputStream0, true);
      codedInput0.popLimit(0);
      try { 
        codedInput0.readSInt64();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // While parsing a protocol message, the input ended unexpectedly in the middle of a field.  This could mean either than the input has been truncated or that an embedded message misreported its own length.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      CodedInput codedInput0 = new CodedInput(byteArrayInputStream0, byteArray0, 0, 1264, true);
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, 9999999);
      ProtobufOutput protobufOutput0 = new ProtobufOutput(linkedBuffer0);
      codedInput0.transferByteRangeTo(protobufOutput0, false, 1202, false);
      int int0 = codedInput0.getTotalBytesRead();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      CodedInput codedInput0 = new CodedInput(byteArray0, (byte)0, (-1626), true);
      Schema<GraphByteArrayInput> schema0 = (Schema<GraphByteArrayInput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      try { 
        codedInput0.readFieldNumber(schema0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Protocol message contained an invalid tag (zero).
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      CodedInput codedInput0 = new CodedInput(pipedInputStream0, byteArray0, true);
      // Undeclared exception!
      try { 
        codedInput0.isAtEnd();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // InputStream#read(byte[]) returned invalid result: 0
         // The InputStream implementation is buggy.
         //
         verifyException("io.protostuff.CodedInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      CodedInput codedInput0 = new CodedInput(byteArrayInputStream0, byteArray0, (byte)90, (byte)6, false);
      int int0 = codedInput0.getBytesUntilLimit();
      assertFalse(codedInput0.isCurrentFieldPacked());
      assertFalse(codedInput0.decodeNestedMessageAsGroup);
      assertEquals((-1), int0);
      assertEquals(0, codedInput0.getTotalBytesRead());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0, (int) (byte)47, 4);
      int int0 = codedInput0.pushLimit(4);
      assertEquals(4, codedInput0.getBytesUntilLimit());
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0);
      try { 
        codedInput0.pushLimit((-3493));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // CodedInput encountered an embedded string or message which claimed to have negative size.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0);
      codedInput0.reset();
      assertFalse(codedInput0.decodeNestedMessageAsGroup);
      assertEquals(0, codedInput0.getTotalBytesRead());
      assertFalse(codedInput0.isCurrentFieldPacked());
      assertEquals((-1), codedInput0.getBytesUntilLimit());
      assertEquals(0, codedInput0.getLastTag());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      CodedInput codedInput0 = new CodedInput(byteArray0, (byte)0, (-2382), false);
      // Undeclared exception!
      try { 
        codedInput0.setSizeLimit((byte) (-98));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Size limit cannot be negative: -98
         //
         verifyException("io.protostuff.CodedInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      long long0 = CodedInput.decodeZigZag64((-1997L));
      assertEquals((-9223372036854774810L), long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[7] = (byte)27;
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0);
      long long0 = codedInput0.readRawLittleEndian64();
      assertEquals(8, codedInput0.getTotalBytesRead());
      assertEquals(1945555039024054272L, long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[6] = (byte) (-65);
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0);
      long long0 = codedInput0.readRawLittleEndian64();
      assertEquals(8, codedInput0.getTotalBytesRead());
      assertEquals(53761720551735296L, long0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[6] = (byte) (-65);
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0);
      codedInput0.readRawVarint32();
      long long0 = codedInput0.readRawLittleEndian64();
      assertEquals(9, codedInput0.getTotalBytesRead());
      assertEquals(210006720905216L, long0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[4] = (byte)16;
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0);
      long long0 = codedInput0.readRawLittleEndian64();
      assertEquals((-1), codedInput0.getBytesUntilLimit());
      assertEquals(68719476736L, long0);
      assertFalse(codedInput0.isCurrentFieldPacked());
      assertFalse(codedInput0.decodeNestedMessageAsGroup);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[4] = (byte)16;
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0);
      codedInput0.readRawVarint32();
      long long0 = codedInput0.readRawLittleEndian64();
      assertEquals(9, codedInput0.getTotalBytesRead());
      assertEquals(268435456L, long0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-85);
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0);
      long long0 = codedInput0.readRawLittleEndian64();
      assertEquals(8, codedInput0.getTotalBytesRead());
      assertEquals(43776L, long0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-85);
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0);
      codedInput0.readRawVarint32();
      long long0 = codedInput0.readRawLittleEndian64();
      assertEquals(9, codedInput0.getTotalBytesRead());
      assertEquals(171L, long0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte) (-24);
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0);
      int int0 = codedInput0.readRawLittleEndian32();
      assertEquals(4, codedInput0.getTotalBytesRead());
      assertEquals((-402653184), int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)8;
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0, 0, (int) (byte) (-1));
      int int0 = codedInput0.readRawLittleEndian32();
      assertEquals(4, codedInput0.getTotalBytesRead());
      assertEquals(524288, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-1);
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0, 0, (int) (byte) (-1));
      int int0 = codedInput0.readRawLittleEndian32();
      assertEquals(4, codedInput0.getTotalBytesRead());
      assertEquals(65280, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte)34;
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0);
      codedInput0.readUInt64();
      long long0 = codedInput0.readInt64();
      assertEquals(3, codedInput0.getTotalBytesRead());
      assertEquals(4463L, long0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-42);
      byteArray0[1] = (byte)8;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      int int0 = CodedInput.readRawVarint32((InputStream) byteArrayInputStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(1110, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      int int0 = CodedInput.readRawVarint32((InputStream) byteArrayInputStream0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)90;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      int int0 = CodedInput.readRawVarint32((InputStream) byteArrayInputStream0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(90, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-25);
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-25);
      byteArray0[3] = (byte) (-25);
      byteArray0[4] = (byte)8;
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0);
      int int0 = codedInput0.readSInt32();
      assertEquals(5, codedInput0.getTotalBytesRead());
      assertEquals((-1182588980), int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-25);
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-25);
      byteArray0[3] = (byte) (-25);
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0);
      codedInput0.readSInt32();
      codedInput0.readEnum();
      codedInput0.readRawVarint32();
      try { 
        codedInput0.readRawVarint32();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // While parsing a protocol message, the input ended unexpectedly in the middle of a field.  This could mean either than the input has been truncated or that an embedded message misreported its own length.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte) (-23);
      byteArray0[3] = (byte)85;
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0);
      codedInput0.readUInt64();
      int int0 = codedInput0.readEnum();
      assertEquals(4, codedInput0.getTotalBytesRead());
      assertEquals(1406084, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-25);
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-25);
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0);
      int int0 = codedInput0.readSInt32();
      assertEquals(4, codedInput0.getTotalBytesRead());
      assertEquals((-843828), int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-42);
      byteArray0[1] = (byte)8;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      CodedInput codedInput0 = new CodedInput(byteArrayInputStream0, false);
      Schema<GraphCodedInput> schema0 = (Schema<GraphCodedInput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      int int0 = codedInput0.readFieldNumber(schema0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(138, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-25);
      byteArray0[1] = (byte) (-128);
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0);
      int int0 = codedInput0.readSInt32();
      assertEquals(3, codedInput0.getTotalBytesRead());
      assertEquals((-52), int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)6;
      byteArray0[8] = (byte)119;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      CodedInput codedInput0 = new CodedInput(byteArrayInputStream0, byteArray0, 0, 1264, true);
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, 9999999);
      ProtobufOutput protobufOutput0 = new ProtobufOutput(linkedBuffer0);
      codedInput0.transferByteRangeTo(protobufOutput0, false, 1202, false);
      codedInput0.readSInt64();
      // Undeclared exception!
      try { 
        codedInput0.readBytes();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      CodedInput codedInput0 = new CodedInput(sequenceInputStream0, true);
      Schema<GraphByteArrayInput> schema0 = (Schema<GraphByteArrayInput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(schema0).isInitialized(any());
      doReturn((Object) null).when(schema0).newMessage();
      // Undeclared exception!
      try { 
        codedInput0.mergeObject((GraphByteArrayInput) null, schema0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.CodedInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0);
      Schema<CodedInput> schema0 = (Schema<CodedInput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(schema0).isInitialized(any());
      // Undeclared exception!
      try { 
        codedInput0.mergeObject(codedInput0, schema0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.CodedInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-37);
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0);
      boolean boolean0 = codedInput0.readBool();
      assertEquals(2, codedInput0.getTotalBytesRead());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0, 0, 1378);
      boolean boolean0 = codedInput0.readBool();
      assertEquals(1, codedInput0.getTotalBytesRead());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)87;
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0);
      try { 
        codedInput0.skipMessage();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Protocol message tag had invalid wire type.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      CodedInput codedInput0 = new CodedInput(byteArray0, (-1003), (-1896), false);
      boolean boolean0 = codedInput0.skipField((byte)84);
      assertEquals(0, codedInput0.getTotalBytesRead());
      assertFalse(boolean0);
      assertFalse(codedInput0.isCurrentFieldPacked());
      assertFalse(codedInput0.decodeNestedMessageAsGroup);
      assertEquals((-1), codedInput0.getBytesUntilLimit());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(dataInputStream0);
      byte[] byteArray0 = new byte[3];
      CodedInput codedInput0 = new CodedInput(bufferedInputStream0, byteArray0, false);
      try { 
        codedInput0.checkLastTagWas((byte)27);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Protocol message end-group tag did not match expected tag.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CodedInput codedInput0 = new CodedInput((InputStream) null, true);
      try { 
        codedInput0.checkLastTagWas((-684));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Protocol message end-group tag did not match expected tag.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      CodedInput codedInput0 = new CodedInput(byteArray0, (byte)0, (byte)0, false);
      int int0 = codedInput0.readTag();
      assertEquals(0, int0);
      assertFalse(codedInput0.isCurrentFieldPacked());
      assertEquals(0, codedInput0.getTotalBytesRead());
      assertEquals((-1), codedInput0.getBytesUntilLimit());
      assertFalse(codedInput0.decodeNestedMessageAsGroup);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0);
      try { 
        codedInput0.skipMessage();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Protocol message contained an invalid tag (zero).
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }
}
