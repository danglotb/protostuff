/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 13 15:09:10 GMT 2017
 */

package io.protostuff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.protostuff.CodedInput;
import io.protostuff.GraphByteArrayInput;
import io.protostuff.GraphCodedInput;
import io.protostuff.GraphProtostuffOutput;
import io.protostuff.LinkBuffer;
import io.protostuff.LinkedBuffer;
import io.protostuff.LowCopyProtobufOutput;
import io.protostuff.LowCopyProtostuffOutput;
import io.protostuff.ProtobufIOUtil;
import io.protostuff.ProtobufOutput;
import io.protostuff.ProtostuffOutput;
import io.protostuff.Schema;
import io.protostuff.WriteSession;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutput;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ProtobufIOUtil_ESTest extends ProtobufIOUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Schema<InputStream> schema0 = (Schema<InputStream>) mock(Schema.class, new ViolatedAssumptionAnswer());
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(5);
      MockFile mockFile0 = new MockFile("OSp'CvO|BEm#", "OSp'CvO|BEm#");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      int int0 = ProtobufIOUtil.optWriteDelimitedTo((OutputStream) mockFileOutputStream0, (InputStream) sequenceInputStream0, schema0, linkedBuffer0);
      assertEquals(1L, mockFile0.length());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      LowCopyProtobufOutput lowCopyProtobufOutput0 = new LowCopyProtobufOutput();
      Schema<LowCopyProtobufOutput> schema0 = (Schema<LowCopyProtobufOutput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(256);
      boolean boolean0 = ProtobufIOUtil.optMergeDelimitedFrom((InputStream) byteArrayInputStream0, lowCopyProtobufOutput0, schema0, true, linkedBuffer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("(;r~J^");
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(1870);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[9];
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0, (int) (byte)0, 1913);
      MockFile mockFile0 = new MockFile("(;r~J^");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      boolean boolean0 = ProtobufIOUtil.optMergeDelimitedFrom((InputStream) mockFileInputStream0, codedInput0, (Schema<CodedInput>) null, false, linkedBuffer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)8;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Schema<LowCopyProtobufOutput> schema0 = (Schema<LowCopyProtobufOutput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(schema0).newMessage();
      List<LowCopyProtobufOutput> list0 = ProtobufIOUtil.parseListFrom((InputStream) byteArrayInputStream0, schema0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-77);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      Schema<GraphByteArrayInput> schema0 = (Schema<GraphByteArrayInput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(schema0).newMessage();
      try { 
        ProtobufIOUtil.parseListFrom((InputStream) dataInputStream0, schema0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // While parsing a protocol message, the input ended unexpectedly in the middle of a field.  This could mean either than the input has been truncated or that an embedded message misreported its own length.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte) (-66);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      Schema<GraphByteArrayInput> schema0 = (Schema<GraphByteArrayInput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(schema0).newMessage();
      List<GraphByteArrayInput> list0 = ProtobufIOUtil.parseListFrom((InputStream) dataInputStream0, schema0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(324);
      ProtobufOutput protobufOutput0 = new ProtobufOutput(linkedBuffer0);
      LinkedList<ProtobufOutput> linkedList0 = new LinkedList<ProtobufOutput>();
      Schema<ProtobufOutput> schema0 = (Schema<ProtobufOutput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      int int0 = ProtobufIOUtil.writeListTo((OutputStream) null, (List<ProtobufOutput>) linkedList0, schema0, protobufOutput0.head);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedBuffer linkedBuffer0 = new LinkedBuffer((byte[]) null, (-1530), (-1184));
      LinkedList<InputStream> linkedList0 = new LinkedList<InputStream>();
      Schema<InputStream> schema0 = (Schema<InputStream>) mock(Schema.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ProtobufIOUtil.writeListTo((OutputStream) null, (List<InputStream>) linkedList0, schema0, linkedBuffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer previously used and had not been reset.
         //
         verifyException("io.protostuff.ProtobufIOUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("(;r~J^");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[9];
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0, (int) (byte)0, 1913);
      GraphCodedInput graphCodedInput0 = new GraphCodedInput(codedInput0, (byte)1);
      Schema<GraphCodedInput> schema0 = (Schema<GraphCodedInput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      int int0 = ProtobufIOUtil.writeDelimitedTo((DataOutput) objectOutputStream0, graphCodedInput0, schema0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, 5, (byte)124);
      LinkedBuffer linkedBuffer1 = new LinkedBuffer(linkedBuffer0, linkedBuffer0);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0, pipedOutputStream0);
      GraphProtostuffOutput graphProtostuffOutput0 = new GraphProtostuffOutput(protostuffOutput0, 2769);
      Schema<GraphProtostuffOutput> schema0 = (Schema<GraphProtostuffOutput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      int int0 = ProtobufIOUtil.writeDelimitedTo((OutputStream) pipedOutputStream0, graphProtostuffOutput0, schema0, linkedBuffer1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("h0''>%,:W", true);
      byte[] byteArray0 = new byte[5];
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0);
      Schema<CodedInput> schema0 = (Schema<CodedInput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, 112);
      LinkedBuffer linkedBuffer1 = new LinkedBuffer(byteArray0, 1334, 343, linkedBuffer0);
      // Undeclared exception!
      try { 
        ProtobufIOUtil.writeDelimitedTo((OutputStream) mockFileOutputStream0, codedInput0, schema0, linkedBuffer1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer previously used and had not been reset.
         //
         verifyException("io.protostuff.ProtobufIOUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(2538);
      Schema<Integer> schema0 = (Schema<Integer>) mock(Schema.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[7];
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, 31, (byte)0);
      // Undeclared exception!
      try { 
        ProtobufIOUtil.writeTo((OutputStream) null, integer0, schema0, linkedBuffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer previously used and had not been reset.
         //
         verifyException("io.protostuff.ProtobufIOUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      LinkedBuffer linkedBuffer0 = new LinkedBuffer((byte)0);
      LinkedBuffer linkedBuffer1 = new LinkedBuffer(byteArray0, (-947), (byte) (-34), linkedBuffer0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0, objectOutputStream0, (WriteSession.FlushHandler) null, 512);
      Schema<ProtostuffOutput> schema0 = (Schema<ProtostuffOutput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ProtobufIOUtil.writeTo(linkedBuffer1, protostuffOutput0, schema0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer previously used and had not been reset.
         //
         verifyException("io.protostuff.ProtobufIOUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, (byte)0);
      LinkedBuffer linkedBuffer1 = new LinkedBuffer(byteArray0, 635, 0, linkedBuffer0);
      Schema<Integer> schema0 = (Schema<Integer>) mock(Schema.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ProtobufIOUtil.writeTo(linkedBuffer1, (Integer) 512, schema0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer previously used and had not been reset.
         //
         verifyException("io.protostuff.ProtobufIOUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      LowCopyProtostuffOutput lowCopyProtostuffOutput0 = new LowCopyProtostuffOutput((LinkBuffer) null);
      Schema<LowCopyProtostuffOutput> schema0 = (Schema<LowCopyProtostuffOutput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, (byte) (-3), (-854));
      // Undeclared exception!
      try { 
        ProtobufIOUtil.toByteArray(lowCopyProtostuffOutput0, schema0, linkedBuffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer previously used and had not been reset.
         //
         verifyException("io.protostuff.ProtobufIOUtil", e);
      }
  }
}
