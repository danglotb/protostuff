/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 13 15:14:46 GMT 2017
 */

package io.protostuff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.protostuff.GraphProtostuffOutput;
import io.protostuff.LinkedBuffer;
import io.protostuff.ProtostuffOutput;
import io.protostuff.Schema;
import io.protostuff.WriteSession;
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GraphProtostuffOutput_ESTest extends GraphProtostuffOutput_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      GraphProtostuffOutput graphProtostuffOutput0 = new GraphProtostuffOutput((ProtostuffOutput) null, 0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte) (-1);
      byteArray0[4] = (byte) (-55);
      byteArray0[6] = (byte)52;
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, (byte) (-37));
      LinkedBuffer linkedBuffer1 = new LinkedBuffer(byteArray0, 5, linkedBuffer0);
      LinkedBuffer linkedBuffer2 = new LinkedBuffer(4, linkedBuffer1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(256);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Locale locale0 = new Locale("io.protostuff.ProtobufOutput", "io.protostuff.ProtobufOutput");
      PrintStream printStream0 = mockPrintStream0.printf(locale0, ";*]7df~g$e`~oZ;}", (Object[]) null);
      WriteSession.FlushHandler writeSession_FlushHandler0 = mock(WriteSession.FlushHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(writeSession_FlushHandler0).flush(any(io.protostuff.WriteSession.class) , any(byte[].class) , anyInt() , anyInt());
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer2, printStream0, writeSession_FlushHandler0, (byte)86);
      GraphProtostuffOutput graphProtostuffOutput0 = new GraphProtostuffOutput(protostuffOutput0, 65533);
      Schema<ProtostuffOutput> schema0 = (Schema<ProtostuffOutput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      graphProtostuffOutput0.writeObject((int) 52, protostuffOutput0, schema0, true);
      Schema<ProtostuffOutput> schema1 = (Schema<ProtostuffOutput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      graphProtostuffOutput0.writeObject(65533, protostuffOutput0, schema1, true);
      assertEquals(8, protostuffOutput0.getSize());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, 4096, (-3328));
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("hte4_b/$l{`mZd{", false);
      WriteSession.FlushHandler writeSession_FlushHandler0 = mock(WriteSession.FlushHandler.class, new ViolatedAssumptionAnswer());
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0, mockFileOutputStream0, writeSession_FlushHandler0, 512);
      GraphProtostuffOutput graphProtostuffOutput0 = null;
      try {
        graphProtostuffOutput0 = new GraphProtostuffOutput(protostuffOutput0, (byte) (-45));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // expectedMaxSize is negative: -45
         //
         verifyException("io.protostuff.GraphProtostuffOutput$IdentityMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, (byte) (-37));
      LinkedBuffer linkedBuffer1 = new LinkedBuffer(byteArray0, 5, linkedBuffer0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      WriteSession.FlushHandler writeSession_FlushHandler0 = mock(WriteSession.FlushHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(writeSession_FlushHandler0).flush(any(io.protostuff.WriteSession.class) , any(byte[].class) , anyInt() , anyInt());
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer1, mockPrintStream0, writeSession_FlushHandler0, (byte)86);
      GraphProtostuffOutput graphProtostuffOutput0 = new GraphProtostuffOutput(protostuffOutput0, 65533);
      Schema<ProtostuffOutput> schema0 = (Schema<ProtostuffOutput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      graphProtostuffOutput0.writeObject((int) 52, protostuffOutput0, schema0, true);
      Schema<ProtostuffOutput> schema1 = (Schema<ProtostuffOutput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      graphProtostuffOutput0.writeObject(65533, protostuffOutput0, schema1, true);
      assertEquals(8, protostuffOutput0.getSize());
      assertArrayEquals(new byte[] {(byte) (-92), (byte)3, (byte) (-18), (byte) (-1), (byte)31, (byte)0, (byte)3}, byteArray0);
  }
}
