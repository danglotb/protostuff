/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 13 15:17:34 GMT 2017
 */

package io.protostuff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import io.protostuff.ByteString;
import io.protostuff.CodedInput;
import io.protostuff.GraphProtostuffOutput;
import io.protostuff.LinkedBuffer;
import io.protostuff.ProtostuffOutput;
import io.protostuff.Schema;
import io.protostuff.WriteSession;
import java.io.DataOutputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.nio.ByteBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ProtostuffOutput_ESTest extends ProtostuffOutput_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(2091);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      WriteSession writeSession0 = new WriteSession(linkedBuffer0, dataOutputStream0);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(writeSession0.head, (OutputStream) null);
      byte[] byteArray0 = new byte[7];
      CodedInput codedInput0 = CodedInput.newInstance(byteArray0);
      ByteBuffer byteBuffer0 = codedInput0.readByteBuffer();
      protostuffOutput0.writeBytes(256, byteBuffer0, false);
      assertEquals(3, protostuffOutput0.getSize());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(39);
      WriteSession writeSession0 = new WriteSession(linkedBuffer0, 512);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(writeSession0.head);
      ByteString byteString0 = ByteString.copyFromUtf8("Protocol message tag had invalid wire type.");
      protostuffOutput0.writeBytes(0, byteString0, false);
      assertEquals(45, protostuffOutput0.getSize());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(39);
      WriteSession writeSession0 = new WriteSession(linkedBuffer0, 512);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(writeSession0.head);
      protostuffOutput0.writeFixed64((byte)111, (byte)111, false);
      protostuffOutput0.writeInt64(39, (-1790L), false);
      ByteString byteString0 = ByteString.copyFromUtf8("Protocol message tag had invalid wire type.");
      protostuffOutput0.writeBytes(0, byteString0, false);
      assertEquals(67, protostuffOutput0.getSize());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, (byte)1);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Aen c!3SV];?.f");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      WriteSession.FlushHandler writeSession_FlushHandler0 = mock(WriteSession.FlushHandler.class, new ViolatedAssumptionAnswer());
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0, dataOutputStream0, writeSession_FlushHandler0, 237);
      protostuffOutput0.writeString(1131, "", true);
      assertEquals(3, protostuffOutput0.getSize());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(2091);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      WriteSession writeSession0 = new WriteSession(linkedBuffer0, dataOutputStream0);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(writeSession0.head, (OutputStream) null);
      protostuffOutput0.writeBool(2091, false, true);
      assertEquals(4, protostuffOutput0.getSize());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(0);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0);
      protostuffOutput0.writeBool(0, true, true);
      assertEquals(2, protostuffOutput0.getSize());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, (byte)1, 0);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0);
      protostuffOutput0.writeDouble(1, (byte)1, true);
      protostuffOutput0.writeDouble((-262), 256, false);
      assertArrayEquals(new byte[] {(byte)9, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(22, protostuffOutput0.getSize());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(1564);
      MockPrintStream mockPrintStream0 = new MockPrintStream("~ Q;m,?Nww$Iv6JILxK");
      WriteSession.FlushHandler writeSession_FlushHandler0 = mock(WriteSession.FlushHandler.class, new ViolatedAssumptionAnswer());
      WriteSession writeSession0 = new WriteSession(linkedBuffer0, mockPrintStream0, writeSession_FlushHandler0, 31);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0, pipedOutputStream0, writeSession0.flushHandler, 5);
      protostuffOutput0.writeInt32((-938), 31, false);
      protostuffOutput0.writeInt64((-753), 256, false);
      protostuffOutput0.writeSFixed32(2293, (-1983), false);
      protostuffOutput0.writeDouble(0, 31, true);
      assertEquals(29, protostuffOutput0.getSize());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(2091);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0, (OutputStream) null);
      protostuffOutput0.writeFloat(512, (-1.0F), false);
      assertEquals(6, protostuffOutput0.getSize());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(0);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0);
      protostuffOutput0.writeFloat((-2232), 0.0F, false);
      assertEquals(9, protostuffOutput0.getSize());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(1564);
      MockPrintStream mockPrintStream0 = new MockPrintStream("~ Q;m,?Nww$Iv6JILxK");
      WriteSession.FlushHandler writeSession_FlushHandler0 = mock(WriteSession.FlushHandler.class, new ViolatedAssumptionAnswer());
      WriteSession writeSession0 = new WriteSession(linkedBuffer0, mockPrintStream0, writeSession_FlushHandler0, 31);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0, pipedOutputStream0, writeSession0.flushHandler, 5);
      protostuffOutput0.writeSFixed64(512, 0, false);
      assertEquals(10, protostuffOutput0.getSize());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(1);
      WriteSession writeSession0 = new WriteSession(linkedBuffer0, 512);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(writeSession0.head);
      protostuffOutput0.writeFixed64((byte) (-1), (byte) (-1), true);
      assertEquals(13, protostuffOutput0.getSize());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(2091);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      WriteSession writeSession0 = new WriteSession(linkedBuffer0, dataOutputStream0);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(writeSession0.head, (OutputStream) null);
      protostuffOutput0.writeSInt64(0, 512, false);
      assertEquals(3, protostuffOutput0.getSize());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(0);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0);
      protostuffOutput0.writeSInt64((-3140), 113, true);
      assertEquals(7, protostuffOutput0.getSize());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(0);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0);
      protostuffOutput0.writeUInt64(0, 0L, true);
      assertEquals(2, protostuffOutput0.getSize());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(0);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0);
      protostuffOutput0.writeUInt64((-872), 0L, false);
      assertEquals(6, protostuffOutput0.getSize());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(0);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0);
      protostuffOutput0.writeInt64(0, 256, false);
      assertEquals(3, protostuffOutput0.getSize());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(1564);
      MockPrintStream mockPrintStream0 = new MockPrintStream("~ Q;m,?Nww$Iv6JILxK");
      WriteSession.FlushHandler writeSession_FlushHandler0 = mock(WriteSession.FlushHandler.class, new ViolatedAssumptionAnswer());
      WriteSession writeSession0 = new WriteSession(linkedBuffer0, mockPrintStream0, writeSession_FlushHandler0, 512);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0, pipedOutputStream0, writeSession0.flushHandler, 5);
      protostuffOutput0.writeSFixed32(0, (-1988), false);
      assertEquals(5, protostuffOutput0.getSize());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(1564);
      MockPrintStream mockPrintStream0 = new MockPrintStream("~ Q;m,?Nww$Iv6JILxK");
      WriteSession.FlushHandler writeSession_FlushHandler0 = mock(WriteSession.FlushHandler.class, new ViolatedAssumptionAnswer());
      WriteSession writeSession0 = new WriteSession(linkedBuffer0, mockPrintStream0, writeSession_FlushHandler0, 512);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(writeSession0.head, pipedOutputStream0, writeSession0.flushHandler, 5);
      protostuffOutput0.writeFixed32(31, 512, true);
      assertEquals(6, protostuffOutput0.getSize());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(0);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0);
      protostuffOutput0.writeFixed32((-84), 256, false);
      assertEquals(9, protostuffOutput0.getSize());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(0);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0);
      protostuffOutput0.writeSInt32((-84), (-1), true);
      assertEquals(6, protostuffOutput0.getSize());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(0);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0);
      protostuffOutput0.writeSInt32(56320, 256, false);
      assertEquals(5, protostuffOutput0.getSize());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(1564);
      MockPrintStream mockPrintStream0 = new MockPrintStream("~ Q;m,?Nww$Iv6JILxK");
      WriteSession.FlushHandler writeSession_FlushHandler0 = mock(WriteSession.FlushHandler.class, new ViolatedAssumptionAnswer());
      WriteSession writeSession0 = new WriteSession(linkedBuffer0, mockPrintStream0, writeSession_FlushHandler0, 512);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0, pipedOutputStream0, writeSession0.flushHandler, 5);
      protostuffOutput0.writeUInt32(256, 31, false);
      assertEquals(3, protostuffOutput0.getSize());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(0);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0);
      protostuffOutput0.writeUInt32(1592, 13, true);
      assertEquals(3, protostuffOutput0.getSize());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(350);
      WriteSession writeSession0 = new WriteSession(linkedBuffer0, 512);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(writeSession0.head);
      protostuffOutput0.writeUInt32(1825, (-1), false);
      assertEquals(7, protostuffOutput0.getSize());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(2091);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      WriteSession writeSession0 = new WriteSession(linkedBuffer0, dataOutputStream0);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(writeSession0.head, (OutputStream) null);
      protostuffOutput0.writeEnum(0, 0, false);
      assertEquals(2, protostuffOutput0.getSize());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(350);
      WriteSession writeSession0 = new WriteSession(linkedBuffer0, 512);
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(writeSession0.head);
      protostuffOutput0.writeEnum((-1), 256, false);
      assertEquals(7, protostuffOutput0.getSize());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/bdanglot/workspace/dspot-experiments/dataset/protostuff/protostuff-core");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)22;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)31;
      LinkedBuffer linkedBuffer0 = new LinkedBuffer(byteArray0, (byte)1);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Aen c!3SV];?.f");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      WriteSession.FlushHandler writeSession_FlushHandler0 = mock(WriteSession.FlushHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(writeSession_FlushHandler0).flush(any(io.protostuff.WriteSession.class) , any(byte[].class) , anyInt() , anyInt());
      ProtostuffOutput protostuffOutput0 = new ProtostuffOutput(linkedBuffer0, dataOutputStream0, writeSession_FlushHandler0, 237);
      protostuffOutput0.writeEnum((byte)1, (-62), false);
      GraphProtostuffOutput graphProtostuffOutput0 = new GraphProtostuffOutput(protostuffOutput0);
      Schema<GraphProtostuffOutput> schema0 = (Schema<GraphProtostuffOutput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      protostuffOutput0.writeObject(69, graphProtostuffOutput0, schema0, false);
      mockFileOutputStream0.write((int) (byte) (-84));
  }
}
