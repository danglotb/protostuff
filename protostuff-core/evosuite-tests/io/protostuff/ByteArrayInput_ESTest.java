/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 13 15:13:00 GMT 2017
 */

package io.protostuff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.protostuff.ByteArrayInput;
import io.protostuff.ByteBufferInput;
import io.protostuff.GraphByteArrayInput;
import io.protostuff.GraphCodedInput;
import io.protostuff.GraphProtostuffOutput;
import io.protostuff.LinkBuffer;
import io.protostuff.LowCopyProtobufOutput;
import io.protostuff.ProtobufOutput;
import io.protostuff.ProtostuffOutput;
import io.protostuff.Schema;
import java.io.IOException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ByteArrayInput_ESTest extends ByteArrayInput_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, false);
      LowCopyProtobufOutput lowCopyProtobufOutput0 = new LowCopyProtobufOutput();
      byteArrayInput0.transferByteRangeTo(lowCopyProtobufOutput0, false, 2449, true);
      assertEquals(1, byteArrayInput0.currentOffset());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[6] = (byte) (-126);
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, true);
      long long0 = byteArrayInput0.readRawLittleEndian64();
      assertEquals(8, byteArrayInput0.currentOffset());
      assertEquals(36591746972385280L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[5] = (byte)4;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, true);
      long long0 = byteArrayInput0.readRawLittleEndian64();
      assertEquals(8, byteArrayInput0.currentOffset());
      assertEquals(4398046511104L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[4] = (byte)21;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, true);
      long long0 = byteArrayInput0.readRawLittleEndian64();
      assertEquals(8, byteArrayInput0.currentOffset());
      assertEquals(90194313216L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte) (-111);
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, true);
      long long0 = byteArrayInput0.readRawLittleEndian64();
      assertEquals(8, byteArrayInput0.currentOffset());
      assertEquals(2432696320L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte) (-18);
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, true);
      long long0 = byteArrayInput0.readRawLittleEndian64();
      assertEquals(8, byteArrayInput0.currentOffset());
      assertEquals(15597568L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-61);
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, true);
      long long0 = byteArrayInput0.readRawLittleEndian64();
      assertEquals(8, byteArrayInput0.currentOffset());
      assertEquals(49920L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)17;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, true);
      long long0 = byteArrayInput0.readRawLittleEndian64();
      assertEquals(8, byteArrayInput0.currentOffset());
      assertEquals(17L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, false);
      byteArrayInput0.readInt64();
      byteArrayInput0.readDouble();
      assertEquals(9, byteArrayInput0.currentOffset());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte)21;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, false);
      float float0 = byteArrayInput0.readFloat();
      assertEquals(4, byteArrayInput0.currentOffset());
      assertEquals(2.5849394E-26F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)95;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, false);
      float float0 = byteArrayInput0.readFloat();
      assertEquals(4, byteArrayInput0.currentOffset());
      assertEquals(3.408E-41F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)110;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, false);
      float float0 = byteArrayInput0.readFloat();
      assertEquals(4, byteArrayInput0.currentOffset());
      assertEquals(1.54E-43F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)59;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, false);
      int int0 = byteArrayInput0.readFixed32();
      assertEquals(4, byteArrayInput0.currentOffset());
      assertEquals(3866624, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, true);
      long long0 = byteArrayInput0.readSInt64();
      assertEquals(1, byteArrayInput0.currentOffset());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte)59;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, true);
      long long0 = byteArrayInput0.readRawVarint64();
      assertEquals(1, byteArrayInput0.currentOffset());
      assertEquals(59L, long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[4] = (byte)28;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, false);
      byteArrayInput0.readFixed32();
      long long0 = byteArrayInput0.readSInt64();
      assertEquals(5, byteArrayInput0.currentOffset());
      assertEquals(14L, long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte)3;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, true);
      ByteArrayInput byteArrayInput1 = byteArrayInput0.setBounds((byte)1, 3348);
      long long0 = byteArrayInput1.readInt64();
      assertEquals(3348, byteArrayInput0.currentLimit());
      assertEquals(432L, long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte) (-1);
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, true);
      int int0 = byteArrayInput0.readTag();
      assertEquals(5, byteArrayInput0.currentOffset());
      assertEquals(267336665, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte) (-21);
      byteArray0[3] = (byte) (-111);
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, true);
      byteArrayInput0.readUInt32();
      int int0 = byteArrayInput0.readEnum();
      assertEquals(5, byteArrayInput0.currentOffset());
      assertEquals(292291, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-10);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-9);
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, (byte)0, 64, false);
      byteArrayInput0.readUInt64();
      Schema<ByteBufferInput> schema0 = (Schema<ByteBufferInput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      byteArrayInput0.handleUnknownField((int)  (-9), schema0);
      assertEquals(5, byteArrayInput0.currentOffset());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte)125;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, false);
      int int0 = byteArrayInput0.readEnum();
      assertEquals(3, byteArrayInput0.currentOffset());
      assertEquals(2059533, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)8;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, false);
      int int0 = byteArrayInput0.readSInt32();
      assertEquals(2, byteArrayInput0.currentOffset());
      assertEquals((-548), int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte)2;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, false);
      Schema<GraphCodedInput> schema0 = (Schema<GraphCodedInput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      byteArrayInput0.handleUnknownField(732, schema0);
      assertEquals(2, byteArrayInput0.currentOffset());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-115);
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, false);
      int int0 = byteArrayInput0.readEnum();
      assertEquals(2, byteArrayInput0.currentOffset());
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)118;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, true);
      int int0 = byteArrayInput0.readTag();
      assertEquals(1, byteArrayInput0.currentOffset());
      assertEquals(118, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, false);
      try { 
        byteArrayInput0.readFieldNumber((Schema<ProtobufOutput>) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Protocol message contained an invalid tag (zero).
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, true);
      LowCopyProtobufOutput lowCopyProtobufOutput0 = new LowCopyProtobufOutput();
      Schema<LowCopyProtobufOutput> schema0 = (Schema<LowCopyProtobufOutput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(schema0).isInitialized(any());
      // Undeclared exception!
      try { 
        byteArrayInput0.mergeObject(lowCopyProtobufOutput0, schema0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.ByteArrayInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, 0, (byte)34, false);
      Schema<ProtostuffOutput> schema0 = (Schema<ProtostuffOutput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(schema0).isInitialized(any());
      doReturn((Object) null).when(schema0).newMessage();
      // Undeclared exception!
      try { 
        byteArrayInput0.mergeObject((ProtostuffOutput) null, schema0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.ByteArrayInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, false);
      LowCopyProtobufOutput lowCopyProtobufOutput0 = new LowCopyProtobufOutput();
      Schema<LowCopyProtobufOutput> schema0 = (Schema<LowCopyProtobufOutput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(schema0).isInitialized(any());
      // Undeclared exception!
      try { 
        byteArrayInput0.mergeObject(lowCopyProtobufOutput0, schema0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.protostuff.ByteArrayInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-16);
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, false);
      byteArrayInput0.readByteArray();
      assertEquals(5, byteArrayInput0.currentOffset());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, false);
      byteArrayInput0.readString();
      assertEquals(1, byteArrayInput0.currentOffset());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[2] = (byte)81;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, true);
      byteArrayInput0.readString();
      assertEquals(2, byteArrayInput0.currentOffset());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, true);
      byteArrayInput0.readString();
      assertEquals(1, byteArrayInput0.currentOffset());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte)3;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, true);
      Schema<ByteArrayInput> schema0 = (Schema<ByteArrayInput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      byteArrayInput0.readTag();
      byteArrayInput0.readFieldNumber(schema0);
      long long0 = byteArrayInput0.readSInt64();
      assertEquals(118, byteArrayInput0.getLastTag());
      assertEquals((-2L), long0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-11);
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, false);
      boolean boolean0 = byteArrayInput0.readBool();
      assertEquals(1, byteArrayInput0.currentOffset());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)45;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, false);
      boolean boolean0 = byteArrayInput0.readBool();
      assertEquals(1, byteArrayInput0.currentOffset());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, false);
      boolean boolean0 = byteArrayInput0.readBool();
      assertEquals(1, byteArrayInput0.currentOffset());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)57;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, true);
      Schema<ByteArrayInput> schema0 = (Schema<ByteArrayInput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      byteArrayInput0.readFieldNumber(schema0);
      LinkBuffer linkBuffer0 = new LinkBuffer();
      LowCopyProtobufOutput lowCopyProtobufOutput0 = new LowCopyProtobufOutput(linkBuffer0);
      byteArrayInput0.transferByteRangeTo(lowCopyProtobufOutput0, true, 1752, true);
      assertEquals(57, byteArrayInput0.getLastTag());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)100;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, true);
      Schema<String> schema0 = (Schema<String>) mock(Schema.class, new ViolatedAssumptionAnswer());
      int int0 = byteArrayInput0.readFieldNumber(schema0);
      assertEquals(1, byteArrayInput0.currentOffset());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)76;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, true);
      byteArrayInput0.skipMessage();
      Schema<Integer> schema0 = (Schema<Integer>) mock(Schema.class, new ViolatedAssumptionAnswer());
      try { 
        byteArrayInput0.readFieldNumber(schema0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Protocol message contained an invalid tag (zero).
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ByteArrayInput byteArrayInput0 = new ByteArrayInput((byte[]) null, 0, 0, false);
      GraphByteArrayInput graphByteArrayInput0 = new GraphByteArrayInput(byteArrayInput0, 0);
      assertEquals(0, byteArrayInput0.currentLimit());
      
      int int0 = byteArrayInput0.readFieldNumber((Schema<Object>) graphByteArrayInput0);
      assertEquals(0, int0);
      assertFalse(byteArrayInput0.isCurrentFieldPacked());
      assertEquals(0, byteArrayInput0.getLastTag());
      assertFalse(byteArrayInput0.decodeNestedMessageAsGroup);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, (byte)9, (byte) (-31), false);
      Schema<GraphProtostuffOutput> schema0 = (Schema<GraphProtostuffOutput>) mock(Schema.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        byteArrayInput0.readFieldNumber(schema0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("io.protostuff.ByteArrayInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, true);
      byteArrayInput0.handleUnknownField(56, (Schema<ProtostuffOutput>) null);
      assertEquals(1, byteArrayInput0.currentOffset());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-11);
      byteArray0[2] = (byte) (-97);
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte) (-97);
      byteArray0[6] = (byte)56;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, false);
      byteArrayInput0.readUInt32();
      try { 
        byteArrayInput0.skipMessage();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Protocol message tag had invalid wire type.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)76;
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, true);
      byteArrayInput0.skipMessage();
      assertEquals(76, byteArrayInput0.getLastTag());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-115);
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, false);
      boolean boolean0 = byteArrayInput0.skipField((byte) (-38));
      assertEquals(15, byteArrayInput0.currentOffset());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, true);
      boolean boolean0 = byteArrayInput0.skipField((byte)109);
      assertEquals(4, byteArrayInput0.currentOffset());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, 1818, (byte)48, true);
      try { 
        byteArrayInput0.checkLastTagWas((byte) (-1));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Protocol message end-group tag did not match expected tag.
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)10;
      byteArray0[0] = (byte) (-122);
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, false);
      byteArrayInput0.readSInt64();
      byteArrayInput0.readTag();
      int int0 = byteArrayInput0.readUInt32();
      assertEquals(10, byteArrayInput0.getLastTag());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, true);
      try { 
        byteArrayInput0.skipMessage();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Protocol message contained an invalid tag (zero).
         //
         verifyException("io.protostuff.ProtobufException", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, (-128), (byte) (-121), false);
      int int0 = byteArrayInput0.getLastTag();
      assertEquals((-128), byteArrayInput0.currentOffset());
      assertFalse(byteArrayInput0.decodeNestedMessageAsGroup);
      assertFalse(byteArrayInput0.isCurrentFieldPacked());
      assertEquals(0, int0);
      assertEquals((-249), byteArrayInput0.currentLimit());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, (byte)0, (-586), true);
      int int0 = byteArrayInput0.currentLimit();
      assertTrue(byteArrayInput0.decodeNestedMessageAsGroup);
      assertEquals(0, byteArrayInput0.currentOffset());
      assertEquals((-586), int0);
      assertEquals(0, byteArrayInput0.getLastTag());
      assertFalse(byteArrayInput0.isCurrentFieldPacked());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, (-2819), 82, true);
      int int0 = byteArrayInput0.currentOffset();
      assertEquals((-2737), byteArrayInput0.currentLimit());
      assertTrue(byteArrayInput0.decodeNestedMessageAsGroup);
      assertEquals((-2819), int0);
      assertEquals(0, byteArrayInput0.getLastTag());
      assertFalse(byteArrayInput0.isCurrentFieldPacked());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInput byteArrayInput0 = new ByteArrayInput(byteArray0, (-97), (byte)7, false);
      byteArrayInput0.reset(2007, (byte)7);
      assertEquals(2014, byteArrayInput0.currentLimit());
  }
}
